{"version":3,"sources":["webpack:///static/js/app.49794645c0bdc1ce3ce8.js","webpack:///./src/App.vue","webpack:///./src/App.vue?087a","webpack:///./src/router/index.js","webpack:///./src/store/modules/cytoscape.js","webpack:///./src/api/cytoscape.js","webpack:///./src/api/json.js","webpack:///./src/api/jsons/sklearnModelSelection.js","webpack:///./src/api/jsons/sklearnDecomposition.js","webpack:///./src/api/jsons/sklearnPreprocessing.js","webpack:///./src/api/jsons/sklearnSvm.js","webpack:///./src/api/jsons/sklearnLinearModel.js","webpack:///./src/api/jsons/sklearnMetrics.js","webpack:///./src/api/jsons/pandasAbbrv.js","webpack:///./src/api/jsons/chemmlChemUi.js","webpack:///./src/api/jsons/chemmlModelsUi.js","webpack:///./src/api/jsons/chemmlDatasetsUi.js","webpack:///./src/api/jsons/chemmlWrapperPreprocessing_ui_prepare.js","webpack:///./src/api/jsons/chemmlWrapperPreprocessing_ui.js","webpack:///./src/api/jsons/menu.js","webpack:///./src/store/modules/_utils.js","webpack:///./src/store/modules/modals.js","webpack:///./src/store/modules/auth.js","webpack:///./src/store/modules/password.js","webpack:///./src/store/modules/signup.js","webpack:///./src/store/modules/graph.js","webpack:///./src/api/graph.js","webpack:///./src/containers/Full.vue","webpack:///./src/_nav.js","webpack:///./src/components/Aside.vue","webpack:///./src/components/Aside.vue?fe1c","webpack:///./src/components/Breadcrumb.vue","webpack:///./src/components/Breadcrumb.vue?5e73","webpack:///./src/components/Callout.vue","webpack:///./src/components/Callout.vue?d57c","webpack:///./src/components/Footer.vue","webpack:///./src/components/Footer.vue?54bd","webpack:///./src/components/Header/Header.vue","webpack:///./src/components/Header/HeaderDropdown.vue","webpack:///./src/components/Header/HeaderDropdown.vue?4c72","webpack:///./src/components/Header/Header.vue?75ed","webpack:///./src/components/Sidebar/Sidebar.vue","webpack:///./src/components/Sidebar/SidebarFooter.vue","webpack:///./src/components/Sidebar/SidebarFooter.vue?38b9","webpack:///./src/components/Sidebar/SidebarForm.vue","webpack:///./src/components/Sidebar/SidebarForm.vue?38db","webpack:///./src/components/Sidebar/SidebarHeader.vue","webpack:///./src/components/Sidebar/SidebarHeader.vue?0f9f","webpack:///./src/components/Sidebar/SidebarMinimizer.vue","webpack:///./src/components/Sidebar/SidebarMinimizer.vue?a783","webpack:///./src/components/Sidebar/SidebarNavDivider.vue","webpack:///./src/components/Sidebar/SidebarNavDivider.vue?3d50","webpack:///./src/components/Sidebar/SidebarNavDropdown.vue","webpack:///./src/components/Sidebar/SidebarNavDropdown.vue?bdee","webpack:///./src/components/Sidebar/SidebarNavLink.vue?e1a8","webpack:///./src/components/Sidebar/SidebarNavTitle.vue","webpack:///./src/components/Sidebar/SidebarNavTitle.vue?fac2","webpack:///./src/components/Sidebar/SidebarNavItem.vue?96e6","webpack:///./src/components/Sidebar/SidebarNavLabel.vue","webpack:///./src/components/Sidebar/SidebarNavLabel.vue?1cf5","webpack:///./src/components/Sidebar/Sidebar.vue?2e08","webpack:///./src/components/Switch.vue","webpack:///./src/components/Switch.vue?5ed8","webpack:///./src/containers/Full.vue?90db","webpack:///./src/views/Landing.vue","webpack:///./src/views/Landing.vue?255f","webpack:///./src/views/Dashboard.vue","webpack:///./src/views/dashboard/CytoscapeGraph.vue","webpack:///./src/views/dashboard/CytoscapeGraph.vue?4a04","webpack:///./src/views/dashboard/Modals/index.vue","webpack:///./src/views/dashboard/Modals/AddNode.vue","webpack:///./src/views/dashboard/_utils.js","webpack:///./src/views/dashboard/Modals/AddNode.vue?0971","webpack:///./src/views/dashboard/Modals/EditNode.vue","webpack:///./src/views/dashboard/Modals/EditNode.vue?1fae","webpack:///./src/views/dashboard/Modals/EditEdge.vue","webpack:///./src/views/dashboard/Modals/EditEdge.vue?2e5c","webpack:///./src/views/dashboard/Modals/LoadGraph.vue","webpack:///./src/views/dashboard/Modals/LoadGraph.vue?9655","webpack:///./src/views/dashboard/Modals/SaveGraph.vue","webpack:///./src/views/dashboard/Modals/SaveGraph.vue?1ed8","webpack:///./src/views/dashboard/Modals/UpdateGraph.vue","webpack:///./src/views/dashboard/Modals/UpdateGraph.vue?8966","webpack:///./src/views/dashboard/Modals/Wizard.vue","webpack:///./src/components/FileReader.vue","webpack:///./src/components/FileReader.vue?bc36","webpack:///./src/views/dashboard/Modals/Wizard.vue?b23d","webpack:///./src/views/dashboard/Modals/Help.vue","webpack:///./src/views/dashboard/Modals/Help.vue?dec8","webpack:///./src/views/dashboard/Modals/index.vue?ba02","webpack:///./src/views/Dashboard.vue?fe26","webpack:///./src/views/Results.vue","webpack:///./src/views/Table.vue","webpack:///./src/views/Table.vue?160a","webpack:///./src/views/Results.vue?f377","webpack:///./src/views/Visual.vue","webpack:///./node_modules/css-font-size-keywords/index.json","webpack:///./src/api/session.js","webpack:///./node_modules/plotly/statusmsgs.json","webpack:///./src/views/Visual.vue?8b60","webpack:///./src/views/pages/Page404.vue","webpack:///./src/views/pages/Page404.vue?62e9","webpack:///./src/views/pages/Page500.vue","webpack:///./src/views/pages/Page500.vue?0e0d","webpack:///./src/views/pages/Login.vue","webpack:///./src/views/pages/Login.vue?c44a","webpack:///./src/views/pages/Register.vue","webpack:///./src/views/pages/Register.vue?2544","webpack:///./src/api/auth.js","webpack:///./src/store/modules/types.js","webpack:///src/App.vue","webpack:///./src/store/index.js","webpack:///src/containers/Full.vue","webpack:///src/components/Aside.vue","webpack:///src/components/Breadcrumb.vue","webpack:///src/components/Callout.vue","webpack:///src/components/Footer.vue","webpack:///src/components/Header/Header.vue","webpack:///src/components/Header/HeaderDropdown.vue","webpack:///src/components/Sidebar/Sidebar.vue","webpack:///src/components/Sidebar/SidebarFooter.vue","webpack:///src/components/Sidebar/SidebarForm.vue","webpack:///src/components/Sidebar/SidebarHeader.vue","webpack:///src/components/Sidebar/SidebarMinimizer.vue","webpack:///src/components/Sidebar/SidebarNavDivider.vue","webpack:///src/components/Sidebar/SidebarNavDropdown.vue","webpack:///./src/components/Sidebar/SidebarNavLink.vue","webpack:///src/components/Sidebar/SidebarNavLink.vue","webpack:///src/components/Sidebar/SidebarNavTitle.vue","webpack:///./src/components/Sidebar/SidebarNavItem.vue","webpack:///src/components/Sidebar/SidebarNavItem.vue","webpack:///src/components/Sidebar/SidebarNavLabel.vue","webpack:///src/components/Switch.vue","webpack:///src/views/Dashboard.vue","webpack:///src/views/dashboard/CytoscapeGraph.vue","webpack:///src/views/dashboard/Modals/index.vue","webpack:///src/views/dashboard/Modals/AddNode.vue","webpack:///src/views/dashboard/Modals/EditNode.vue","webpack:///src/views/dashboard/Modals/EditEdge.vue","webpack:///src/views/dashboard/Modals/LoadGraph.vue","webpack:///src/views/dashboard/Modals/SaveGraph.vue","webpack:///src/views/dashboard/Modals/UpdateGraph.vue","webpack:///src/views/dashboard/Modals/Wizard.vue","webpack:///src/components/FileReader.vue","webpack:///src/views/dashboard/Modals/Help.vue","webpack:///src/views/Results.vue","webpack:///src/views/Table.vue","webpack:///src/views/Visual.vue","webpack:///./node_modules/css-global-keywords/index.json","webpack:///./node_modules/css-system-font-keywords/index.json","webpack:///./node_modules/css-font-weight-keywords/index.json","webpack:///./node_modules/css-font-style-keywords/index.json","webpack:///./node_modules/css-font-stretch-keywords/index.json","webpack:///src/views/pages/Page404.vue","webpack:///src/views/pages/Page500.vue","webpack:///src/views/pages/Login.vue","webpack:///src/views/pages/Register.vue","webpack:///./src/main.js"],"names":["webpackJsonp","1000","module","exports","1014","__webpack_exports__","__webpack_require__","injectStyle","context","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5b045a7c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_App_vue__","__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__","__vue_styles__","Component","Object","1015","1016","1017","d","render","staticRenderFns","_vm","this","_h","$createElement","_self","_c","1018","__dirname","__WEBPACK_IMPORTED_MODULE_0_vue__","__WEBPACK_IMPORTED_MODULE_1_vue_router__","__WEBPACK_IMPORTED_MODULE_2__store__","__WEBPACK_IMPORTED_MODULE_3__containers_Full__","__WEBPACK_IMPORTED_MODULE_4__views_Landing__","__WEBPACK_IMPORTED_MODULE_5__views_Dashboard__","__WEBPACK_IMPORTED_MODULE_6__views_Results__","__WEBPACK_IMPORTED_MODULE_7__views_Visual__","__WEBPACK_IMPORTED_MODULE_8__views_pages_Page404__","__WEBPACK_IMPORTED_MODULE_9__views_pages_Page500__","__WEBPACK_IMPORTED_MODULE_10__views_pages_Login__","__WEBPACK_IMPORTED_MODULE_11__views_pages_Register__","use","redirectLogout","to","from","next","dispatch","then","router","mode","base","linkActiveClass","scrollBehavior","y","routes","path","redirect","name","component","children","meta","requiresAuth","c","requiresUnauth","beforeEnter","beforeEach","matched","some","record","getters","call","1020","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default","n","__WEBPACK_IMPORTED_MODULE_1__api_cytoscape__","__WEBPACK_IMPORTED_MODULE_2__api_session__","__WEBPACK_IMPORTED_MODULE_3__utils__","__WEBPACK_IMPORTED_MODULE_4_lodash__","__WEBPACK_IMPORTED_MODULE_4_lodash___default","state","cytoscapeConfig","edgehandlesConfig","contextMenusConfig","funcMeta","libMeta","libUINames","cy","cyClickPos","x","libHierarchy","wizHierarchy","selectedNode","selectedEdge","initGraph","elements","actions","setCytoscapeInitConfig","_ref","container","commit","a","resolve","reject","getCytoscapeInitConfig","setEdgehandlesConfig","_ref2","self","getEdgehandlesConfig","complete","getEdgeDropFunction","setLibHierarchy","_ref3","getLibHierarchy","setFuncMeta","_ref4","getFuncMeta","setLibMeta","_ref5","getLibMeta","setLibUINames","_ref6","getlibUINames","setContextMenusConfig","_ref7","getContextMenusConfig","menuItems","onClickFunction","getEditNodeOnClickFunction","getEditEdgeOnClickFunction","getRemoveNodeOnClickFunction","getRemoveEdgeOnClickFunction","getAddNodeOnClickFunction","setCy","_ref8","cyObj","setInitGraph","_ref9","get","result","data","error","console","mutations","setCytoscapeConfig","setWizHierarchy","cloneDeep","setCyClickPos","cyPos","log","setSelectedNodeId","id","setSelectedNodeElem","elem","resetSelectedNode","setSelectedEdge","1048","__WEBPACK_IMPORTED_MODULE_0__json__","_cytoscapeInitConfig","boxSelectionEnabled","autounselectify","minZoom","maxZoom","layout","style","selector","content","text-opacity","text-valign","text-halign","background-color","curve-style","width","target-arrow-shape","line-color","target-arrow-color","height","shape","overlay-opacity","border-width","border-opacity","border-color","source-arrow-color","_edgehandlesConfig","toggleOffOnLeave","handleNodes","handleSize","edgeType","sourceNode","targetNode","_contextMenusConfig","tooltipText","event","coreAsWell","menuItemClasses","contextMenuClasses","_libMeta","table","Convert","datasets","xyz","python script","molecular descriptors","inorganic input","distance matrix","inorganic descriptors","data manipulation","feature transformation","data cleaning","scaling","feature representation","split","regression","evaluate","validate","grid","genetic algorithm","plot","artist","figure","file","NA","_libUINames","cb","temp","setTimeout","buyProducts","products","errorCb","Math","random","navigator","userAgent","indexOf","1049","__WEBPACK_IMPORTED_MODULE_0__jsons_sklearnModelSelection__","__WEBPACK_IMPORTED_MODULE_1__jsons_sklearnDecomposition__","__WEBPACK_IMPORTED_MODULE_2__jsons_sklearnPreprocessing__","__WEBPACK_IMPORTED_MODULE_3__jsons_sklearnSvm__","__WEBPACK_IMPORTED_MODULE_4__jsons_sklearnLinearModel__","__WEBPACK_IMPORTED_MODULE_5__jsons_sklearnMetrics__","__WEBPACK_IMPORTED_MODULE_6__jsons_pandasAbbrv__","__WEBPACK_IMPORTED_MODULE_7__jsons_chemmlChemUi__","__WEBPACK_IMPORTED_MODULE_8__jsons_chemmlModelsUi__","__WEBPACK_IMPORTED_MODULE_9__jsons_chemmlDatasetsUi__","__WEBPACK_IMPORTED_MODULE_10__jsons_chemmlWrapperPreprocessing_ui_prepare__","__WEBPACK_IMPORTED_MODULE_11__jsons_chemmlWrapperPreprocessing_ui__","__WEBPACK_IMPORTED_MODULE_12__jsons_menu__","fp","i","length","node","push","FParameters","Methods","nf","inp","param_type","display_name","value","desc","is_optional","f","lf","mf","func","m","methinp","docstring","methop","op0","op1","op","lh","1050","inputs","outputs","node_functions","expected_shape","default_value","returned","nodes","library","1051","options","1052","1053","1054","1055","placeholder","1056","1057","1058","1059","1060","1061","1062","menu","Input","CSV","pandas","functions","Chemical","chemml","Represent","Dimensionality Reduction","sklearn","Prepare","Preprocessing","Data Splitting","Model","Linear","Neural Network","keras","Support Vector Machines","Optimize","Selection","Metrics","Output","Store Plot","Store Data","1081","target","cyTarget","group","getElementById","position","$store","edge","remove","$id","pos","cyPosition","addedEles","params","sFunc","tFunc","__WEBPACK_IMPORTED_MODULE_0_lodash___default","__WEBPACK_IMPORTED_MODULE_0_lodash__","1082","addNodeVisible","editNodeVisible","editEdgeVisible","loadGraphVisible","saveGraphVisible","helpVisible","updateGraphVisible","wizardVisible","showAddNode","showEditNode","showEditEdge","showSaveGraph","showHelp","hideHelp","showLoadGraph","showUpdateGraph","showWizard","hideAddNode","hideEditNode","hideEditEdge","hideSaveGraph","hideLoadGraph","hideUpdateGraph","hideWizard","1083","_mutations","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default","__WEBPACK_IMPORTED_MODULE_1__api_auth__","__WEBPACK_IMPORTED_MODULE_3__types__","initialState","authenticating","token","isAuthenticated","loginFailed","login","username","password","key","catch","logout","finally","initialize","localStorage","getItem","setItem","defaults","headers","Authorization","removeItem","namespaced","1087","__WEBPACK_IMPORTED_MODULE_2__types__","emailCompleted","emailError","emailLoading","resetCompleted","resetError","resetLoading","resetPassword","uid","password1","password2","resetAccountPassword","sendPasswordResetEmail","email","sendAccountPasswordResetEmail","clearResetStatus","clearEmailStatus","1088","activationCompleted","activationError","activationLoading","registrationCompleted","registrationError","registrationLoading","createAccount","activateAccount","verifyAccountEmail","clearRegistrationStatus","clearActivationStatus","1089","__WEBPACK_IMPORTED_MODULE_0__api_graph__","usergraphs","rootgraphs","currentGraphId","currentGraphType","currentGraphTitle","graphruns","updateRootGraphs","getRootGraphs","updateUserGraphs","getUserGraphs","updateCurrentUserGraph","title","saveCurrentUserGraph","setCurrentGraphId","graphId","setCurrentGraphType","graphType","setCurrentGraphTitle","graphTitle","runCurrentGraph","_ref10","runGraph","graph_id","setGraphRuns","_ref11","getGraphRuns","_ref12","setRootGraphs","setUserGraphs","apiError","apiSuccess","newData","forEach","item","row","graph","start_time","created","status","1090","__WEBPACK_IMPORTED_MODULE_0__session__","payload","put","post","1091","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Full_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4fd2d3e0_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Full_vue__","1092","items","url","icon","1093","__WEBPACK_IMPORTED_MODULE_0__Aside_vue__","__WEBPACK_IMPORTED_MODULE_1__Breadcrumb_vue__","__WEBPACK_IMPORTED_MODULE_3__Footer_vue__","__WEBPACK_IMPORTED_MODULE_4__Header_Header_vue__","__WEBPACK_IMPORTED_MODULE_5__Sidebar_Sidebar_vue__","1094","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Aside_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_441e579c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Aside_vue__","1095","staticClass","1096","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Breadcrumb_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_9c62087c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Breadcrumb_vue__","1097","_l","index","isLast","_v","_s","showName","attrs","1098","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Callout_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_46ade4be_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Callout_vue__","1099","class","classList","_t","1100","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Footer_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6db2f18b_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Footer_vue__","1101","1102","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Header_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_54f5a076_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Header_vue__","1103","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_HeaderDropdown_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_39a26b66_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_HeaderDropdown_vue__","1104","right","no-caret","slot","1105","type","on","click","mobileSidebarToggle","sidebarToggle","1106","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Sidebar_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1b899e65_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Sidebar_vue__","1107","1108","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarFooter_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_419727a5_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarFooter_vue__","1109","1110","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarForm_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6bed3424_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarForm_vue__","1111","1112","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarHeader_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_a0777a52_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarHeader_vue__","1113","1114","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarMinimizer_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_a5c6b7ae_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarMinimizer_vue__","1115","$event","sidebarMinimize","brandMinimize","1116","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavDivider_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6d1c2ccd_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavDivider_vue__","1121","1122","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavDropdown_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_536afe98_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavDropdown_vue__","1123","tag","disabled","handleClick","1124","href","badge","text","variant","_e","1125","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavTitle_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5f92ee61_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavTitle_vue__","1126","wrapper","element","_b","attributes","1127","hideMobile","1128","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavLabel_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_52cff4be_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavLabel_vue__","1129","classes","navItem","navLink","1130","label","childL1","childL2","1131","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Switch_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_39197026_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Switch_vue__","1132","domProps","checked","isChecked","change","handleChange","data-on","data-off","off","1133","navItems","nav","list","1134","__WEBPACK_IMPORTED_MODULE_0__node_modules_vue_loader_lib_template_compiler_index_id_data_v_38d7b71b_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Landing_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_runtime_component_normalizer__","1135","lg","sm","src","rounded","alt","1136","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Dashboard_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_03879230_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Dashboard_vue__","1142","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_CytoscapeGraph_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_15ab8855_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_CytoscapeGraph_vue__","1143","1191","1192","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_index_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_243b6ee4_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_index_vue__","1193","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_AddNode_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6768a484_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_AddNode_vue__","1194","1195","s4","floor","toString","substring","guid","1196","hide-header-close","ok","handleOk","cancel","hide","model","callback","$$v","myModal","expression","stage","key1","label-for","label-cols","horizontal","key2","JSON","stringify","for","1197","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_EditNode_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_41b23607_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_EditNode_vue__","1198","1199","handleCancel","hasOwnProperty","lib","handleFuncChange","undefined","meths","param","handleMethChange","fparams","isHidden","isHidden2","$set","1200","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_EditEdge_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_ae382620_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_EditEdge_vue__","1201","input","unchecked-value","output","1202","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_LoadGraph_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_dd0c9334_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_LoadGraph_vue__","1203","1204","size","staticStyle","border-right","view","openView","1205","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SaveGraph_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_7ab72377_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SaveGraph_vue__","1206","1208","newGraphTitle","1209","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_UpdateGraph_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6af6e162_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_UpdateGraph_vue__","1210","1211","ok-title","cancel-title","no-close-on-esc","no-close-on-backdrop","1212","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Wizard_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_12646eb7_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Wizard_vue__","1213","1215","1216","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_FileReader_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1faa7a9c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_FileReader_vue__","1217","1218","loadTextFromFile","1219","hide-header","hide-footer","ref","step-size","color","on-complete","on-change","setActiveIndex","border","padding","margin-top","directives","rawName","selectedFunction","$$selectedVal","Array","prototype","filter","o","selected","map","_value","multiple","info","margin-left","rows","composing","load","1220","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Help_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5e885dd4_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Help_vue__","1221","1222","1223","1224","handleRun","handleSave","handleResetLayout","handleLoad","1225","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Results_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_18f4d491_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Results_vue__","1226","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Table_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_02df20c5_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Table_vue__","1227","header","caption","hover","striped","bordered","small","fixed","responsive","fields","graphruns_fields","current-page","currentPage","per-page","perPage","scopedSlots","_u","fn","getBadge","total-rows","getRowCount","prev-text","next-text","hide-goto-end-buttons","1228","1229","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Visual_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_d6d95310_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Visual_vue__","1230","1239","1523","1832","220","__WEBPACK_IMPORTED_MODULE_0_axios__","__WEBPACK_IMPORTED_MODULE_0_axios___default","session","create","xsrfCookieName","xsrfHeaderName","2354","2356","2367","200","308","400","403","404","405","406","408","422","423","449","500","503","520","2368","_m","loadCSV","selecTion","selec1ted","active","sortKey","sortBy","_f","csv","selec2ted","col","selec3ted","parse_header","Plot","s1selected","s2selected","ata","selec4ted","selec5ted","2369","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Page404_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_49e064e2_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Page404_vue__","2370","md","2371","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Page500_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5b5c6502_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Page500_vue__","2372","2373","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Login_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_33b7a6f7_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Login_vue__","2374","no-body","user","pass","cols","2375","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Register_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_9b2385e2_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Register_vue__","2376","block","306","changeAccountPassword","new_password1","new_password2","getAccountDetails","updateAccountDetails","patch","307","ACTIVATION_BEGIN","ACTIVATION_CLEAR","ACTIVATION_FAILURE","ACTIVATION_SUCCESS","LOGIN_BEGIN","LOGIN_FAILURE","LOGIN_SUCCESS","LOGOUT","PASSWORD_EMAIL_BEGIN","PASSWORD_EMAIL_CLEAR","PASSWORD_EMAIL_FAILURE","PASSWORD_EMAIL_SUCCESS","PASSWORD_RESET_BEGIN","PASSWORD_RESET_CLEAR","PASSWORD_RESET_FAILURE","PASSWORD_RESET_SUCCESS","REGISTRATION_BEGIN","REGISTRATION_CLEAR","REGISTRATION_FAILURE","REGISTRATION_SUCCESS","SET_TOKEN","REMOVE_TOKEN","487","488","__WEBPACK_IMPORTED_MODULE_1_vuex__","__WEBPACK_IMPORTED_MODULE_2__modules_cytoscape__","__WEBPACK_IMPORTED_MODULE_3__modules_modals__","__WEBPACK_IMPORTED_MODULE_4__modules_auth__","__WEBPACK_IMPORTED_MODULE_5__modules_password__","__WEBPACK_IMPORTED_MODULE_6__modules_signup__","__WEBPACK_IMPORTED_MODULE_7__modules_graph__","Store","modules","cytoscape","modals","auth","signup","513","__WEBPACK_IMPORTED_MODULE_0__nav__","__WEBPACK_IMPORTED_MODULE_1__components___","components","AppHeader","Sidebar","AppAside","AppFooter","Breadcrumb","computed","$route","514","515","props","required","default","methods","516","String","calloutVariant","517","518","__WEBPACK_IMPORTED_MODULE_0__HeaderDropdown_vue__","HeaderDropdown","e","preventDefault","document","body","toggle","asideToggle","519","itemsCount","__WEBPACK_IMPORTED_MODULE_0__SidebarFooter__","__WEBPACK_IMPORTED_MODULE_1__SidebarForm__","__WEBPACK_IMPORTED_MODULE_2__SidebarHeader__","__WEBPACK_IMPORTED_MODULE_3__SidebarMinimizer__","__WEBPACK_IMPORTED_MODULE_4__SidebarNavDivider__","__WEBPACK_IMPORTED_MODULE_5__SidebarNavDropdown__","__WEBPACK_IMPORTED_MODULE_6__SidebarNavLink__","__WEBPACK_IMPORTED_MODULE_7__SidebarNavTitle__","__WEBPACK_IMPORTED_MODULE_8__SidebarNavItem__","__WEBPACK_IMPORTED_MODULE_9__SidebarNavLabel__","SidebarFooter","SidebarForm","SidebarHeader","SidebarMinimizer","SidebarNavDivider","SidebarNavDropdown","SidebarNavLink","SidebarNavTitle","SidebarNavItem","SidebarNavLabel","parentElement","521","522","523","524","525","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default","concat","itemClasses","526","527","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavLink_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_67792580_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavLink_vue__","528","linkVariant","isExternalLink","529","530","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavItem_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_7ed4d885_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavItem_vue__","531","contains","532","__WEBPACK_IMPORTED_MODULE_1__SidebarNavItem__","__WEBPACK_IMPORTED_MODULE_2__SidebarNavLink__","getClasses","join","533","prop","uncheckedValue","pill","Boolean","switchType","switchVariant","switchPill","switchSize","isOn","$emit","534","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default","__WEBPACK_IMPORTED_MODULE_1__dashboard_CytoscapeGraph_vue__","__WEBPACK_IMPORTED_MODULE_2__dashboard_Modals_index_vue__","__WEBPACK_IMPORTED_MODULE_3_vuex__","CytoscapeGraph","Modals","showLoad","showSave","showUpdate","handleHelp","layoutName","animate","animationDuration","run","handleShowWizard","536","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_assign__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_assign___default","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends__","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default","__WEBPACK_IMPORTED_MODULE_2_cytoscape__","__WEBPACK_IMPORTED_MODULE_2_cytoscape___default","__WEBPACK_IMPORTED_MODULE_3_cytoscape_dagre__","__WEBPACK_IMPORTED_MODULE_3_cytoscape_dagre___default","__WEBPACK_IMPORTED_MODULE_4_cytoscape_context_menus__","__WEBPACK_IMPORTED_MODULE_4_cytoscape_context_menus___default","__WEBPACK_IMPORTED_MODULE_5_cytoscape_edgehandles__","__WEBPACK_IMPORTED_MODULE_5_cytoscape_edgehandles___default","__WEBPACK_IMPORTED_MODULE_6_jquery__","__WEBPACK_IMPORTED_MODULE_6_jquery___default","__WEBPACK_IMPORTED_MODULE_7_vuex__","mounted","_this","edgehandles","contextMenus","json","parse","543","__WEBPACK_IMPORTED_MODULE_0__AddNode_vue__","__WEBPACK_IMPORTED_MODULE_1__EditNode_vue__","__WEBPACK_IMPORTED_MODULE_2__EditEdge_vue__","__WEBPACK_IMPORTED_MODULE_3__LoadGraph_vue__","__WEBPACK_IMPORTED_MODULE_4__SaveGraph_vue__","__WEBPACK_IMPORTED_MODULE_5__UpdateGraph_vue__","__WEBPACK_IMPORTED_MODULE_6__Wizard_vue__","__WEBPACK_IMPORTED_MODULE_7__Help_vue__","AddNode","EditNode","EditEdge","LoadGraph","Help","SaveGraph","UpdateGraph","Wizard","544","__WEBPACK_IMPORTED_MODULE_2_jquery__","__WEBPACK_IMPORTED_MODULE_2_jquery___default","visible","clickPos","set","show","shownext","$selected","addNode","val","attr","ele","getElementsByName","newNode","add","545","__WEBPACK_IMPORTED_MODULE_2_lodash__","__WEBPACK_IMPORTED_MODULE_2_lodash___default","host","funcm","funcminputs","funcmoutputs","wparams","btnclass1","btnclass2","WParameters","watch","newVal","oldVal","bind","546","547","first","loadGraph","addClass","removeClass","FindGraphById","find","graphData","nodekey","548","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default","__WEBPACK_IMPORTED_MODULE_2_vuex__","printCyJson","549","550","__WEBPACK_IMPORTED_MODULE_3_vue_form_wizard__","__WEBPACK_IMPORTED_MODULE_4_vue_form_wizard_dist_vue_form_wizard_min_css__","__WEBPACK_IMPORTED_MODULE_5__components_FileReader_vue__","FormWizard","TabContent","FileReader","Enter","Search","Visualize","Finish","activeIndex","moduleCount","$refs","formWizard","reset","clearDesc","prevIndex","nextIndex","beforeCreate","551","ev","files","reader","onload","readAsText","552","help","553","__WEBPACK_IMPORTED_MODULE_0__Table_vue__","cTable","554","registered","role","totalRows","working","msg","alert","555","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_is_nan__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_is_nan___default","__WEBPACK_IMPORTED_MODULE_1__statnett_vue_plotly__","__WEBPACK_IMPORTED_MODULE_1__statnett_vue_plotly___default","__WEBPACK_IMPORTED_MODULE_2_d3__","plotly","VuePlotly","channel_name","channel_fields","channel_entries","parse_csv","eda","rawData","sortOrders","filters","capitalize","str","charAt","toUpperCase","slice","vm","csvJSON","lines","line","indexLine","obj","currentline","indexHeader","pop","doEDA","totalRec","totalCol","dataObj","j","parseInt","parseFloat","extent","avg","med","sD","Column","Min Max","Average","Median","Standard Deviation","window","onerror","evt","rdd","xx","l","yy","k","749","750","751","752","753","901","902","903","authLogin","$router","904","905","defineProperty","__WEBPACK_IMPORTED_MODULE_1_bootstrap_vue__","__WEBPACK_IMPORTED_MODULE_2__App__","__WEBPACK_IMPORTED_MODULE_3__router__","__WEBPACK_IMPORTED_MODULE_4__store__","el","store","template","App","939","957"],"mappings":"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,S9Io3dE60B,Y8Il3dFmM,WAAAH,EAAA,WACAI,WAAAJ,EAAA,WAEAK,WAAAH,EAAA,G9Io3dE57B,KAAM,WACJ,OACEoa,K8In3dN,G9Io3dM8K,K8In3dN,iB9Io3dMrQ,MACEmnB,M8In3dR,iB9Io3dQ5xB,U8In3dR,c9Io3dQG,Q8In3dR,c9Io3dQG,M8In3dR,kB9Io3dQuxB,O8In3dR,e9Io3dQC,U8In3dR,kB9Io3dQjN,M8In3dR,a9Io3dQkN,O8Il3dR,e9Io3dM3X,oBACA4X,Y8In3dN,E9Io3dMC,eACAvX,S8Il3dN,KAEAkL,SAAAuG,OAAAr+B,OAAAojC,EAAA,I9Iq3dIzC,Q8In3dJ,gB9Io3dIC,S8In3dJ,a9Io3dIh8B,a8In3dJ,e9Io3dIC,a8In3dJ,e9Io3dIN,Q8In3dJ,U9Io3dIC,W8In3dJ,a9Io3dIC,G8In3dJ,K9Io3dIkV,e8In3dJ,uB9Io3dIC,iB8Il3dJ,4B9Io3dIqN,SACErf,IAAK,WACH,MAAOpH,M8In3dfmgC,S9Iq3dME,IAAK,SAAaxxB,IACF,IAAVA,EACF7O,K8In3dVsgC,O9Iq3dUtgC,K8In3dVqmB,WAKAwR,QAAAgG,OAAAr+B,OAAAojC,EAAA,I9Io3dI9tB,W8Il3dJ,a9Im3dIO,W8Ij3dJ,gB9Im3dIirB,KAAM,WACJtgC,K8Il3dN8U,c9Io3dIuR,KAAM,WACJrmB,KAAK4jC,MAAMC,W8Il3djBC,Q9Im3dM9jC,K8Il3dNqV,c9Io3dIoS,aAAc,WACZznB,K8Il3dNqmB,Q9Io3dIF,SAAU,WACRnmB,K8Il3dNqmB,Q9Io3dI0d,UAAW,WAET,MADA/jC,MAAK8rB,iB8Il3dX,IACA,G9Io3dIN,eAAgB,SAAwBwY,EAAWC,GACjDjkC,KAAK0jC,Y8Il3dXO,K9Iq3dEC,aAAc,WACZ18B,QAAQO,I8I72dZ,sB9I82dIP,QAAQO,IAAI46B,IAA6E3iC,K8I72d7FoE,e9I82dIoD,QAAQO,I8I72dZ,qB9I+2dE02B,QAAS,WACPj3B,QAAQO,I8I72dZ,iB9I82dIP,QAAQO,IAAI46B,IAA6E3iC,K8I72d7FoE,e9I82dIoD,QAAQO,I8Ip2dZ,kB9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","file":"static/js/app.49794645c0bdc1ce3ce8.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 1000:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 1014:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue__ = __webpack_require__(487);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5b045a7c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_App_vue__ = __webpack_require__(1017);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\nfunction injectStyle (context) {\n  __webpack_require__(1015)\n  __webpack_require__(1016)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_App_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5b045a7c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_App_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5b045a7c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_App_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1015:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 1016:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 1017:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('router-view')}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1018:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(__dirname) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(280);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_router__ = __webpack_require__(1019);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__store__ = __webpack_require__(488);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__containers_Full__ = __webpack_require__(1091);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__views_Landing__ = __webpack_require__(1134);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__views_Dashboard__ = __webpack_require__(1136);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__views_Results__ = __webpack_require__(1225);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__views_Visual__ = __webpack_require__(1229);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__views_pages_Page404__ = __webpack_require__(2369);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__views_pages_Page500__ = __webpack_require__(2371);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__views_pages_Login__ = __webpack_require__(2373);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__views_pages_Register__ = __webpack_require__(2375);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */].use(__WEBPACK_IMPORTED_MODULE_1_vue_router__[\"a\" /* default */]);\n\nvar redirectLogout = function redirectLogout(to, from, next) {\n  __WEBPACK_IMPORTED_MODULE_2__store__[\"a\" /* default */].dispatch('auth/logout').then(function () {\n    return next('/pages/login');\n  });\n};\n\nvar router = new __WEBPACK_IMPORTED_MODULE_1_vue_router__[\"a\" /* default */]({\n  mode: 'hash',\n  base: __dirname,\n  linkActiveClass: 'open active',\n  scrollBehavior: function scrollBehavior() {\n    return { y: 0 };\n  },\n  routes: [{\n    path: '/',\n    redirect: '/Landing',\n    name: 'Home',\n    component: __WEBPACK_IMPORTED_MODULE_3__containers_Full__[\"a\" /* default */],\n    children: [{\n      path: 'landing',\n      name: 'Toolkit',\n      component: __WEBPACK_IMPORTED_MODULE_4__views_Landing__[\"a\" /* default */],\n      meta: {\n        requiresAuth: true\n      }\n    }, {\n      path: 'dashboard',\n      name: 'Dashboard',\n      component: __WEBPACK_IMPORTED_MODULE_5__views_Dashboard__[\"a\" /* default */],\n      meta: {\n        requiresAuth: true\n      }\n    }, {\n      path: 'results',\n      name: 'Results',\n      component: __WEBPACK_IMPORTED_MODULE_6__views_Results__[\"a\" /* default */],\n      meta: {\n        requiresAuth: true\n      }\n    }, {\n      path: 'visual',\n      name: 'Visual',\n      component: __WEBPACK_IMPORTED_MODULE_7__views_Visual__[\"a\" /* default */],\n      meta: {\n        requiresAuth: true\n      }\n    }]\n  }, {\n    path: '/pages',\n    redirect: '/pages/404',\n    name: 'Pages',\n    component: {\n      render: function render(c) {\n        return c('router-view');\n      }\n    },\n    children: [{\n      path: '404',\n      name: 'Page404',\n      component: __WEBPACK_IMPORTED_MODULE_8__views_pages_Page404__[\"a\" /* default */]\n    }, {\n      path: '500',\n      name: 'Page500',\n      component: __WEBPACK_IMPORTED_MODULE_9__views_pages_Page500__[\"a\" /* default */]\n    }, {\n      path: 'login',\n      name: 'Login',\n      component: __WEBPACK_IMPORTED_MODULE_10__views_pages_Login__[\"a\" /* default */],\n      meta: {\n        requiresUnauth: true\n      }\n    }, {\n      path: 'register',\n      name: 'Register',\n      component: __WEBPACK_IMPORTED_MODULE_11__views_pages_Register__[\"a\" /* default */]\n    }]\n  }, {\n    path: '/logout',\n    beforeEnter: redirectLogout\n  }]\n});\n\nrouter.beforeEach(function (to, from, next) {\n  if (to.matched.some(function (record) {\n    return record.meta.requiresAuth;\n  })) {\n    __WEBPACK_IMPORTED_MODULE_2__store__[\"a\" /* default */].dispatch('auth/initialize').then(function () {\n      if (!__WEBPACK_IMPORTED_MODULE_2__store__[\"a\" /* default */].getters['auth/isAuthenticated']) {\n        next('/pages/login');\n      } else {\n        next();\n      }\n    });\n  } else if (to.matched.some(function (record) {\n    return record.meta.requiresUnauth;\n  })) {\n    __WEBPACK_IMPORTED_MODULE_2__store__[\"a\" /* default */].dispatch('auth/initialize').then(function () {\n      if (__WEBPACK_IMPORTED_MODULE_2__store__[\"a\" /* default */].getters['auth/isAuthenticated']) {\n        next('/pages/dashboard');\n      } else {\n        next();\n      }\n    });\n  } else {\n    next();\n  }\n});\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (router);\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, \"/\"))\n\n/***/ }),\n\n/***/ 1020:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise__ = __webpack_require__(1021);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__api_cytoscape__ = __webpack_require__(1048);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__api_session__ = __webpack_require__(220);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(1081);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash__ = __webpack_require__(304);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_lodash__);\n\n\n\n\n\n\nvar state = {\n  cytoscapeConfig: {},\n  edgehandlesConfig: {},\n  contextMenusConfig: {},\n  funcMeta: {},\n  libMeta: {},\n  libUINames: {},\n  cy: {},\n  cyClickPos: {\n    x: 20,\n    y: 20\n  },\n  libHierarchy: {},\n  wizHierarchy: {},\n  selectedNode: {},\n  selectedEdge: {},\n  initGraph: {}\n};\n\nvar getters = {\n  cytoscapeConfig: function cytoscapeConfig(state) {\n    return state.cytoscapeConfig;\n  },\n  edgehandlesConfig: function edgehandlesConfig(state) {\n    return state.edgehandlesConfig;\n  },\n  contextMenusConfig: function contextMenusConfig(state) {\n    return state.contextMenusConfig;\n  },\n  libHierarchy: function libHierarchy(state) {\n    return state.libHierarchy;\n  },\n  wizHierarchy: function wizHierarchy(state) {\n    return state.wizHierarchy;\n  },\n  funcMeta: function funcMeta(state) {\n    return state.funcMeta;\n  },\n  libMeta: function libMeta(state) {\n    return state.libMeta;\n  },\n  libUINames: function libUINames(state) {\n    return state.libUINames;\n  },\n  elements: function elements(state) {\n    return state.cy.elements;\n  },\n  cy: function cy(state) {\n    return state.cy;\n  },\n  cyClickPos: function cyClickPos(state) {\n    return state.cyClickPos;\n  },\n  selectedNode: function selectedNode(state) {\n    return state.selectedNode;\n  },\n  selectedEdge: function selectedEdge(state) {\n    return state.selectedEdge;\n  },\n  initGraph: function initGraph(state) {\n    return state.initGraph;\n  }\n};\n\nvar actions = {\n  setCytoscapeInitConfig: function setCytoscapeInitConfig(_ref, container) {\n    var commit = _ref.commit;\n\n    return new __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a(function (resolve, reject) {\n      __WEBPACK_IMPORTED_MODULE_1__api_cytoscape__[\"a\" /* default */].getCytoscapeInitConfig(function (cytoscapeConfig) {\n        cytoscapeConfig.container = container;\n        commit('setCytoscapeConfig', cytoscapeConfig);\n        resolve();\n      });\n    });\n  },\n  setEdgehandlesConfig: function setEdgehandlesConfig(_ref2, self) {\n    var commit = _ref2.commit;\n\n    return new __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a(function (resolve, reject) {\n      __WEBPACK_IMPORTED_MODULE_1__api_cytoscape__[\"a\" /* default */].getEdgehandlesConfig(function (edgehandlesConfig) {\n        edgehandlesConfig.complete = __WEBPACK_IMPORTED_MODULE_3__utils__[\"a\" /* default */].getEdgeDropFunction(self);\n        commit('setEdgehandlesConfig', edgehandlesConfig);\n        resolve();\n      });\n    });\n  },\n  setLibHierarchy: function setLibHierarchy(_ref3) {\n    var commit = _ref3.commit;\n\n    return new __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a(function (resolve, reject) {\n      __WEBPACK_IMPORTED_MODULE_1__api_cytoscape__[\"a\" /* default */].getLibHierarchy(function (libHierarchy) {\n        commit('setLibHierarchy', libHierarchy);\n        commit('setWizHierarchy', libHierarchy);\n        resolve();\n      });\n    });\n  },\n  setFuncMeta: function setFuncMeta(_ref4) {\n    var commit = _ref4.commit;\n\n    return new __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a(function (resolve, reject) {\n      __WEBPACK_IMPORTED_MODULE_1__api_cytoscape__[\"a\" /* default */].getFuncMeta(function (funcMeta) {\n        commit('setFuncMeta', funcMeta);\n        resolve();\n      });\n    });\n  },\n  setLibMeta: function setLibMeta(_ref5) {\n    var commit = _ref5.commit;\n\n    return new __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a(function (resolve, reject) {\n      __WEBPACK_IMPORTED_MODULE_1__api_cytoscape__[\"a\" /* default */].getLibMeta(function (libMeta) {\n        commit('setLibMeta', libMeta);\n        resolve();\n      });\n    });\n  },\n  setLibUINames: function setLibUINames(_ref6) {\n    var commit = _ref6.commit;\n\n    return new __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a(function (resolve, reject) {\n      __WEBPACK_IMPORTED_MODULE_1__api_cytoscape__[\"a\" /* default */].getlibUINames(function (libUINames) {\n        commit('setLibUINames', libUINames);\n        resolve();\n      });\n    });\n  },\n  setContextMenusConfig: function setContextMenusConfig(_ref7, self) {\n    var commit = _ref7.commit;\n\n    return new __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a(function (resolve, reject) {\n      __WEBPACK_IMPORTED_MODULE_1__api_cytoscape__[\"a\" /* default */].getContextMenusConfig(function (contextMenusConfig) {\n        contextMenusConfig.menuItems[0].onClickFunction = __WEBPACK_IMPORTED_MODULE_3__utils__[\"a\" /* default */].getEditNodeOnClickFunction(self);\n        contextMenusConfig.menuItems[1].onClickFunction = __WEBPACK_IMPORTED_MODULE_3__utils__[\"a\" /* default */].getEditEdgeOnClickFunction(self);\n        contextMenusConfig.menuItems[2].onClickFunction = __WEBPACK_IMPORTED_MODULE_3__utils__[\"a\" /* default */].getRemoveNodeOnClickFunction(self);\n        contextMenusConfig.menuItems[3].onClickFunction = __WEBPACK_IMPORTED_MODULE_3__utils__[\"a\" /* default */].getRemoveEdgeOnClickFunction(self);\n        contextMenusConfig.menuItems[4].onClickFunction = __WEBPACK_IMPORTED_MODULE_3__utils__[\"a\" /* default */].getAddNodeOnClickFunction(self);\n        commit('setContextMenusConfig', contextMenusConfig);\n        resolve();\n      });\n    });\n  },\n  setCy: function setCy(_ref8, cyObj) {\n    var commit = _ref8.commit;\n\n    return new __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a(function (resolve, reject) {\n      commit('setCy', cyObj);\n      resolve();\n    });\n  },\n  setInitGraph: function setInitGraph(_ref9) {\n    var commit = _ref9.commit;\n\n    return new __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a(function (resolve, reject) {\n      __WEBPACK_IMPORTED_MODULE_2__api_session__[\"a\" /* default */].get('/api/graphs/49').then(function (result) {\n        commit('setInitGraph', result.data);\n        resolve();\n      }, function (error) {\n        console.error(error);\n        reject(error);\n      });\n    });\n  }\n};\n\nvar mutations = {\n  setCytoscapeConfig: function setCytoscapeConfig(state, cytoscapeConfig) {\n    state.cytoscapeConfig = cytoscapeConfig;\n  },\n  setEdgehandlesConfig: function setEdgehandlesConfig(state, edgehandlesConfig) {\n    state.edgehandlesConfig = edgehandlesConfig;\n  },\n  setLibHierarchy: function setLibHierarchy(state, libHierarchy) {\n    state.libHierarchy = libHierarchy;\n  },\n  setWizHierarchy: function setWizHierarchy(state, libHierarchy) {\n    var wizHierarchy = __WEBPACK_IMPORTED_MODULE_4_lodash___default.a.cloneDeep(libHierarchy);\n    wizHierarchy['Finish'] = 'finish';\n    state.wizHierarchy = wizHierarchy;\n  },\n  setFuncMeta: function setFuncMeta(state, funcMeta) {\n    state.funcMeta = funcMeta;\n  },\n  setLibMeta: function setLibMeta(state, libMeta) {\n    state.libMeta = libMeta;\n  },\n  setLibUINames: function setLibUINames(state, libUINames) {\n    state.libUINames = libUINames;\n  },\n  setContextMenusConfig: function setContextMenusConfig(state, contextMenusConfig) {\n    state.contextMenusConfig = contextMenusConfig;\n  },\n  setCy: function setCy(state, cyObj) {\n    state.cy = cyObj;\n  },\n  setCyClickPos: function setCyClickPos(state, cyPos) {\n    console.log(cyPos);\n    state.cyClickPos.x = cyPos.x;\n    state.cyClickPos.y = cyPos.y;\n  },\n  setSelectedNodeId: function setSelectedNodeId(state, id) {\n    state.selectedNode = { id: id };\n  },\n  setSelectedNodeElem: function setSelectedNodeElem(state, elem) {\n    state.selectedNode.elem = elem;\n  },\n  resetSelectedNode: function resetSelectedNode(state) {\n    state.selectedNode = {};\n  },\n  setSelectedEdge: function setSelectedEdge(state, elem) {\n    state.selectedEdge = elem;\n  },\n  setInitGraph: function setInitGraph(state, initGraph) {\n    state.initGraph = initGraph;\n  }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n});\n\n/***/ }),\n\n/***/ 1048:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__json__ = __webpack_require__(1049);\n\n\n\nvar _cytoscapeInitConfig = {\n  container: null,\n  boxSelectionEnabled: false,\n  autounselectify: true,\n  minZoom: 0.2,\n  maxZoom: 2,\n  layout: {\n    name: 'dagre'\n  },\n  style: [{\n    selector: 'node',\n    style: {\n      'content': 'data(name)',\n      'text-opacity': 0.5,\n      'text-valign': 'center',\n      'text-halign': 'right',\n      'background-color': '#11479e'\n    }\n  }, {\n    selector: 'edge',\n    style: {\n      'curve-style': 'bezier',\n      'width': 4,\n      'target-arrow-shape': 'triangle',\n      'line-color': '#9dbaea',\n      'target-arrow-color': '#9dbaea'\n    }\n  }, {\n    selector: '.eh-handle',\n    style: {\n      'background-color': 'red',\n      'width': 12,\n      'height': 12,\n      'shape': 'ellipse',\n      'overlay-opacity': 0,\n      'border-width': 12,\n      'border-opacity': 0\n    }\n  }, {\n    selector: '.eh-hover',\n    style: {\n      'background-color': 'red'\n    }\n  }, {\n    selector: '.eh-source',\n    style: {\n      'border-width': 2,\n      'border-color': 'green'\n    }\n  }, {\n    selector: '.eh-target',\n    style: {\n      'border-width': 2,\n      'border-color': 'blue'\n    }\n  }, {\n    selector: '.eh-preview, .eh-ghost-edge',\n    style: {\n      'background-color': 'red',\n      'line-color': 'red',\n      'target-arrow-color': 'red',\n      'source-arrow-color': 'red'\n    }\n  }],\n  elements: null\n};\nvar _edgehandlesConfig = {\n  toggleOffOnLeave: true,\n  handleNodes: 'node',\n  handleSize: 10,\n  edgeType: function edgeType(sourceNode, targetNode) {\n    var compatible = true;\n    if (compatible) {\n      return 'flat';\n    } else {\n      return null;\n    }\n  }\n};\nvar _contextMenusConfig = {\n  menuItems: [{\n    id: 'edit-node',\n    content: 'Edit Node',\n    tooltipText: 'Edit Node',\n    selector: 'node',\n    onClickFunction: function onClickFunction(event) {}\n  }, {\n    id: 'edit-edge',\n    content: 'Edit Edge',\n    tooltipText: 'Edit Edge',\n    selector: 'edge',\n    onClickFunction: function onClickFunction(event) {}\n  }, {\n    id: 'remove-node',\n    content: 'Remove Node',\n    tooltipText: 'Remove Node',\n    selector: 'node',\n    onClickFunction: function onClickFunction(event) {}\n  }, {\n    id: 'remove-edge',\n    content: 'Remove Edge',\n    tooltipText: 'Remove Edge',\n    selector: 'edge',\n    onClickFunction: function onClickFunction(event) {}\n  }, {\n    id: 'add-node',\n    content: 'Add Node',\n    tooltipText: 'Add Node',\n    coreAsWell: true,\n    onClickFunction: function onClickFunction(event) {}\n  }],\n  menuItemClasses: ['custom-menu-item'],\n  contextMenuClasses: ['custom-context-menu']\n};\nvar _libMeta = {\n  'table': 'Input data in Table format from csv or excel file',\n  'Convert': 'Convert the input file from one format to another',\n  'datasets': 'Use one of the many standard datasets available',\n  'xyz': 'Input data in the XYZ format',\n  'python script': 'Use Python Script to get the input to the system',\n  'molecular descriptors': 'Select the representation format of molecules for the chemical datasets',\n  'inorganic input': 'Inorganic input details',\n  'distance matrix': 'distance matrix details',\n  'inorganic descriptors': 'inorganic descriptors details',\n  'data manipulation': 'Use this split or concatenate the dataset',\n  'feature transformation': 'Run KernalPCA or PCA on the data',\n  'data cleaning': 'Select from the different data cleaning methods',\n  'scaling': 'Feature Scaling',\n  'feature representation': 'Select on how to represent the features - binarized, one-hot encoded or as polynomial features',\n  'split': 'Select a method on how to split the data',\n  'regression': 'Select from the different regression methods available',\n  'evaluate': 'Use to to evaluate',\n  'validate': 'Select from the different validation methods',\n  'grid': 'Use grid search',\n  'genetic algorithm': 'Use GA_DEAP',\n  'plot': 'Use this to plot the data as histogram or scatterplot',\n  'artist': 'Lorem ipsum',\n  'figure': 'Use this to save the generated plot',\n  'file': 'Use this to save the data into a file',\n  'NA': 'Skip creating a node'\n};\nvar _libUINames = {\n  'table': 'Table',\n  'Convert': 'Convert',\n  'datasets': 'Datasets',\n  'xyz': 'XYZ',\n  'python script': 'Python Script',\n  'molecular descriptors': 'Molecular Descriptors',\n  'inorganic input': 'Inorganic Input',\n  'distance matrix': 'Distance Matrix',\n  'inorganic descriptors': 'Inorganic Descriptors',\n  'data manipulation': 'Data Manipulation',\n  'feature transformation': 'Feature Transformation',\n  'data cleaning': 'Data Cleaning',\n  'scaling': 'Feature Scaling',\n  'feature representation': 'Feature Representation',\n  'split': 'Split',\n  'regression': 'Regression',\n  'evaluate': 'Evaluate',\n  'validate': 'Validate',\n  'grid': 'Grid',\n  'genetic algorithm': 'Genetic Algorithm',\n  'plot': 'Plot',\n  'artist': 'Artist',\n  'figure': 'Figure',\n  'file': 'File'\n};\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  getCytoscapeInitConfig: function getCytoscapeInitConfig(cb) {\n    var temp = _cytoscapeInitConfig;\n    setTimeout(function () {\n      return cb(temp);\n    }, 5);\n  },\n  getEdgehandlesConfig: function getEdgehandlesConfig(cb) {\n    setTimeout(function () {\n      return cb(_edgehandlesConfig);\n    }, 5);\n  },\n  getContextMenusConfig: function getContextMenusConfig(cb) {\n    setTimeout(function () {\n      return cb(_contextMenusConfig);\n    }, 5);\n  },\n  getLibHierarchy: function getLibHierarchy(cb) {\n    setTimeout(function () {\n      return cb(__WEBPACK_IMPORTED_MODULE_0__json__[\"a\" /* default */]['lh']);\n    }, 5);\n  },\n  getFuncMeta: function getFuncMeta(cb) {\n    setTimeout(function () {\n      return cb(__WEBPACK_IMPORTED_MODULE_0__json__[\"a\" /* default */]['fp']);\n    }, 5);\n  },\n  getLibMeta: function getLibMeta(cb) {\n    setTimeout(function () {\n      return cb(_libMeta);\n    }, 5);\n  },\n  getlibUINames: function getlibUINames(cb) {\n    setTimeout(function () {\n      return cb(_libUINames);\n    }, 5);\n  },\n  buyProducts: function buyProducts(products, cb, errorCb) {\n    setTimeout(function () {\n      Math.random() > 0.5 || navigator.userAgent.indexOf('PhantomJS') > -1 ? cb() : errorCb();\n    }, 100);\n  }\n});\n\n/***/ }),\n\n/***/ 1049:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__jsons_sklearnModelSelection__ = __webpack_require__(1050);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__jsons_sklearnDecomposition__ = __webpack_require__(1051);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__jsons_sklearnPreprocessing__ = __webpack_require__(1052);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__jsons_sklearnSvm__ = __webpack_require__(1053);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__jsons_sklearnLinearModel__ = __webpack_require__(1054);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__jsons_sklearnMetrics__ = __webpack_require__(1055);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__jsons_pandasAbbrv__ = __webpack_require__(1056);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__jsons_chemmlChemUi__ = __webpack_require__(1057);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__jsons_chemmlModelsUi__ = __webpack_require__(1058);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__jsons_chemmlDatasetsUi__ = __webpack_require__(1059);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__jsons_chemmlWrapperPreprocessing_ui_prepare__ = __webpack_require__(1060);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__jsons_chemmlWrapperPreprocessing_ui__ = __webpack_require__(1061);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__jsons_menu__ = __webpack_require__(1062);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar fp = {};\n\nfor (var i = 0; i < __WEBPACK_IMPORTED_MODULE_3__jsons_sklearnSvm__[\"a\" /* default */]['nodes'].length; i++) {\n  var node = __WEBPACK_IMPORTED_MODULE_3__jsons_sklearnSvm__[\"a\" /* default */]['nodes'][i];\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Model']['Support Vector Machines']['sklearn']['name'].push(node['name']);\n  fp[node['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  };\n\n  var nf = ['obj'];\n  for (var _i = 0; _i < node['inputs'].length; _i++) {\n    var inp = node['inputs'][_i];\n    fp[node['name']]['FParameters'].push({\n      'param_type': inp['param_type'],\n      'display_name': inp['name'],\n      'name': inp['name'],\n      'value': inp['default_value'],\n      'desc': inp['docstring'],\n      'is_optional': inp['is_optional']\n    });\n  }\n\n  for (var f = 0; f < node['node_functions'].length; f++) {\n    var lf = [];\n    var mf = [];\n    var func = node['node_functions'][f];\n    var n = func['name'].split('')[0];\n    if (n !== '_') {\n      fp[node['name']]['Methods'][func['name']] = {};\n      nf.push(func['name']);\n      for (var m = 0; m < func['inputs'].length; m++) {\n        var methinp = func['inputs'][m];\n        mf.push({\n          'name': methinp['name'],\n          'docstring': methinp['docstring'],\n          'param_type': methinp['param_type'],\n          'is_optional': methinp['is_optional']\n        });\n      }\n      for (var _m = 0; _m < func['outputs'].length; _m++) {\n        var methop = func['outputs'][_m];\n        lf.push({\n          'name': methop['name'],\n          'docstring': methop['docstring'],\n          'param_type': methop['param_type'],\n          'is_optional': methop['is_optional']\n        });\n      }\n      fp[node['name']]['Methods'][func['name']]['inputs'] = mf;\n      fp[node['name']]['Methods'][func['name']]['outputs'] = lf;\n    }\n  }\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Model']['Support Vector Machines']['sklearn']['functions'].push(nf);\n}\n\nfor (var _i2 = 0; _i2 < __WEBPACK_IMPORTED_MODULE_8__jsons_chemmlModelsUi__[\"a\" /* default */]['nodes'].length; _i2++) {\n  var _node = __WEBPACK_IMPORTED_MODULE_8__jsons_chemmlModelsUi__[\"a\" /* default */]['nodes'][_i2];\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Model']['Neural Network']['keras']['name'].push(_node['name']);\n  nf = ['obj'];\n  fp[_node['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  };\n  for (var _i3 = 0; _i3 < _node['inputs'].length; _i3++) {\n    var _inp = _node['inputs'][_i3];\n    fp[_node['name']]['FParameters'].push({\n      'param_type': _inp['param_type'],\n      'display_name': _inp['name'],\n      'name': _inp['name'],\n      'value': _inp['default_value'],\n      'desc': _inp['docstring'],\n      'is_optional': _inp['is_optional']\n    });\n  }\n  for (var _f = 0; _f < _node['node_functions'].length; _f++) {\n    var _func = _node['node_functions'][_f];\n    var _n = _func['name'].split('')[0];\n    lf = [];\n    mf = [];\n    if (_n !== '_') {\n      fp[_node['name']]['Methods'][_func['name']] = {};\n      nf.push(_func['name']);\n      for (var _m2 = 0; _m2 < _func['inputs'].length; _m2++) {\n        var _methinp = _func['inputs'][_m2];\n        mf.push({\n          'name': _methinp['name'],\n          'docstring': _methinp['docstring'],\n          'param_type': _methinp['param_type'],\n          'is_optional': _methinp['is_optional']\n        });\n      }\n      for (var _m3 = 0; _m3 < _func['outputs'].length; _m3++) {\n        var _methop = _func['outputs'][_m3];\n        lf.push({\n          'name': _methop['name'],\n          'docstring': _methop['docstring'],\n          'param_type': _methop['param_type'],\n          'is_optional': _methop['is_optional']\n        });\n      }\n      fp[_node['name']]['Methods'][_func['name']]['inputs'] = mf;\n      fp[_node['name']]['Methods'][_func['name']]['outputs'] = lf;\n    }\n  }\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Model']['Neural Network']['keras']['functions'].push(nf);\n}\n\nfor (var _i4 = 0; _i4 < __WEBPACK_IMPORTED_MODULE_6__jsons_pandasAbbrv__[\"a\" /* default */]['node_functions'].length; _i4++) {\n  var _node2 = __WEBPACK_IMPORTED_MODULE_6__jsons_pandasAbbrv__[\"a\" /* default */]['node_functions'][_i4];\n\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Input']['CSV']['pandas']['name'].push(_node2['name']);\n\n  fp[_node2['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  };\n  for (var _i5 = 0; _i5 < _node2['inputs'].length; _i5++) {\n    var _inp2 = _node2['inputs'][_i5];\n    fp[_node2['name']]['FParameters'].push({\n      'name': _inp2['name'],\n      'value': _inp2['default_value'],\n\n      'is_optional': _inp2['is_optional']\n    });\n  }\n\n  var op0 = _node2['outputs'][0];\n  var op1 = _node2['outputs'][1];\n  fp[_node2['name']]['Methods'][op0['name']] = {};\n  fp[_node2['name']]['Methods'][op0['name']]['outputs'] = [{\n    'name': op0['name']\n  }, { 'name': op1['name'] }];\n}\n\nfor (var _i6 = 0; _i6 < __WEBPACK_IMPORTED_MODULE_9__jsons_chemmlDatasetsUi__[\"a\" /* default */]['node_functions'].length; _i6++) {\n  var _node3 = __WEBPACK_IMPORTED_MODULE_9__jsons_chemmlDatasetsUi__[\"a\" /* default */]['node_functions'][_i6];\n\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Input']['Chemical']['chemml']['name'].push(_node3['name']);\n\n  fp[_node3['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  };\n  for (var _i7 = 0; _i7 < _node3['inputs'].length; _i7++) {\n    var _inp3 = _node3['inputs'][_i7];\n    fp[_node3['name']]['FParameters'].push({\n      'name': _inp3['name'],\n      'value': _inp3['default_value'],\n      'desc': _inp3['docstring'],\n      'is_optional': _inp3['is_optional']\n    });\n  }\n  for (var _i8 = 0; _i8 < _node3['outputs'].length; _i8++) {\n    var op = _node3['outputs'][_i8];\n    fp[_node3['name']]['Methods'][op['name']] = {};\n    fp[_node3['name']]['Methods'][op['name']]['outputs'] = [{\n      'desc': op['docstring'],\n      'name': op['name']\n    }];\n  }\n}\n\nfor (var _i9 = 0; _i9 < __WEBPACK_IMPORTED_MODULE_1__jsons_sklearnDecomposition__[\"a\" /* default */]['nodes'].length; _i9++) {\n  var _node4 = __WEBPACK_IMPORTED_MODULE_1__jsons_sklearnDecomposition__[\"a\" /* default */]['nodes'][_i9];\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Represent']['Dimensionality Reduction']['sklearn']['name'].push(_node4['name']);\n  nf = ['obj'];\n  fp[_node4['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  };\n  for (var _i10 = 0; _i10 < _node4['inputs'].length; _i10++) {\n    var _inp4 = _node4['inputs'][_i10];\n    fp[_node4['name']]['FParameters'].push({\n      'param_type': _inp4['param_type'],\n      'display_name': _inp4['name'],\n      'name': _inp4['name'],\n      'value': _inp4['default_value'],\n      'desc': _inp4['docstring'],\n      'is_optional': _inp4['is_optional']\n    });\n  }\n  for (var _f2 = 0; _f2 < _node4['node_functions'].length; _f2++) {\n    var _func2 = _node4['node_functions'][_f2];\n    var _n2 = _func2['name'].split('')[0];\n    lf = [];\n    mf = [];\n    if (_n2 !== '_') {\n      fp[_node4['name']]['Methods'][_func2['name']] = {};\n      nf.push(_func2['name']);\n      for (var _m4 = 0; _m4 < _func2['inputs'].length; _m4++) {\n        var _methinp2 = _func2['inputs'][_m4];\n        mf.push({\n          'name': _methinp2['name'],\n          'docstring': _methinp2['docstring'],\n          'param_type': _methinp2['param_type'],\n          'is_optional': _methinp2['is_optional']\n        });\n      }\n      for (var _m5 = 0; _m5 < _func2['outputs'].length; _m5++) {\n        var _methop2 = _func2['outputs'][_m5];\n        lf.push({\n          'name': _methop2['name'],\n          'docstring': _methop2['docstring'],\n          'param_type': _methop2['param_type'],\n          'is_optional': _methop2['is_optional']\n        });\n      }\n      fp[_node4['name']]['Methods'][_func2['name']]['inputs'] = mf;\n      fp[_node4['name']]['Methods'][_func2['name']]['outputs'] = lf;\n    }\n  }\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Represent']['Dimensionality Reduction']['sklearn']['functions'].push(nf);\n}\n\nfor (var _i11 = 0; _i11 < __WEBPACK_IMPORTED_MODULE_7__jsons_chemmlChemUi__[\"a\" /* default */]['nodes'].length; _i11++) {\n  var _node5 = __WEBPACK_IMPORTED_MODULE_7__jsons_chemmlChemUi__[\"a\" /* default */]['nodes'][_i11];\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Represent']['Chemical']['chemml']['name'].push(_node5['name']);\n  nf = ['obj'];\n  fp[_node5['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  };\n  for (var _i12 = 0; _i12 < _node5['inputs'].length; _i12++) {\n    var _inp5 = _node5['inputs'][_i12];\n    fp[_node5['name']]['FParameters'].push({\n      'param_type': _inp5['param_type'],\n      'display_name': _inp5['name'],\n      'name': _inp5['name'],\n      'value': _inp5['default_value'],\n      'desc': _inp5['docstring'],\n      'is_optional': _inp5['is_optional']\n    });\n  }\n  for (var _f3 = 0; _f3 < _node5['node_functions'].length; _f3++) {\n    var _func3 = _node5['node_functions'][_f3];\n    var _n3 = _func3['name'].split('')[0];\n    lf = [];\n    mf = [];\n    if (_n3 !== '_') {\n      fp[_node5['name']]['Methods'][_func3['name']] = {};\n      nf.push(_func3['name']);\n      for (var _m6 = 0; _m6 < _func3['inputs'].length; _m6++) {\n        var _methinp3 = _func3['inputs'][_m6];\n        mf.push({\n          'name': _methinp3['name'],\n          'docstring': _methinp3['docstring'],\n          'param_type': _methinp3['param_type'],\n          'is_optional': _methinp3['is_optional']\n        });\n      }\n      for (var _m7 = 0; _m7 < _func3['outputs'].length; _m7++) {\n        var _methop3 = _func3['outputs'][_m7];\n        lf.push({\n          'name': _methop3['name'],\n          'docstring': _methop3['docstring'],\n          'param_type': _methop3['param_type'],\n          'is_optional': _methop3['is_optional']\n        });\n      }\n      fp[_node5['name']]['Methods'][_func3['name']]['inputs'] = mf;\n      fp[_node5['name']]['Methods'][_func3['name']]['outputs'] = lf;\n    }\n  }\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Represent']['Chemical']['chemml']['functions'].push(nf);\n}\n\nfor (var _i13 = 0; _i13 < __WEBPACK_IMPORTED_MODULE_2__jsons_sklearnPreprocessing__[\"a\" /* default */]['nodes'].length; _i13++) {\n  var _node6 = __WEBPACK_IMPORTED_MODULE_2__jsons_sklearnPreprocessing__[\"a\" /* default */]['nodes'][_i13];\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Prepare']['Preprocessing']['sklearn']['name'].push(_node6['name']);\n  nf = ['obj'];\n  fp[_node6['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  };\n  for (var _i14 = 0; _i14 < _node6['inputs'].length; _i14++) {\n    var _inp6 = _node6['inputs'][_i14];\n    fp[_node6['name']]['FParameters'].push({\n      'name': _inp6['name'],\n      'value': _inp6['default_value'],\n\n      'is_optional': _inp6['is_optional']\n    });\n  }\n  for (var _f4 = 0; _f4 < _node6['node_functions'].length; _f4++) {\n    var _func4 = _node6['node_functions'][_f4];\n    var _n4 = _func4['name'].split('')[0];\n    lf = [];\n    mf = [];\n    if (_n4 !== '_') {\n      nf.push(_func4['name']);\n      fp[_node6['name']]['Methods'][_func4['name']] = {};\n      for (var _m8 = 0; _m8 < _func4['inputs'].length; _m8++) {\n        var _methinp4 = _func4['inputs'][_m8];\n        mf.push({\n          'name': _methinp4['name'],\n\n          'is_optional': _methinp4['is_optional']\n        });\n      }\n      for (var _m9 = 0; _m9 < _func4['outputs'].length; _m9++) {\n        var _methop4 = _func4['outputs'][_m9];\n        lf.push({\n          'name': _methop4['name'],\n\n          'is_optional': _methop4['is_optional']\n        });\n      }\n      fp[_node6['name']]['Methods'][_func4['name']]['inputs'] = mf;\n      fp[_node6['name']]['Methods'][_func4['name']]['outputs'] = lf;\n    }\n  }\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Prepare']['Preprocessing']['sklearn']['functions'].push(nf);\n}\n\nfor (var _i15 = 0; _i15 < __WEBPACK_IMPORTED_MODULE_10__jsons_chemmlWrapperPreprocessing_ui_prepare__[\"a\" /* default */]['nodes'].length; _i15++) {\n  var _node7 = __WEBPACK_IMPORTED_MODULE_10__jsons_chemmlWrapperPreprocessing_ui_prepare__[\"a\" /* default */]['nodes'][_i15];\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Prepare']['Data Splitting']['chemml']['name'].push(_node7['name']);\n  nf = ['obj'];\n  fp[_node7['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  };\n  for (var _i16 = 0; _i16 < _node7['inputs'].length; _i16++) {\n    var _inp7 = _node7['inputs'][_i16];\n    fp[_node7['name']]['FParameters'].push({\n      'name': _inp7['name'],\n      'value': _inp7['default_value'],\n\n      'is_optional': _inp7['is_optional']\n    });\n  }\n  for (var _f5 = 0; _f5 < _node7['node_functions'].length; _f5++) {\n    var _func5 = _node7['node_functions'][_f5];\n    var _n5 = _func5['name'].split('')[0];\n    lf = [];\n    mf = [];\n    if (_n5 !== '_') {\n      nf.push(_func5['name']);\n      fp[_node7['name']]['Methods'][_func5['name']] = {};\n      for (var _m10 = 0; _m10 < _func5['inputs'].length; _m10++) {\n        var _methinp5 = _func5['inputs'][_m10];\n        mf.push({\n          'name': _methinp5['name'],\n\n          'is_optional': _methinp5['is_optional']\n        });\n      }\n      for (var _m11 = 0; _m11 < _func5['outputs'].length; _m11++) {\n        var _methop5 = _func5['outputs'][_m11];\n        lf.push({\n          'name': _methop5['name'],\n\n          'is_optional': _methop5['is_optional']\n        });\n      }\n      fp[_node7['name']]['Methods'][_func5['name']]['inputs'] = mf;\n      fp[_node7['name']]['Methods'][_func5['name']]['outputs'] = lf;\n    }\n  }\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Prepare']['Data Splitting']['chemml']['functions'].push(nf);\n}\n\nfor (var _i17 = 0; _i17 < __WEBPACK_IMPORTED_MODULE_11__jsons_chemmlWrapperPreprocessing_ui__[\"a\" /* default */]['nodes'].length; _i17++) {\n  var _node8 = __WEBPACK_IMPORTED_MODULE_11__jsons_chemmlWrapperPreprocessing_ui__[\"a\" /* default */]['nodes'][_i17];\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Output']['Store Data']['chemml']['name'].push(_node8['name']);\n  nf = ['obj'];\n  fp[_node8['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  };\n  for (var _i18 = 0; _i18 < _node8['inputs'].length; _i18++) {\n    var _inp8 = _node8['inputs'][_i18];\n    fp[_node8['name']]['FParameters'].push({\n      'name': _inp8['name'],\n      'value': _inp8['default_value'],\n\n      'is_optional': _inp8['is_optional']\n    });\n  }\n  for (var _f6 = 0; _f6 < _node8['node_functions'].length; _f6++) {\n    var _func6 = _node8['node_functions'][_f6];\n    var _n6 = _func6['name'].split('')[0];\n    lf = [];\n    mf = [];\n    if (_n6 !== '_') {\n      nf.push(_func6['name']);\n      fp[_node8['name']]['Methods'][_func6['name']] = {};\n      for (var _m12 = 0; _m12 < _func6['inputs'].length; _m12++) {\n        var _methinp6 = _func6['inputs'][_m12];\n        mf.push({\n          'name': _methinp6['name'],\n\n          'is_optional': _methinp6['is_optional']\n        });\n      }\n      for (var _m13 = 0; _m13 < _func6['outputs'].length; _m13++) {\n        var _methop6 = _func6['outputs'][_m13];\n        lf.push({\n          'name': _methop6['name'],\n\n          'is_optional': _methop6['is_optional']\n        });\n      }\n      fp[_node8['name']]['Methods'][_func6['name']]['inputs'] = mf;\n      fp[_node8['name']]['Methods'][_func6['name']]['outputs'] = lf;\n    }\n  }\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Output']['Store Data']['chemml']['functions'].push(nf);\n}\n\nfor (var _i19 = 0; _i19 < __WEBPACK_IMPORTED_MODULE_4__jsons_sklearnLinearModel__[\"a\" /* default */]['nodes'].length; _i19++) {\n  var _node9 = __WEBPACK_IMPORTED_MODULE_4__jsons_sklearnLinearModel__[\"a\" /* default */]['nodes'][_i19];\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Model']['Linear']['sklearn']['name'].push(_node9['name']);\n  nf = ['obj'];\n  fp[_node9['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  };\n  for (var _i20 = 0; _i20 < _node9['inputs'].length; _i20++) {\n    var _inp9 = _node9['inputs'][_i20];\n    fp[_node9['name']]['FParameters'].push({\n      'param_type': _inp9['param_type'],\n      'display_name': _inp9['name'],\n      'name': _inp9['name'],\n      'value': _inp9['default_value'],\n      'desc': _inp9['docstring'],\n      'is_optional': _inp9['is_optional']\n    });\n  }\n  for (var _f7 = 0; _f7 < _node9['node_functions'].length; _f7++) {\n    var _func7 = _node9['node_functions'][_f7];\n    var _n7 = _func7['name'].split('')[0];\n    mf = [];\n    lf = [];\n    if (_n7 !== '_') {\n      fp[_node9['name']]['Methods'][_func7['name']] = {};\n      nf.push(_func7['name']);\n      for (var _m14 = 0; _m14 < _func7['inputs'].length; _m14++) {\n        var _methinp7 = _func7['inputs'][_m14];\n        mf.push({\n          'name': _methinp7['name'],\n          'docstring': _methinp7['docstring'],\n          'param_type': _methinp7['param_type'],\n          'is_optional': _methinp7['is_optional']\n        });\n      }\n      for (var _m15 = 0; _m15 < _func7['outputs'].length; _m15++) {\n        var _methop7 = _func7['outputs'][_m15];\n        lf.push({\n          'name': _methop7['name'],\n          'docstring': _methop7['docstring'],\n          'param_type': _methop7['param_type'],\n          'is_optional': _methop7['is_optional']\n        });\n      }\n      fp[_node9['name']]['Methods'][_func7['name']]['inputs'] = mf;\n      fp[_node9['name']]['Methods'][_func7['name']]['outputs'] = lf;\n    }\n  }\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Model']['Linear']['sklearn']['functions'].push(nf);\n}\n\nfor (var _i21 = 0; _i21 < __WEBPACK_IMPORTED_MODULE_5__jsons_sklearnMetrics__[\"a\" /* default */]['nodes'].length; _i21++) {\n  var _node10 = __WEBPACK_IMPORTED_MODULE_5__jsons_sklearnMetrics__[\"a\" /* default */]['nodes'][_i21];\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Optimize']['Metrics']['sklearn']['name'].push(_node10['name']);\n  nf = ['obj'];\n  fp[_node10['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  };\n  for (var _i22 = 0; _i22 < _node10['inputs'].length; _i22++) {\n    var _inp10 = _node10['inputs'][_i22];\n    fp[_node10['name']]['FParameters'].push({\n      'param_type': _inp10['param_type'],\n      'display_name': _inp10['name'],\n      'name': _inp10['name'],\n      'value': _inp10['default_value'],\n      'desc': _inp10['docstring'],\n      'is_optional': _inp10['is_optional']\n    });\n  }\n  for (var _f8 = 0; _f8 < _node10['node_functions'].length; _f8++) {\n    var _func8 = _node10['node_functions'][_f8];\n    var _n8 = _func8['name'].split('')[0];\n    mf = [];\n    lf = [];\n    if (_n8 !== '_') {\n      fp[_node10['name']]['Methods'][_func8['name']] = {};\n      nf.push(_func8['name']);\n      for (var _m16 = 0; _m16 < _func8['inputs'].length; _m16++) {\n        var _methinp8 = _func8['inputs'][_m16];\n        mf.push({\n          'name': _methinp8['name'],\n          'docstring': _methinp8['docstring'],\n          'param_type': _methinp8['param_type'],\n          'is_optional': _methinp8['is_optional']\n        });\n      }\n      for (var _m17 = 0; _m17 < _func8['outputs'].length; _m17++) {\n        var _methop8 = _func8['outputs'][_m17];\n        lf.push({\n          'name': _methop8['name'],\n          'docstring': _methop8['docstring'],\n          'param_type': _methop8['param_type'],\n          'is_optional': _methop8['is_optional']\n        });\n      }\n      fp[_node10['name']]['Methods'][_func8['name']]['inputs'] = mf;\n      fp[_node10['name']]['Methods'][_func8['name']]['outputs'] = lf;\n    }\n  }\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Optimize']['Metrics']['sklearn']['functions'].push(nf);\n}\n\nfor (var _i23 = 0; _i23 < __WEBPACK_IMPORTED_MODULE_0__jsons_sklearnModelSelection__[\"a\" /* default */]['nodes'].length; _i23++) {\n  var _node11 = __WEBPACK_IMPORTED_MODULE_0__jsons_sklearnModelSelection__[\"a\" /* default */]['nodes'][_i23];\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Optimize']['Selection']['sklearn']['name'].push(_node11['name']);\n  nf = ['obj'];\n  fp[_node11['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  };\n  for (var _i24 = 0; _i24 < _node11['inputs'].length; _i24++) {\n    var _inp11 = _node11['inputs'][_i24];\n    fp[_node11['name']]['FParameters'].push({\n      'param_type': _inp11['param_type'],\n      'display_name': _inp11['name'],\n      'name': _inp11['name'],\n      'value': _inp11['default_value'],\n      'desc': _inp11['docstring'],\n      'is_optional': _inp11['is_optional']\n    });\n  }\n  for (var _f9 = 0; _f9 < _node11['node_functions'].length; _f9++) {\n    var _func9 = _node11['node_functions'][_f9];\n    var _n9 = _func9['name'].split('')[0];\n    lf = [];\n    mf = [];\n    if (_n9 !== '_') {\n      fp[_node11['name']]['Methods'][_func9['name']] = {};\n      nf.push(_func9['name']);\n      for (var _m18 = 0; _m18 < _func9['inputs'].length; _m18++) {\n        var _methinp9 = _func9['inputs'][_m18];\n        mf.push({\n          'name': _methinp9['name'],\n          'docstring': _methinp9['docstring'],\n          'param_type': _methinp9['param_type'],\n          'is_optional': _methinp9['is_optional']\n        });\n      }\n      for (var _m19 = 0; _m19 < _func9['outputs'].length; _m19++) {\n        var _methop9 = _func9['outputs'][_m19];\n        lf.push({\n          'name': _methop9['name'],\n          'docstring': _methop9['docstring'],\n          'param_type': _methop9['param_type'],\n          'is_optional': _methop9['is_optional']\n        });\n      }\n      fp[_node11['name']]['Methods'][_func9['name']]['inputs'] = mf;\n      fp[_node11['name']]['Methods'][_func9['name']]['outputs'] = lf;\n    }\n  }\n  __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]['Optimize']['Selection']['sklearn']['functions'].push(nf);\n}\nconsole.log('idhar', fp, __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */]);\n/* harmony default export */ __webpack_exports__[\"a\"] = ({ lh: __WEBPACK_IMPORTED_MODULE_12__jsons_menu__[\"a\" /* default */], fp: fp });\n\n/***/ }),\n\n/***/ 1050:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'sklearn.model_selection',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [{\n    name: 'train_test_split',\n    docstring: 'Split arrays or matrices into random train and test subsets\\n\\n    Quick utility that wraps input validation and\\n    ``next(ShuffleSplit().split(X, y))`` and application to input data\\n    into a single call for splitting (and optionally subsampling) data in a\\n    oneliner.',\n    inputs: [{\n      name: '*arrays',\n      docstring: 'Allowed inputs are lists, numpy arrays, scipy-sparse matrices or pandas dataframes.',\n      param_type: ['list'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null\n    }, {\n      name: 'test_size',\n      docstring: 'If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If None, the value is set to the complement of the train size. If ``train_size`` is also None, it will be set to 0.25.',\n      param_type: ['int', 'float', null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'None'\n    }, {\n      name: 'train_size',\n      docstring: 'If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split. If int, represents the absolute number of train samples. If None, the value is automatically set to the complement of the test size.',\n      param_type: ['int', 'float', null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'None'\n    }, {\n      name: 'shuffle',\n      docstring: 'Whether or not to shuffle the data before splitting. If shuffle=False then stratify must be None.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True'\n    }, {\n      name: 'stratify',\n      docstring: 'If not None, data is split in a stratified fashion, using this as the class labels.',\n      param_type: ['array', null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'None'\n    }],\n    outputs: [{\n      name: 'splitting',\n      docstring: 'List containing train-test split of inputs.',\n      param_type: ['array', 'list'],\n      returned: true\n    }]\n  }],\n  nodes: [{\n    name: 'train_test_split',\n    docstring: 'Split arrays or matrices into random train and test subsets\\n\\n    Quick utility that wraps input validation and\\n    ``next(ShuffleSplit().split(X, y))`` and application to input data\\n    into a single call for splitting (and optionally subsampling) data in a\\n    oneliner.',\n    node_functions: [{\n      name: 'split2',\n      docstring: 'None',\n      inputs: [{\n        name: '*arrays',\n        docstring: 'Allowed inputs are lists, numpy arrays, scipy-sparse matrices or pandas dataframes.',\n        param_type: ['list'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }, {\n        name: 'test_size',\n        docstring: 'If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If None, the value is set to the complement of the train size. If ``train_size`` is also None, it will be set to 0.25.',\n        param_type: ['int', 'float', null],\n        expected_shape: null,\n        is_optional: true,\n        default_value: 'None'\n      }, {\n        name: 'train_size',\n        docstring: 'If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split. If int, represents the absolute number of train samples. If None, the value is automatically set to the complement of the test size.',\n        param_type: ['int', 'float', null],\n        expected_shape: null,\n        is_optional: true,\n        default_value: 'None'\n      }, {\n        name: 'shuffle',\n        docstring: 'Whether or not to shuffle the data before splitting. If shuffle=False then stratify must be None.',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: 'True'\n      }, {\n        name: 'stratify',\n        docstring: 'If not None, data is split in a stratified fashion, using this as the class labels.',\n        param_type: ['array', null],\n        expected_shape: null,\n        is_optional: true,\n        default_value: 'None'\n      }],\n      outputs: [{\n        name: 'splitting',\n        docstring: 'List containing train-test split of inputs.',\n        param_type: ['array', 'list'],\n        returned: true\n      }]\n    }],\n    inputs: [{\n      name: '*arrays',\n      docstring: 'Allowed inputs are lists, numpy arrays, scipy-sparse matrices or pandas dataframes.',\n      param_type: ['list'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null\n    }, {\n      name: 'test_size',\n      docstring: 'If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If None, the value is set to the complement of the train size. If ``train_size`` is also None, it will be set to 0.25.',\n      param_type: ['int', 'float', null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'None'\n    }, {\n      name: 'train_size',\n      docstring: 'If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split. If int, represents the absolute number of train samples. If None, the value is automatically set to the complement of the test size.',\n      param_type: ['int', 'float', null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'None'\n    }, {\n      name: 'shuffle',\n      docstring: 'Whether or not to shuffle the data before splitting. If shuffle=False then stratify must be None.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True'\n    }, {\n      name: 'stratify',\n      docstring: 'If not None, data is split in a stratified fashion, using this as the class labels.',\n      param_type: ['array', null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'None'\n    }],\n    outputs: [{\n      name: 'splitting',\n      docstring: 'List containing train-test split of inputs.',\n      param_type: ['array', 'list'],\n      returned: true\n    }]\n  }, {\n    name: 'GridSearchCV',\n    docstring: 'Exhaustive search over specified parameter values for an estimator.\\n\\n    Important members are fit, predict.\\n\\n    GridSearchCV implements a \"fit\" and a \"score\" method.\\n    It also implements \"predict\", \"predict_proba\", \"decision_function\",\\n    \"transform\" and \"inverse_transform\" if they are implemented in the\\n    estimator used.\\n\\n    The parameters of the estimator used to apply these methods are optimized\\n    by cross-validated grid-search over a parameter grid.',\n    inputs: [{\n      name: 'estimator',\n      docstring: 'This is assumed to implement the scikit-learn estimator interface. Either estimator needs to provide a ``score`` function, or ``scoring`` must be passed.',\n      param_type: ['object'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null\n    }, {\n      name: 'param_grid',\n      docstring: 'Dictionary with parameters names (string) as keys and lists of parameter settings to try as values, or a list of such dictionaries, in which case the grids spanned by each dictionary in the list are explored. This enables searching over any sequence of parameter settings.',\n      param_type: ['dict', 'list'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null\n    }, {\n      name: 'scoring',\n      docstring: \"A single string (see :ref:`scoring_parameter`) or a callable (see :ref:`scoring`) to evaluate the predictions on the test set.  For evaluating multiple metrics, either give a list of (unique) strings or a dict with names as keys and callables as values.  NOTE that when using custom scorers, each scorer should return a single value. Metric functions returning a list/array of values can be wrapped into multiple scorers that return one value each.  See :ref:`multimetric_grid_search` for an example.  If None, the estimator's score method is used.\",\n      param_type: ['str', 'dict', 'list', 'tuple', 'callable', null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'None'\n    }, {\n      name: 'n_jobs',\n      docstring: 'Number of jobs to run in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.',\n      param_type: ['int', null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'None'\n    }, {\n      name: 'pre_dispatch',\n      docstring: \"Controls the number of jobs that get dispatched during parallel execution. Reducing this number can be useful to avoid an explosion of memory consumption when more jobs get dispatched than CPUs can process. This parameter can be:      - None, in which case all the jobs are immediately       created and spawned. Use this for lightweight and       fast-running jobs, to avoid delays due to on-demand       spawning of the jobs      - An int, giving the exact number of total jobs that are       spawned      - A string, giving an expression as a function of n_jobs,       as in '2*n_jobs'\",\n      param_type: ['int', 'str'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null\n    }, {\n      name: 'iid',\n      docstring: 'If True, return the average score across folds, weighted by the number of samples in each test set. In this case, the data is assumed to be identically distributed across the folds, and the loss minimized is the total loss per sample, and not the mean loss across the folds. If False, return the average score across folds. Default is True, but will change to False in version 0.22, to correspond to the standard definition of cross-validation.  .. versionchanged:: 0.20     Parameter ``iid`` will change from True to False by default in     version 0.22, and will be removed in 0.24.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'warn'\n    }, {\n      name: 'cv',\n      docstring: 'Determines the cross-validation splitting strategy. Possible inputs for cv are:  - None, to use the default 3-fold cross validation, - integer, to specify the number of folds in a `(Stratified)KFold`, - :term:`CV splitter`, - An iterable yielding (train, test) splits as arrays of indices.  For integer/None inputs, if the estimator is a classifier and ``y`` is either binary or multiclass, :class:`StratifiedKFold` is used. In all other cases, :class:`KFold` is used.  Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here.  .. versionchanged:: 0.20     ``cv`` default value if None will change from 3-fold to 5-fold     in v0.22.',\n      param_type: ['int', 'iter'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null\n    }, {\n      name: 'refit',\n      docstring: 'Refit an estimator using the best found parameters on the whole dataset.  For multiple metric evaluation, this needs to be a string denoting the scorer that would be used to find the best parameters for refitting the estimator at the end.  Where there are considerations other than maximum score in choosing a best estimator, ``refit`` can be set to a function which returns the selected ``best_index_`` given ``cv_results_``.  The refitted estimator is made available at the ``best_estimator_`` attribute and permits using ``predict`` directly on this ``GridSearchCV`` instance.  Also for multiple metric evaluation, the attributes ``best_index_``, ``best_score_`` and ``best_params_`` will only be available if ``refit`` is set and all of them will be determined w.r.t this specific scorer. ``best_score_`` is not returned if refit is callable.  See ``scoring`` parameter to know more about multiple metric evaluation.  .. versionchanged:: 0.20     Support for callable added.',\n      param_type: ['bool', 'str', 'callable'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True'\n    }, {\n      name: 'verbose',\n      docstring: 'Controls the verbosity: the higher, the more messages.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null\n    }, {\n      name: 'error_score',\n      docstring: \"Value to assign to the score if an error occurs in estimator fitting. If set to 'raise', the error is raised. If a numeric value is given, FitFailedWarning is raised. This parameter does not affect the refit step, which will always raise the error. Default is 'raise' but from version 0.22 it will change to np.nan.\",\n      param_type: [null],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null\n    }, {\n      name: 'return_train_score',\n      docstring: 'If ``False``, the ``cv_results_`` attribute will not include training scores. Computing training scores is used to get insights on how different parameter settings impact the overfitting/underfitting trade-off. However computing the scores on the training set can be computationally expensive and is not strictly required to select the parameters that yield the best generalization performance.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'False'\n    }],\n    outputs: [{\n      name: 'cv_results_',\n      docstring: \"A dict with keys as column headers and values as columns, that can be imported into a pandas ``DataFrame``.  For instance the below given table  +------------+-----------+------------+-----------------+---+---------+ |param_kernel|param_gamma|param_degree|split0_test_score|...|rank_t...| +============+===========+============+=================+===+=========+ |  'poly'    |     --    |      2     |       0.80      |...|    2    | +------------+-----------+------------+-----------------+---+---------+ |  'poly'    |     --    |      3     |       0.70      |...|    4    | +------------+-----------+------------+-----------------+---+---------+ |  'rbf'     |     0.1   |     --     |       0.80      |...|    3    | +------------+-----------+------------+-----------------+---+---------+ |  'rbf'     |     0.2   |     --     |       0.93      |...|    1    | +------------+-----------+------------+-----------------+---+---------+  will be represented by a ``cv_results_`` dict of::      {     'param_kernel': masked_array(data = ['poly', 'poly', 'rbf', 'rbf'],                                  mask = [False False False False]...)     'param_gamma': masked_array(data = [-- -- 0.1 0.2],                                 mask = [ True  True False False]...),     'param_degree': masked_array(data = [2.0 3.0 -- --],                                  mask = [False False  True  True]...),     'split0_test_score'  : [0.80, 0.70, 0.80, 0.93],     'split1_test_score'  : [0.82, 0.50, 0.70, 0.78],     'mean_test_score'    : [0.81, 0.60, 0.75, 0.85],     'std_test_score'     : [0.01, 0.10, 0.05, 0.08],     'rank_test_score'    : [2, 4, 3, 1],     'split0_train_score' : [0.80, 0.92, 0.70, 0.93],     'split1_train_score' : [0.82, 0.55, 0.70, 0.87],     'mean_train_score'   : [0.81, 0.74, 0.70, 0.90],     'std_train_score'    : [0.01, 0.19, 0.00, 0.03],     'mean_fit_time'      : [0.73, 0.63, 0.43, 0.49],     'std_fit_time'       : [0.01, 0.02, 0.01, 0.01],     'mean_score_time'    : [0.01, 0.06, 0.04, 0.04],     'std_score_time'     : [0.00, 0.00, 0.00, 0.01],     'params'             : [{'kernel': 'poly', 'degree': 2}, ...],     }  NOTE  The key ``'params'`` is used to store a list of parameter settings dicts for all the parameter candidates.  The ``mean_fit_time``, ``std_fit_time``, ``mean_score_time`` and ``std_score_time`` are all in seconds.  For multi-metric evaluation, the scores for all the scorers are available in the ``cv_results_`` dict at the keys ending with that scorer's name (``'_<scorer_name>'``) instead of ``'_score'`` shown above. ('split0_test_precision', 'mean_train_precision' etc.)\",\n      param_type: ['array', 'dict'],\n      returned: false\n    }, {\n      name: 'best_estimator_',\n      docstring: 'Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if ``refit=False``.  See ``refit`` parameter for more information on allowed values.',\n      param_type: ['dict'],\n      returned: false\n    }, {\n      name: 'best_score_',\n      docstring: 'Mean cross-validated score of the best_estimator  For multi-metric evaluation, this is present only if ``refit`` is specified.',\n      param_type: ['float'],\n      returned: false\n    }, {\n      name: 'best_params_',\n      docstring: 'Parameter setting that gave the best results on the hold out data.  For multi-metric evaluation, this is present only if ``refit`` is specified.',\n      param_type: ['dict'],\n      returned: false\n    }, {\n      name: 'best_index_',\n      docstring: \"The index (of the ``cv_results_`` arrays) which corresponds to the best candidate parameter setting.  The dict at ``search.cv_results_['params'][search.best_index_]`` gives the parameter setting for the best model, that gives the highest mean score (``search.best_score_``).  For multi-metric evaluation, this is present only if ``refit`` is specified.\",\n      param_type: ['int'],\n      returned: false\n    }, {\n      name: 'scorer_',\n      docstring: 'Scorer function used on the held out data to choose the best parameters for the model.  For multi-metric evaluation, this attribute holds the validated ``scoring`` dict which maps the scorer key to the scorer callable.',\n      param_type: ['dict'],\n      returned: false\n    }, {\n      name: 'n_splits_',\n      docstring: 'The number of cross-validation splits (folds/iterations).',\n      param_type: ['int'],\n      returned: false\n    }, {\n      name: 'refit_time_',\n      docstring: 'Seconds used for refitting the best model on the whole dataset.  This is present only if ``refit`` is not False.',\n      param_type: ['float'],\n      returned: false\n    }],\n    node_functions: [{\n      name: '__init__',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_check_is_fitted',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_format_results',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_param_names',\n      docstring: 'Get parameter names for the estimator',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_tags',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_run_search',\n      docstring: 'Search all candidates in param_grid',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'decision_function',\n      docstring: 'Call decision_function on the estimator with the best found parameters.\\n\\n        Only available if ``refit=True`` and the underlying estimator supports\\n        ``decision_function``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: 'Must fulfill the input assumptions of the underlying estimator.',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }],\n      outputs: []\n    }, {\n      name: 'fit',\n      docstring: 'Run fit with all sets of parameters.\\n\\n        Parameters\\n        ----------\\n\\n        X : array-like, shape = [n_samples, n_features]\\n            Training vector, where n_samples is the number of samples and\\n            n_features is the number of features.\\n\\n        y : array-like, shape = [n_samples] or [n_samples, n_output], optional\\n            Target relative to X for classification or regression;\\n            None for unsupervised learning.\\n\\n        groups : array-like, with shape (n_samples,), optional\\n            Group labels for the samples used while splitting the dataset into\\n            train/test set. Only used in conjunction with a \"Group\" `cv`\\n            instance (e.g., `GroupKFold`).\\n\\n        **fit_params : dict of string -> object\\n            Parameters passed to the ``fit`` method of the estimator\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: 'Training vector, where n_samples is the number of samples and n_features is the number of features.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null\n      }, {\n        name: 'y',\n        docstring: 'Target relative to X for classification or regression; None for unsupervised learning.',\n        param_type: ['array'],\n        expected_shape: '[n_samples] or [n_samples, n_output], optional',\n        is_optional: true,\n        default_value: null\n      }, {\n        name: 'groups',\n        docstring: 'Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a \"Group\" `cv` instance (e.g., `GroupKFold`).',\n        param_type: ['array'],\n        expected_shape: '(n_samples,), optional',\n        is_optional: true,\n        default_value: null\n      }, {\n        name: '**fit_params',\n        docstring: 'Parameters passed to the ``fit`` method of the estimator',\n        param_type: ['object', 'str', 'dict'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }],\n      outputs: []\n    }, {\n      name: 'get_params',\n      docstring: 'Get parameters for this estimator.\\n\\n        Parameters\\n        ----------\\n        deep : boolean, optional\\n            If True, will return the parameters for this estimator and\\n            contained subobjects that are estimators.\\n\\n        Returns\\n        -------\\n        params : mapping of string to any\\n            Parameter names mapped to their values.\\n        ',\n      inputs: [{\n        name: 'deep',\n        docstring: 'If True, will return the parameters for this estimator and contained subobjects that are estimators.',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: null\n      }],\n      outputs: [{\n        name: 'params',\n        docstring: 'Parameter names mapped to their values.',\n        param_type: ['str'],\n        returned: true\n      }]\n    }, {\n      name: 'inverse_transform',\n      docstring: 'Call inverse_transform on the estimator with the best found params.\\n\\n        Only available if the underlying estimator implements\\n        ``inverse_transform`` and ``refit=True``.\\n\\n        Parameters\\n        ----------\\n        Xt : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n      inputs: [{\n        name: 'Xt',\n        docstring: 'Must fulfill the input assumptions of the underlying estimator.',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }],\n      outputs: []\n    }, {\n      name: 'predict',\n      docstring: 'Call predict on the estimator with the best found parameters.\\n\\n        Only available if ``refit=True`` and the underlying estimator supports\\n        ``predict``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: 'Must fulfill the input assumptions of the underlying estimator.',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }],\n      outputs: []\n    }, {\n      name: 'predict_log_proba',\n      docstring: 'Call predict_log_proba on the estimator with the best found parameters.\\n\\n        Only available if ``refit=True`` and the underlying estimator supports\\n        ``predict_log_proba``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: 'Must fulfill the input assumptions of the underlying estimator.',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }],\n      outputs: []\n    }, {\n      name: 'predict_proba',\n      docstring: 'Call predict_proba on the estimator with the best found parameters.\\n\\n        Only available if ``refit=True`` and the underlying estimator supports\\n        ``predict_proba``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: 'Must fulfill the input assumptions of the underlying estimator.',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }],\n      outputs: []\n    }, {\n      name: 'score',\n      docstring: 'Returns the score on the given data, if the estimator has been refit.\\n\\n        This uses the score defined by ``scoring`` where provided, and the\\n        ``best_estimator_.score`` method otherwise.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape = [n_samples, n_features]\\n            Input data, where n_samples is the number of samples and\\n            n_features is the number of features.\\n\\n        y : array-like, shape = [n_samples] or [n_samples, n_output], optional\\n            Target relative to X for classification or regression;\\n            None for unsupervised learning.\\n\\n        Returns\\n        -------\\n        score : float\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: 'Input data, where n_samples is the number of samples and n_features is the number of features.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null\n      }, {\n        name: 'y',\n        docstring: 'Target relative to X for classification or regression; None for unsupervised learning.',\n        param_type: ['array'],\n        expected_shape: '[n_samples] or [n_samples, n_output], optional',\n        is_optional: true,\n        default_value: null\n      }],\n      outputs: [{\n        name: 'score',\n        docstring: '',\n        param_type: ['float'],\n        returned: true\n      }]\n    }, {\n      name: 'set_params',\n      docstring: \"Set the parameters of this estimator.\\n\\n        The method works on simple estimators as well as on nested objects\\n        (such as pipelines). The latter have parameters of the form\\n        ``<component>__<parameter>`` so that it's possible to update each\\n        component of a nested object.\\n\\n        Returns\\n        -------\\n        self\\n        \",\n      inputs: [],\n      outputs: [{\n        name: '',\n        docstring: '',\n        param_type: [null],\n        returned: true\n      }]\n    }, {\n      name: 'transform',\n      docstring: 'Call transform on the estimator with the best found parameters.\\n\\n        Only available if the underlying estimator supports ``transform`` and\\n        ``refit=True``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: 'Must fulfill the input assumptions of the underlying estimator.',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }],\n      outputs: []\n    }],\n    nodes: []\n  }, {\n    name: 'RandomizedSearchCV',\n    docstring: \"Randomized search on hyper parameters.\\n\\n    RandomizedSearchCV implements a \\\"fit\\\" and a \\\"score\\\" method.\\n    It also implements \\\"predict\\\", \\\"predict_proba\\\", \\\"decision_function\\\",\\n    \\\"transform\\\" and \\\"inverse_transform\\\" if they are implemented in the\\n    estimator used.\\n\\n    The parameters of the estimator used to apply these methods are optimized\\n    by cross-validated search over parameter settings.\\n\\n    In contrast to GridSearchCV, not all parameter values are tried out, but\\n    rather a fixed number of parameter settings is sampled from the specified\\n    distributions. The number of parameter settings that are tried is\\n    given by n_iter.\\n\\n    If all parameters are presented as a list,\\n    sampling without replacement is performed. If at least one parameter\\n    is given as a distribution, sampling with replacement is used.\\n    It is highly recommended to use continuous distributions for continuous\\n    parameters.\\n\\n    Note that before SciPy 0.16, the ``scipy.stats.distributions`` do not\\n    accept a custom RNG instance and always use the singleton RNG from\\n    ``numpy.random``. Hence setting ``random_state`` will not guarantee a\\n    deterministic iteration whenever ``scipy.stats`` distributions are used to\\n    define the parameter search space.\\n\\n    Read more in the :ref:`User Guide <randomized_parameter_search>`.\\n\\n    Parameters\\n    ----------\\n    estimator : estimator object.\\n        A object of that type is instantiated for each grid point.\\n        This is assumed to implement the scikit-learn estimator interface.\\n        Either estimator needs to provide a ``score`` function,\\n        or ``scoring`` must be passed.\\n\\n    param_distributions : dict\\n        Dictionary with parameters names (string) as keys and distributions\\n        or lists of parameters to try. Distributions must provide a ``rvs``\\n        method for sampling (such as those from scipy.stats.distributions).\\n        If a list is given, it is sampled uniformly.\\n\\n    n_iter : int, default=10\\n        Number of parameter settings that are sampled. n_iter trades\\n        off runtime vs quality of the solution.\\n\\n    scoring : string, callable, list/tuple, dict or None, default: None\\n        A single string (see :ref:`scoring_parameter`) or a callable\\n        (see :ref:`scoring`) to evaluate the predictions on the test set.\\n\\n        For evaluating multiple metrics, either give a list of (unique) strings\\n        or a dict with names as keys and callables as values.\\n\\n        NOTE that when using custom scorers, each scorer should return a single\\n        value. Metric functions returning a list/array of values can be wrapped\\n        into multiple scorers that return one value each.\\n\\n        See :ref:`multimetric_grid_search` for an example.\\n\\n        If None, the estimator's score method is used.\\n\\n    n_jobs : int or None, optional (default=None)\\n        Number of jobs to run in parallel.\\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\\n        for more details.\\n\\n    pre_dispatch : int, or string, optional\\n        Controls the number of jobs that get dispatched during parallel\\n        execution. Reducing this number can be useful to avoid an\\n        explosion of memory consumption when more jobs get dispatched\\n        than CPUs can process. This parameter can be:\\n\\n            - None, in which case all the jobs are immediately\\n              created and spawned. Use this for lightweight and\\n              fast-running jobs, to avoid delays due to on-demand\\n              spawning of the jobs\\n\\n            - An int, giving the exact number of total jobs that are\\n              spawned\\n\\n            - A string, giving an expression as a function of n_jobs,\\n              as in '2*n_jobs'\\n\\n    iid : boolean, default='warn'\\n        If True, return the average score across folds, weighted by the number\\n        of samples in each test set. In this case, the data is assumed to be\\n        identically distributed across the folds, and the loss minimized is\\n        the total loss per sample, and not the mean loss across the folds. If\\n        False, return the average score across folds. Default is True, but\\n        will change to False in version 0.22, to correspond to the standard\\n        definition of cross-validation.\\n\\n        .. versionchanged:: 0.20\\n            Parameter ``iid`` will change from True to False by default in\\n            version 0.22, and will be removed in 0.24.\\n\\n    cv : int, cross-validation generator or an iterable, optional\\n        Determines the cross-validation splitting strategy.\\n        Possible inputs for cv are:\\n\\n        - None, to use the default 3-fold cross validation,\\n        - integer, to specify the number of folds in a `(Stratified)KFold`,\\n        - :term:`CV splitter`,\\n        - An iterable yielding (train, test) splits as arrays of indices.\\n\\n        For integer/None inputs, if the estimator is a classifier and ``y`` is\\n        either binary or multiclass, :class:`StratifiedKFold` is used. In all\\n        other cases, :class:`KFold` is used.\\n\\n        Refer :ref:`User Guide <cross_validation>` for the various\\n        cross-validation strategies that can be used here.\\n\\n        .. versionchanged:: 0.20\\n            ``cv`` default value if None will change from 3-fold to 5-fold\\n            in v0.22.\\n\\n    refit : boolean, string, or callable, default=True\\n        Refit an estimator using the best found parameters on the whole\\n        dataset.\\n\\n        For multiple metric evaluation, this needs to be a string denoting the\\n        scorer that would be used to find the best parameters for refitting\\n        the estimator at the end.\\n\\n        Where there are considerations other than maximum score in\\n        choosing a best estimator, ``refit`` can be set to a function which\\n        returns the selected ``best_index_`` given the ``cv_results``.\\n\\n        The refitted estimator is made available at the ``best_estimator_``\\n        attribute and permits using ``predict`` directly on this\\n        ``RandomizedSearchCV`` instance.\\n\\n        Also for multiple metric evaluation, the attributes ``best_index_``,\\n        ``best_score_`` and ``best_params_`` will only be available if\\n        ``refit`` is set and all of them will be determined w.r.t this specific\\n        scorer. When refit is callable, ``best_score_`` is disabled.\\n\\n        See ``scoring`` parameter to know more about multiple metric\\n        evaluation.\\n\\n        .. versionchanged:: 0.20\\n            Support for callable added.\\n\\n    verbose : integer\\n        Controls the verbosity: the higher, the more messages.\\n\\n    random_state : int, RandomState instance or None, optional, default=None\\n        Pseudo random number generator state used for random uniform sampling\\n        from lists of possible values instead of scipy.stats distributions.\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`.\\n\\n    error_score : 'raise' or numeric\\n        Value to assign to the score if an error occurs in estimator fitting.\\n        If set to 'raise', the error is raised. If a numeric value is given,\\n        FitFailedWarning is raised. This parameter does not affect the refit\\n        step, which will always raise the error. Default is 'raise' but from\\n        version 0.22 it will change to np.nan.\\n\\n    return_train_score : boolean, default=False\\n        If ``False``, the ``cv_results_`` attribute will not include training\\n        scores.\\n        Computing training scores is used to get insights on how different\\n        parameter settings impact the overfitting/underfitting trade-off.\\n        However computing the scores on the training set can be computationally\\n        expensive and is not strictly required to select the parameters that\\n        yield the best generalization performance.\\n\\n    Attributes\\n    ----------\\n    cv_results_ : dict of numpy (masked) ndarrays\\n        A dict with keys as column headers and values as columns, that can be\\n        imported into a pandas ``DataFrame``.\\n\\n        For instance the below given table\\n\\n        +--------------+-------------+-------------------+---+---------------+\\n        | param_kernel | param_gamma | split0_test_score |...|rank_test_score|\\n        +==============+=============+===================+===+===============+\\n        |    'rbf'     |     0.1     |       0.80        |...|       2       |\\n        +--------------+-------------+-------------------+---+---------------+\\n        |    'rbf'     |     0.2     |       0.90        |...|       1       |\\n        +--------------+-------------+-------------------+---+---------------+\\n        |    'rbf'     |     0.3     |       0.70        |...|       1       |\\n        +--------------+-------------+-------------------+---+---------------+\\n\\n        will be represented by a ``cv_results_`` dict of::\\n\\n            {\\n            'param_kernel' : masked_array(data = ['rbf', 'rbf', 'rbf'],\\n                                          mask = False),\\n            'param_gamma'  : masked_array(data = [0.1 0.2 0.3], mask = False),\\n            'split0_test_score'  : [0.80, 0.90, 0.70],\\n            'split1_test_score'  : [0.82, 0.50, 0.70],\\n            'mean_test_score'    : [0.81, 0.70, 0.70],\\n            'std_test_score'     : [0.01, 0.20, 0.00],\\n            'rank_test_score'    : [3, 1, 1],\\n            'split0_train_score' : [0.80, 0.92, 0.70],\\n            'split1_train_score' : [0.82, 0.55, 0.70],\\n            'mean_train_score'   : [0.81, 0.74, 0.70],\\n            'std_train_score'    : [0.01, 0.19, 0.00],\\n            'mean_fit_time'      : [0.73, 0.63, 0.43],\\n            'std_fit_time'       : [0.01, 0.02, 0.01],\\n            'mean_score_time'    : [0.01, 0.06, 0.04],\\n            'std_score_time'     : [0.00, 0.00, 0.00],\\n            'params'             : [{'kernel' : 'rbf', 'gamma' : 0.1}, ...],\\n            }\\n\\n        NOTE\\n\\n        The key ``'params'`` is used to store a list of parameter\\n        settings dicts for all the parameter candidates.\\n\\n        The ``mean_fit_time``, ``std_fit_time``, ``mean_score_time`` and\\n        ``std_score_time`` are all in seconds.\\n\\n        For multi-metric evaluation, the scores for all the scorers are\\n        available in the ``cv_results_`` dict at the keys ending with that\\n        scorer's name (``'_<scorer_name>'``) instead of ``'_score'`` shown\\n        above. ('split0_test_precision', 'mean_train_precision' etc.)\\n\\n    best_estimator_ : estimator or dict\\n        Estimator that was chosen by the search, i.e. estimator\\n        which gave highest score (or smallest loss if specified)\\n        on the left out data. Not available if ``refit=False``.\\n\\n        For multi-metric evaluation, this attribute is present only if\\n        ``refit`` is specified.\\n\\n        See ``refit`` parameter for more information on allowed values.\\n\\n    best_score_ : float\\n        Mean cross-validated score of the best_estimator.\\n\\n        For multi-metric evaluation, this is not available if ``refit`` is\\n        ``False``. See ``refit`` parameter for more information.\\n\\n    best_params_ : dict\\n        Parameter setting that gave the best results on the hold out data.\\n\\n        For multi-metric evaluation, this is not available if ``refit`` is\\n        ``False``. See ``refit`` parameter for more information.\\n\\n    best_index_ : int\\n        The index (of the ``cv_results_`` arrays) which corresponds to the best\\n        candidate parameter setting.\\n\\n        The dict at ``search.cv_results_['params'][search.best_index_]`` gives\\n        the parameter setting for the best model, that gives the highest\\n        mean score (``search.best_score_``).\\n\\n        For multi-metric evaluation, this is not available if ``refit`` is\\n        ``False``. See ``refit`` parameter for more information.\\n\\n    scorer_ : function or a dict\\n        Scorer function used on the held out data to choose the best\\n        parameters for the model.\\n\\n        For multi-metric evaluation, this attribute holds the validated\\n        ``scoring`` dict which maps the scorer key to the scorer callable.\\n\\n    n_splits_ : int\\n        The number of cross-validation splits (folds/iterations).\\n\\n    refit_time_ : float\\n        Seconds used for refitting the best model on the whole dataset.\\n\\n        This is present only if ``refit`` is not False.\\n\\n    Notes\\n    -----\\n    The parameters selected are those that maximize the score of the held-out\\n    data, according to the scoring parameter.\\n\\n    If `n_jobs` was set to a value higher than one, the data is copied for each\\n    parameter setting(and not `n_jobs` times). This is done for efficiency\\n    reasons if individual jobs take very little time, but may raise errors if\\n    the dataset is large and not enough memory is available.  A workaround in\\n    this case is to set `pre_dispatch`. Then, the memory is copied only\\n    `pre_dispatch` many times. A reasonable value for `pre_dispatch` is `2 *\\n    n_jobs`.\\n\\n    See Also\\n    --------\\n    :class:`GridSearchCV`:\\n        Does exhaustive search over a grid of parameters.\\n\\n    :class:`ParameterSampler`:\\n        A generator over parameter settings, constructed from\\n        param_distributions.\\n\\n    \",\n    inputs: [{\n      name: 'estimator',\n      docstring: 'A object of that type is instantiated for each grid point. This is assumed to implement the scikit-learn estimator interface. Either estimator needs to provide a ``score`` function, or ``scoring`` must be passed.',\n      param_type: ['object'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null\n    }, {\n      name: 'param_distributions',\n      docstring: 'Dictionary with parameters names (string) as keys and distributions or lists of parameters to try. Distributions must provide a ``rvs`` method for sampling (such as those from scipy.stats.distributions). If a list is given, it is sampled uniformly.',\n      param_type: ['dict'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null\n    }, {\n      name: 'n_iter',\n      docstring: 'Number of parameter settings that are sampled. n_iter trades off runtime vs quality of the solution.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '10'\n    }, {\n      name: 'scoring',\n      docstring: \"A single string (see :ref:`scoring_parameter`) or a callable (see :ref:`scoring`) to evaluate the predictions on the test set.  For evaluating multiple metrics, either give a list of (unique) strings or a dict with names as keys and callables as values.  NOTE that when using custom scorers, each scorer should return a single value. Metric functions returning a list/array of values can be wrapped into multiple scorers that return one value each.  See :ref:`multimetric_grid_search` for an example.  If None, the estimator's score method is used.\",\n      param_type: ['str', 'dict', 'list', 'tuple', 'callable', null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'None'\n    }, {\n      name: 'n_jobs',\n      docstring: 'Number of jobs to run in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.',\n      param_type: ['int', null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'None'\n    }, {\n      name: 'pre_dispatch',\n      docstring: \"Controls the number of jobs that get dispatched during parallel execution. Reducing this number can be useful to avoid an explosion of memory consumption when more jobs get dispatched than CPUs can process. This parameter can be:      - None, in which case all the jobs are immediately       created and spawned. Use this for lightweight and       fast-running jobs, to avoid delays due to on-demand       spawning of the jobs      - An int, giving the exact number of total jobs that are       spawned      - A string, giving an expression as a function of n_jobs,       as in '2*n_jobs'\",\n      param_type: ['int', 'str'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null\n    }, {\n      name: 'iid',\n      docstring: 'If True, return the average score across folds, weighted by the number of samples in each test set. In this case, the data is assumed to be identically distributed across the folds, and the loss minimized is the total loss per sample, and not the mean loss across the folds. If False, return the average score across folds. Default is True, but will change to False in version 0.22, to correspond to the standard definition of cross-validation.  .. versionchanged:: 0.20     Parameter ``iid`` will change from True to False by default in     version 0.22, and will be removed in 0.24.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'warn'\n    }, {\n      name: 'cv',\n      docstring: 'Determines the cross-validation splitting strategy. Possible inputs for cv are:  - None, to use the default 3-fold cross validation, - integer, to specify the number of folds in a `(Stratified)KFold`, - :term:`CV splitter`, - An iterable yielding (train, test) splits as arrays of indices.  For integer/None inputs, if the estimator is a classifier and ``y`` is either binary or multiclass, :class:`StratifiedKFold` is used. In all other cases, :class:`KFold` is used.  Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here.  .. versionchanged:: 0.20     ``cv`` default value if None will change from 3-fold to 5-fold     in v0.22.',\n      param_type: ['int', 'iter'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null\n    }, {\n      name: 'refit',\n      docstring: 'Refit an estimator using the best found parameters on the whole dataset.  For multiple metric evaluation, this needs to be a string denoting the scorer that would be used to find the best parameters for refitting the estimator at the end.  Where there are considerations other than maximum score in choosing a best estimator, ``refit`` can be set to a function which returns the selected ``best_index_`` given the ``cv_results``.  The refitted estimator is made available at the ``best_estimator_`` attribute and permits using ``predict`` directly on this ``RandomizedSearchCV`` instance.  Also for multiple metric evaluation, the attributes ``best_index_``, ``best_score_`` and ``best_params_`` will only be available if ``refit`` is set and all of them will be determined w.r.t this specific scorer. When refit is callable, ``best_score_`` is disabled.  See ``scoring`` parameter to know more about multiple metric evaluation.  .. versionchanged:: 0.20     Support for callable added.',\n      param_type: ['bool', 'str', 'callable'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True'\n    }, {\n      name: 'verbose',\n      docstring: 'Controls the verbosity: the higher, the more messages.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null\n    }, {\n      name: 'random_state',\n      docstring: 'Pseudo random number generator state used for random uniform sampling from lists of possible values instead of scipy.stats distributions. If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.',\n      param_type: ['int', null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'None'\n    }, {\n      name: 'error_score',\n      docstring: \"Value to assign to the score if an error occurs in estimator fitting. If set to 'raise', the error is raised. If a numeric value is given, FitFailedWarning is raised. This parameter does not affect the refit step, which will always raise the error. Default is 'raise' but from version 0.22 it will change to np.nan.\",\n      param_type: [null],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null\n    }, {\n      name: 'return_train_score',\n      docstring: 'If ``False``, the ``cv_results_`` attribute will not include training scores. Computing training scores is used to get insights on how different parameter settings impact the overfitting/underfitting trade-off. However computing the scores on the training set can be computationally expensive and is not strictly required to select the parameters that yield the best generalization performance.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'False'\n    }],\n    outputs: [{\n      name: 'cv_results_',\n      docstring: \"A dict with keys as column headers and values as columns, that can be imported into a pandas ``DataFrame``.  For instance the below given table  +--------------+-------------+-------------------+---+---------------+ | param_kernel | param_gamma | split0_test_score |...|rank_test_score| +==============+=============+===================+===+===============+ |    'rbf'     |     0.1     |       0.80        |...|       2       | +--------------+-------------+-------------------+---+---------------+ |    'rbf'     |     0.2     |       0.90        |...|       1       | +--------------+-------------+-------------------+---+---------------+ |    'rbf'     |     0.3     |       0.70        |...|       1       | +--------------+-------------+-------------------+---+---------------+  will be represented by a ``cv_results_`` dict of::      {     'param_kernel' : masked_array(data = ['rbf', 'rbf', 'rbf'],                                   mask = False),     'param_gamma'  : masked_array(data = [0.1 0.2 0.3], mask = False),     'split0_test_score'  : [0.80, 0.90, 0.70],     'split1_test_score'  : [0.82, 0.50, 0.70],     'mean_test_score'    : [0.81, 0.70, 0.70],     'std_test_score'     : [0.01, 0.20, 0.00],     'rank_test_score'    : [3, 1, 1],     'split0_train_score' : [0.80, 0.92, 0.70],     'split1_train_score' : [0.82, 0.55, 0.70],     'mean_train_score'   : [0.81, 0.74, 0.70],     'std_train_score'    : [0.01, 0.19, 0.00],     'mean_fit_time'      : [0.73, 0.63, 0.43],     'std_fit_time'       : [0.01, 0.02, 0.01],     'mean_score_time'    : [0.01, 0.06, 0.04],     'std_score_time'     : [0.00, 0.00, 0.00],     'params'             : [{'kernel' : 'rbf', 'gamma' : 0.1}, ...],     }  NOTE  The key ``'params'`` is used to store a list of parameter settings dicts for all the parameter candidates.  The ``mean_fit_time``, ``std_fit_time``, ``mean_score_time`` and ``std_score_time`` are all in seconds.  For multi-metric evaluation, the scores for all the scorers are available in the ``cv_results_`` dict at the keys ending with that scorer's name (``'_<scorer_name>'``) instead of ``'_score'`` shown above. ('split0_test_precision', 'mean_train_precision' etc.)\",\n      param_type: ['array', 'dict'],\n      returned: false\n    }, {\n      name: 'best_estimator_',\n      docstring: 'Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if ``refit=False``.  For multi-metric evaluation, this attribute is present only if ``refit`` is specified.  See ``refit`` parameter for more information on allowed values.',\n      param_type: ['dict'],\n      returned: false\n    }, {\n      name: 'best_score_',\n      docstring: 'Mean cross-validated score of the best_estimator.  For multi-metric evaluation, this is not available if ``refit`` is ``False``. See ``refit`` parameter for more information.',\n      param_type: ['float'],\n      returned: false\n    }, {\n      name: 'best_params_',\n      docstring: 'Parameter setting that gave the best results on the hold out data.  For multi-metric evaluation, this is not available if ``refit`` is ``False``. See ``refit`` parameter for more information.',\n      param_type: ['dict'],\n      returned: false\n    }, {\n      name: 'best_index_',\n      docstring: \"The index (of the ``cv_results_`` arrays) which corresponds to the best candidate parameter setting.  The dict at ``search.cv_results_['params'][search.best_index_]`` gives the parameter setting for the best model, that gives the highest mean score (``search.best_score_``).  For multi-metric evaluation, this is not available if ``refit`` is ``False``. See ``refit`` parameter for more information.\",\n      param_type: ['int'],\n      returned: false\n    }, {\n      name: 'scorer_',\n      docstring: 'Scorer function used on the held out data to choose the best parameters for the model.  For multi-metric evaluation, this attribute holds the validated ``scoring`` dict which maps the scorer key to the scorer callable.',\n      param_type: ['dict'],\n      returned: false\n    }, {\n      name: 'n_splits_',\n      docstring: 'The number of cross-validation splits (folds/iterations).',\n      param_type: ['int'],\n      returned: false\n    }, {\n      name: 'refit_time_',\n      docstring: 'Seconds used for refitting the best model on the whole dataset.  This is present only if ``refit`` is not False.',\n      param_type: ['float'],\n      returned: false\n    }],\n    node_functions: [{\n      name: '__init__',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_check_is_fitted',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_format_results',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_param_names',\n      docstring: 'Get parameter names for the estimator',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_tags',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_run_search',\n      docstring: 'Search n_iter candidates from param_distributions',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'decision_function',\n      docstring: 'Call decision_function on the estimator with the best found parameters.\\n\\n        Only available if ``refit=True`` and the underlying estimator supports\\n        ``decision_function``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: 'Must fulfill the input assumptions of the underlying estimator.',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }],\n      outputs: []\n    }, {\n      name: 'fit',\n      docstring: 'Run fit with all sets of parameters.\\n\\n        Parameters\\n        ----------\\n\\n        X : array-like, shape = [n_samples, n_features]\\n            Training vector, where n_samples is the number of samples and\\n            n_features is the number of features.\\n\\n        y : array-like, shape = [n_samples] or [n_samples, n_output], optional\\n            Target relative to X for classification or regression;\\n            None for unsupervised learning.\\n\\n        groups : array-like, with shape (n_samples,), optional\\n            Group labels for the samples used while splitting the dataset into\\n            train/test set. Only used in conjunction with a \"Group\" `cv`\\n            instance (e.g., `GroupKFold`).\\n\\n        **fit_params : dict of string -> object\\n            Parameters passed to the ``fit`` method of the estimator\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: 'Training vector, where n_samples is the number of samples and n_features is the number of features.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null\n      }, {\n        name: 'y',\n        docstring: 'Target relative to X for classification or regression; None for unsupervised learning.',\n        param_type: ['array'],\n        expected_shape: '[n_samples] or [n_samples, n_output], optional',\n        is_optional: true,\n        default_value: null\n      }, {\n        name: 'groups',\n        docstring: 'Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a \"Group\" `cv` instance (e.g., `GroupKFold`).',\n        param_type: ['array'],\n        expected_shape: '(n_samples,), optional',\n        is_optional: true,\n        default_value: null\n      }, {\n        name: '**fit_params',\n        docstring: 'Parameters passed to the ``fit`` method of the estimator',\n        param_type: ['object', 'str', 'dict'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }],\n      outputs: []\n    }, {\n      name: 'get_params',\n      docstring: 'Get parameters for this estimator.\\n\\n        Parameters\\n        ----------\\n        deep : boolean, optional\\n            If True, will return the parameters for this estimator and\\n            contained subobjects that are estimators.\\n\\n        Returns\\n        -------\\n        params : mapping of string to any\\n            Parameter names mapped to their values.\\n        ',\n      inputs: [{\n        name: 'deep',\n        docstring: 'If True, will return the parameters for this estimator and contained subobjects that are estimators.',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: null\n      }],\n      outputs: [{\n        name: 'params',\n        docstring: 'Parameter names mapped to their values.',\n        param_type: ['str'],\n        returned: true\n      }]\n    }, {\n      name: 'inverse_transform',\n      docstring: 'Call inverse_transform on the estimator with the best found params.\\n\\n        Only available if the underlying estimator implements\\n        ``inverse_transform`` and ``refit=True``.\\n\\n        Parameters\\n        ----------\\n        Xt : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n      inputs: [{\n        name: 'Xt',\n        docstring: 'Must fulfill the input assumptions of the underlying estimator.',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }],\n      outputs: []\n    }, {\n      name: 'predict',\n      docstring: 'Call predict on the estimator with the best found parameters.\\n\\n        Only available if ``refit=True`` and the underlying estimator supports\\n        ``predict``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: 'Must fulfill the input assumptions of the underlying estimator.',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }],\n      outputs: []\n    }, {\n      name: 'predict_log_proba',\n      docstring: 'Call predict_log_proba on the estimator with the best found parameters.\\n\\n        Only available if ``refit=True`` and the underlying estimator supports\\n        ``predict_log_proba``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: 'Must fulfill the input assumptions of the underlying estimator.',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }],\n      outputs: []\n    }, {\n      name: 'predict_proba',\n      docstring: 'Call predict_proba on the estimator with the best found parameters.\\n\\n        Only available if ``refit=True`` and the underlying estimator supports\\n        ``predict_proba``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: 'Must fulfill the input assumptions of the underlying estimator.',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }],\n      outputs: []\n    }, {\n      name: 'score',\n      docstring: 'Returns the score on the given data, if the estimator has been refit.\\n\\n        This uses the score defined by ``scoring`` where provided, and the\\n        ``best_estimator_.score`` method otherwise.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape = [n_samples, n_features]\\n            Input data, where n_samples is the number of samples and\\n            n_features is the number of features.\\n\\n        y : array-like, shape = [n_samples] or [n_samples, n_output], optional\\n            Target relative to X for classification or regression;\\n            None for unsupervised learning.\\n\\n        Returns\\n        -------\\n        score : float\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: 'Input data, where n_samples is the number of samples and n_features is the number of features.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null\n      }, {\n        name: 'y',\n        docstring: 'Target relative to X for classification or regression; None for unsupervised learning.',\n        param_type: ['array'],\n        expected_shape: '[n_samples] or [n_samples, n_output], optional',\n        is_optional: true,\n        default_value: null\n      }],\n      outputs: [{\n        name: 'score',\n        docstring: '',\n        param_type: ['float'],\n        returned: true\n      }]\n    }, {\n      name: 'set_params',\n      docstring: \"Set the parameters of this estimator.\\n\\n        The method works on simple estimators as well as on nested objects\\n        (such as pipelines). The latter have parameters of the form\\n        ``<component>__<parameter>`` so that it's possible to update each\\n        component of a nested object.\\n\\n        Returns\\n        -------\\n        self\\n        \",\n      inputs: [],\n      outputs: [{\n        name: '',\n        docstring: '',\n        param_type: [null],\n        returned: true\n      }]\n    }, {\n      name: 'transform',\n      docstring: 'Call transform on the estimator with the best found parameters.\\n\\n        Only available if the underlying estimator supports ``transform`` and\\n        ``refit=True``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: 'Must fulfill the input assumptions of the underlying estimator.',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }],\n      outputs: []\n    }],\n    nodes: []\n  }],\n  library: 'sklearn',\n  module: 'model_selection'\n});\n\n/***/ }),\n\n/***/ 1051:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  inputs: [],\n  module: 'decomposition',\n  library: 'sklearn',\n  name: 'sklearn.decomposition',\n  nodes: [{\n    inputs: [{\n      is_optional: false,\n      param_type: ['int', null],\n      name: 'n_components',\n      docstring: 'Dimensionality of latent space, the number of components of ``X`` that are obtained after ``transform``. If None, n_components is set to the number of features.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['float'],\n      name: 'tol',\n      docstring: 'Stopping tolerance for EM algorithm.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['bool'],\n      name: 'copy',\n      docstring: 'Whether to make a copy of X. If ``False``, the input X gets overwritten during fitting.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['int'],\n      name: 'max_iter',\n      docstring: 'Maximum number of iterations.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['LIST_VALID_OPTIONS', 'array', null],\n      name: 'noise_variance_init',\n      docstring: 'The initial guess of the noise variance for each feature. If None, it defaults to np.ones(n_features)',\n      options: ['None ', ' array, shape=(n_features,)'],\n      default_value: null,\n      expected_shape: '(n_features,)'\n    }, {\n      is_optional: false,\n      param_type: ['LIST_VALID_OPTIONS'],\n      name: 'svd_method',\n      docstring: \"Which SVD method to use. If 'lapack' use standard SVD from scipy.linalg, if 'randomized' use fast ``randomized_svd`` function. Defaults to 'randomized'. For most applications 'randomized' will be sufficiently precise while providing significant speed gains. Accuracy can also be improved by setting higher values for `iterated_power`. If this is not sufficient, for maximum precision you should choose 'lapack'.\",\n      options: ['lapack', 'randomized'],\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int'],\n      name: 'iterated_power',\n      docstring: \"Number of iterations for the power method. 3 by default. Only used if ``svd_method`` equals 'randomized'\",\n      options: null,\n      default_value: '3',\n      expected_shape: null\n    }],\n    name: 'FactorAnalysis',\n    nodes: [],\n    node_functions: [{\n      inputs: [],\n      outputs: [],\n      name: '__init__',\n      docstring: 'None'\n    }, {\n      inputs: [],\n      outputs: [],\n      name: '_get_param_names',\n      docstring: 'Get parameter names for the estimator'\n    }, {\n      inputs: [{\n        is_optional: false,\n        param_type: ['array'],\n        name: 'X',\n        docstring: 'Training data.',\n        options: null,\n        default_value: null,\n        expected_shape: '(n_samples, n_features)'\n      }, {\n        is_optional: false,\n        param_type: [null],\n        name: 'y',\n        docstring: '',\n        options: null,\n        default_value: null,\n        expected_shape: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'fit',\n      docstring: 'Fit the FactorAnalysis model to X using EM\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n            Training data.\\n\\n        y : Ignored\\n\\n        Returns\\n        -------\\n        self\\n        '\n    }, {\n      inputs: [{\n        is_optional: false,\n        param_type: ['array'],\n        name: 'X',\n        docstring: 'Training set.',\n        options: null,\n        default_value: null,\n        expected_shape: '[n_samples, n_features]'\n      }, {\n        is_optional: false,\n        param_type: ['array'],\n        name: 'y',\n        docstring: 'Target values.',\n        options: null,\n        default_value: null,\n        expected_shape: '[n_samples]'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        returned: true,\n        param_type: ['array'],\n        name: 'X_new',\n        docstring: 'Transformed array.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'fit_transform',\n      docstring: 'Fit to data, then transform it.\\n\\n        Fits transformer to X and y with optional parameters fit_params\\n        and returns a transformed version of X.\\n\\n        Parameters\\n        ----------\\n        X : numpy array of shape [n_samples, n_features]\\n            Training set.\\n\\n        y : numpy array of shape [n_samples]\\n            Target values.\\n\\n        Returns\\n        -------\\n        X_new : numpy array of shape [n_samples, n_features_new]\\n            Transformed array.\\n\\n        '\n    }, {\n      inputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        returned: true,\n        param_type: ['array'],\n        name: 'cov',\n        docstring: 'Estimated covariance of data.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'get_covariance',\n      docstring: 'Compute data covariance with the FactorAnalysis model.\\n\\n        ``cov = components_.T * components_ + diag(noise_variance)``\\n\\n        Returns\\n        -------\\n        cov : array, shape (n_features, n_features)\\n            Estimated covariance of data.\\n        '\n    }, {\n      inputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        returned: true,\n        param_type: ['array'],\n        name: 'precision',\n        docstring: 'Estimated precision of data.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'get_precision',\n      docstring: 'Compute data precision matrix with the FactorAnalysis model.\\n\\n        Returns\\n        -------\\n        precision : array, shape (n_features, n_features)\\n            Estimated precision of data.\\n        '\n    }, {\n      inputs: [{\n        is_optional: false,\n        param_type: ['array'],\n        name: 'X',\n        docstring: 'The data',\n        options: null,\n        default_value: null,\n        expected_shape: '(n_samples, n_features)'\n      }, {\n        is_optional: true,\n        param_type: [null],\n        name: 'y',\n        docstring: '',\n        options: null,\n        default_value: null,\n        expected_shape: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        returned: true,\n        param_type: ['float'],\n        name: 'll',\n        docstring: 'Average log-likelihood of the samples under the current model'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'score',\n      docstring: 'Compute the average log-likelihood of the samples\\n\\n        Parameters\\n        ----------\\n        X : array, shape (n_samples, n_features)\\n            The data\\n\\n        y : Ignored\\n\\n        Returns\\n        -------\\n        ll : float\\n            Average log-likelihood of the samples under the current model\\n        '\n    }, {\n      inputs: [{\n        is_optional: false,\n        param_type: ['array'],\n        name: 'X',\n        docstring: 'The data',\n        options: null,\n        default_value: null,\n        expected_shape: '(n_samples, n_features)'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        returned: true,\n        param_type: ['array'],\n        name: 'll',\n        docstring: 'Log-likelihood of each sample under the current model'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'score_samples',\n      docstring: 'Compute the log-likelihood of each sample\\n\\n        Parameters\\n        ----------\\n        X : array, shape (n_samples, n_features)\\n            The data\\n\\n        Returns\\n        -------\\n        ll : array, shape (n_samples,)\\n            Log-likelihood of each sample under the current model\\n        '\n    }, {\n      inputs: [{\n        is_optional: false,\n        param_type: ['array'],\n        name: 'X',\n        docstring: 'Training data.',\n        options: null,\n        default_value: null,\n        expected_shape: '(n_samples, n_features)'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        returned: true,\n        param_type: ['array'],\n        name: 'X_new',\n        docstring: 'The latent variables of X.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'transform',\n      docstring: 'Apply dimensionality reduction to X using the model.\\n\\n        Compute the expected mean of the latent variables.\\n        See Barber, 21.2.33 (or Bishop, 12.66).\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n            Training data.\\n\\n        Returns\\n        -------\\n        X_new : array-like, shape (n_samples, n_components)\\n            The latent variables of X.\\n        '\n    }],\n    docstring: \"Factor Analysis (FA)\\n\\n    A simple linear generative model with Gaussian latent variables.\\n\\n    The observations are assumed to be caused by a linear transformation of\\n    lower dimensional latent factors and added Gaussian noise.\\n    Without loss of generality the factors are distributed according to a\\n    Gaussian with zero mean and unit covariance. The noise is also zero mean\\n    and has an arbitrary diagonal covariance matrix.\\n\\n    If we would restrict the model further, by assuming that the Gaussian\\n    noise is even isotropic (all diagonal entries are the same) we would obtain\\n    :class:`PPCA`.\\n\\n    FactorAnalysis performs a maximum likelihood estimate of the so-called\\n    `loading` matrix, the transformation of the latent variables to the\\n    observed ones, using expectation-maximization (EM).\\n\\n    Read more in the :ref:`User Guide <FA>`.\\n\\n    Parameters\\n    ----------\\n    n_components : int | None\\n        Dimensionality of latent space, the number of components\\n        of ``X`` that are obtained after ``transform``.\\n        If None, n_components is set to the number of features.\\n\\n    tol : float\\n        Stopping tolerance for EM algorithm.\\n\\n    copy : bool\\n        Whether to make a copy of X. If ``False``, the input X gets overwritten\\n        during fitting.\\n\\n    max_iter : int\\n        Maximum number of iterations.\\n\\n    noise_variance_init : None | array, shape=(n_features,)\\n        The initial guess of the noise variance for each feature.\\n        If None, it defaults to np.ones(n_features)\\n\\n    svd_method : {'lapack', 'randomized'}\\n        Which SVD method to use. If 'lapack' use standard SVD from\\n        scipy.linalg, if 'randomized' use fast ``randomized_svd`` function.\\n        Defaults to 'randomized'. For most applications 'randomized' will\\n        be sufficiently precise while providing significant speed gains.\\n        Accuracy can also be improved by setting higher values for\\n        `iterated_power`. If this is not sufficient, for maximum precision\\n        you should choose 'lapack'.\\n\\n    iterated_power : int, optional\\n        Number of iterations for the power method. 3 by default. Only used\\n        if ``svd_method`` equals 'randomized'\\n\\n    random_state : int, RandomState instance or None, optional (default=0)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`. Only used when ``svd_method`` equals 'randomized'.\\n\\n    Attributes\\n    ----------\\n    components_ : array, [n_components, n_features]\\n        Components with maximum variance.\\n\\n    loglike_ : list, [n_iterations]\\n        The log likelihood at each iteration.\\n\\n    noise_variance_ : array, shape=(n_features,)\\n        The estimated noise variance for each feature.\\n\\n    n_iter_ : int\\n        Number of iterations run.\\n\\n    Examples\\n    --------\\n    >>> from sklearn.datasets import load_digits\\n    >>> from sklearn.decomposition import FactorAnalysis\\n    >>> X, _ = load_digits(return_X_y=True)\\n    >>> transformer = FactorAnalysis(n_components=7, random_state=0)\\n    >>> X_transformed = transformer.fit_transform(X)\\n    >>> X_transformed.shape\\n    (1797, 7)\\n\\n    References\\n    ----------\\n    .. David Barber, Bayesian Reasoning and Machine Learning,\\n        Algorithm 21.1\\n\\n    .. Christopher M. Bishop: Pattern Recognition and Machine Learning,\\n        Chapter 12.2.4\\n\\n    See also\\n    --------\\n    PCA: Principal component analysis is also a latent linear variable model\\n        which however assumes equal noise variance for each feature.\\n        This extra assumption makes probabilistic PCA faster as it can be\\n        computed in closed form.\\n    FastICA: Independent component analysis, a latent variable model with\\n        non-Gaussian latent variables.\\n    \",\n    outputs: [{\n      returned: false,\n      param_type: ['array'],\n      name: 'components_',\n      docstring: 'Components with maximum variance.'\n    }, {\n      returned: false,\n      param_type: ['list'],\n      name: 'loglike_',\n      docstring: 'The log likelihood at each iteration.'\n    }, {\n      returned: false,\n      param_type: ['array'],\n      name: 'noise_variance_',\n      docstring: 'The estimated noise variance for each feature.'\n    }, {\n      returned: false,\n      param_type: ['int'],\n      name: 'n_iter_',\n      docstring: 'Number of iterations run.'\n    }]\n  }, {\n    inputs: [{\n      is_optional: false,\n      param_type: ['int', 'float', 'str', null],\n      name: 'n_components',\n      docstring: \"Number of components to keep. if n_components is not set all components are kept::      n_components == min(n_samples, n_features)  If ``n_components == 'mle'`` and ``svd_solver == 'full'``, Minka's MLE is used to guess the dimension. Use of ``n_components == 'mle'`` will interpret ``svd_solver == 'auto'`` as ``svd_solver == 'full'``.  If ``0 < n_components < 1`` and ``svd_solver == 'full'``, select the number of components such that the amount of variance that needs to be explained is greater than the percentage specified by n_components.  If ``svd_solver == 'arpack'``, the number of components must be strictly less than the minimum of n_features and n_samples.  Hence, the None case results in::      n_components == min(n_samples, n_features) - 1\",\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['bool'],\n      name: 'copy',\n      docstring: 'If False, data passed to fit are overwritten and running fit(X).transform(X) will not yield the expected results, use fit_transform(X) instead.',\n      options: null,\n      default_value: 'True',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['bool'],\n      name: 'whiten',\n      docstring: 'When True (False by default) the `components_` vectors are multiplied by the square root of n_samples and then divided by the singular values to ensure uncorrelated outputs with unit component-wise variances.  Whitening will remove some information from the transformed signal (the relative variance scales of the components) but can sometime improve the predictive accuracy of the downstream estimators by making their data respect some hard-wired assumptions.',\n      options: null,\n      default_value: 'False',\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['LIST_VALID_OPTIONS'],\n      name: 'svd_solver',\n      docstring: \"auto :     the solver is selected by a default policy based on `X.shape` and     `n_components`: if the input data is larger than 500x500 and the     number of components to extract is lower than 80% of the smallest     dimension of the data, then the more efficient 'randomized'     method is enabled. Otherwise the exact full SVD is computed and     optionally truncated afterwards. full :     run exact full SVD calling the standard LAPACK solver via     `scipy.linalg.svd` and select the components by postprocessing arpack :     run SVD truncated to n_components calling ARPACK solver via     `scipy.sparse.linalg.svds`. It requires strictly     0 < n_components < min(X.shape) randomized :     run randomized SVD by the method of Halko et al.  .. versionadded:: 0.18.0\",\n      options: ['auto', 'full', 'arpack', 'randomized'],\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['float'],\n      name: 'tol',\n      docstring: \"Tolerance for singular values computed by svd_solver == 'arpack'.  .. versionadded:: 0.18.0\",\n      options: null,\n      default_value: '.0',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int'],\n      name: 'iterated_power',\n      docstring: \"Number of iterations for the power method computed by svd_solver == 'randomized'.  .. versionadded:: 0.18.0\",\n      options: null,\n      default_value: 'auto',\n      expected_shape: null\n    }],\n    name: 'PCA',\n    nodes: [],\n    node_functions: [{\n      inputs: [],\n      outputs: [],\n      name: '__init__',\n      docstring: 'None'\n    }, {\n      inputs: [],\n      outputs: [],\n      name: '_fit',\n      docstring: 'Dispatch to the right submethod depending on the chosen solver.'\n    }, {\n      inputs: [],\n      outputs: [],\n      name: '_fit_full',\n      docstring: 'Fit the model by computing full SVD on X'\n    }, {\n      inputs: [],\n      outputs: [],\n      name: '_fit_truncated',\n      docstring: 'Fit the model by computing truncated SVD (by ARPACK or randomized)\\n        on X\\n        '\n    }, {\n      inputs: [],\n      outputs: [],\n      name: '_get_param_names',\n      docstring: 'Get parameter names for the estimator'\n    }, {\n      inputs: [{\n        is_optional: false,\n        param_type: ['array'],\n        name: 'X',\n        docstring: 'Training data, where n_samples is the number of samples and n_features is the number of features.',\n        options: null,\n        default_value: null,\n        expected_shape: '(n_samples, n_features)'\n      }, {\n        is_optional: true,\n        param_type: [null],\n        name: 'y',\n        docstring: 'Ignored',\n        options: null,\n        default_value: null,\n        expected_shape: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'fit',\n      docstring: 'Fit the model with X.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n            Training data, where n_samples is the number of samples\\n            and n_features is the number of features.\\n\\n        y : Ignored\\n\\n        Returns\\n        -------\\n        self : object\\n            Returns the instance itself.\\n        '\n    }, {\n      inputs: [{\n        is_optional: false,\n        param_type: ['array'],\n        name: 'X',\n        docstring: 'Training data, where n_samples is the number of samples and n_features is the number of features.',\n        options: null,\n        default_value: null,\n        expected_shape: '(n_samples, n_features)'\n      }, {\n        is_optional: true,\n        param_type: [null],\n        name: 'y',\n        docstring: 'Ignored',\n        options: null,\n        default_value: null,\n        expected_shape: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        returned: true,\n        param_type: ['array'],\n        name: 'X_new',\n        docstring: ''\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'fit_transform',\n      docstring: 'Fit the model with X and apply the dimensionality reduction on X.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n            Training data, where n_samples is the number of samples\\n            and n_features is the number of features.\\n\\n        y : Ignored\\n\\n        Returns\\n        -------\\n        X_new : array-like, shape (n_samples, n_components)\\n\\n        '\n    }, {\n      inputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        returned: true,\n        param_type: ['array'],\n        name: 'cov',\n        docstring: 'Estimated covariance of data.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'get_covariance',\n      docstring: 'Compute data covariance with the generative model.\\n\\n        ``cov = components_.T * S**2 * components_ + sigma2 * eye(n_features)``\\n        where  S**2 contains the explained variances, and sigma2 contains the\\n        noise variances.\\n\\n        Returns\\n        -------\\n        cov : array, shape=(n_features, n_features)\\n            Estimated covariance of data.\\n        '\n    }, {\n      inputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        returned: true,\n        param_type: ['array'],\n        name: 'precision',\n        docstring: 'Estimated precision of data.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'get_precision',\n      docstring: 'Compute data precision matrix with the generative model.\\n\\n        Equals the inverse of the covariance but computed with\\n        the matrix inversion lemma for efficiency.\\n\\n        Returns\\n        -------\\n        precision : array, shape=(n_features, n_features)\\n            Estimated precision of data.\\n        '\n    }, {\n      inputs: [{\n        is_optional: false,\n        param_type: ['array'],\n        name: 'X',\n        docstring: 'New data, where n_samples is the number of samples and n_components is the number of components.',\n        options: null,\n        default_value: null,\n        expected_shape: '(n_samples, n_components)'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        returned: true,\n        param_type: [null],\n        name: 'X_original array-like, shape (n_samples, n_features)',\n        docstring: ''\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'inverse_transform',\n      docstring: 'Transform data back to its original space.\\n\\n        In other words, return an input X_original whose transform would be X.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_components)\\n            New data, where n_samples is the number of samples\\n            and n_components is the number of components.\\n\\n        Returns\\n        -------\\n        X_original array-like, shape (n_samples, n_features)\\n\\n        Notes\\n        -----\\n        If whitening is enabled, inverse_transform will compute the\\n        exact inverse operation, which includes reversing whitening.\\n        '\n    }, {\n      inputs: [{\n        is_optional: false,\n        param_type: ['array'],\n        name: 'X',\n        docstring: 'The data.',\n        options: null,\n        default_value: null,\n        expected_shape: '(n_samples, n_features)'\n      }, {\n        is_optional: true,\n        param_type: [null],\n        name: 'y',\n        docstring: 'Ignored',\n        options: null,\n        default_value: null,\n        expected_shape: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        returned: true,\n        param_type: ['float'],\n        name: 'll',\n        docstring: 'Average log-likelihood of the samples under the current model'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'score',\n      docstring: 'Return the average log-likelihood of all samples.\\n\\n        See. \"Pattern Recognition and Machine Learning\"\\n        by C. Bishop, 12.2.1 p. 574\\n        or http://www.miketipping.com/papers/met-mppca.pdf\\n\\n        Parameters\\n        ----------\\n        X : array, shape(n_samples, n_features)\\n            The data.\\n\\n        y : Ignored\\n\\n        Returns\\n        -------\\n        ll : float\\n            Average log-likelihood of the samples under the current model\\n        '\n    }, {\n      inputs: [{\n        is_optional: false,\n        param_type: ['array'],\n        name: 'X',\n        docstring: 'The data.',\n        options: null,\n        default_value: null,\n        expected_shape: '(n_samples, n_features)'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        returned: true,\n        param_type: ['array'],\n        name: 'll',\n        docstring: 'Log-likelihood of each sample under the current model'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'score_samples',\n      docstring: 'Return the log-likelihood of each sample.\\n\\n        See. \"Pattern Recognition and Machine Learning\"\\n        by C. Bishop, 12.2.1 p. 574\\n        or http://www.miketipping.com/papers/met-mppca.pdf\\n\\n        Parameters\\n        ----------\\n        X : array, shape(n_samples, n_features)\\n            The data.\\n\\n        Returns\\n        -------\\n        ll : array, shape (n_samples,)\\n            Log-likelihood of each sample under the current model\\n        '\n    }, {\n      inputs: [{\n        is_optional: false,\n        param_type: ['array'],\n        name: 'X',\n        docstring: 'New data, where n_samples is the number of samples and n_features is the number of features.',\n        options: null,\n        default_value: null,\n        expected_shape: '(n_samples, n_features)'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        returned: true,\n        param_type: ['array'],\n        name: 'X_new',\n        docstring: ''\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'transform',\n      docstring: 'Apply dimensionality reduction to X.\\n\\n        X is projected on the first principal components previously extracted\\n        from a training set.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n            New data, where n_samples is the number of samples\\n            and n_features is the number of features.\\n\\n        Returns\\n        -------\\n        X_new : array-like, shape (n_samples, n_components)\\n\\n        Examples\\n        --------\\n\\n        >>> import numpy as np\\n        >>> from sklearn.decomposition import IncrementalPCA\\n        >>> X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\\n        >>> ipca = IncrementalPCA(n_components=2, batch_size=3)\\n        >>> ipca.fit(X)\\n        IncrementalPCA(batch_size=3, copy=True, n_components=2, whiten=False)\\n        >>> ipca.transform(X) # doctest: +SKIP\\n        '\n    }],\n    docstring: \"Principal component analysis (PCA)\\n\\n    Linear dimensionality reduction using Singular Value Decomposition of the\\n    data to project it to a lower dimensional space.\\n\\n    It uses the LAPACK implementation of the full SVD or a randomized truncated\\n    SVD by the method of Halko et al. 2009, depending on the shape of the input\\n    data and the number of components to extract.\\n\\n    It can also use the scipy.sparse.linalg ARPACK implementation of the\\n    truncated SVD.\\n\\n    Notice that this class does not support sparse input. See\\n    :class:`TruncatedSVD` for an alternative with sparse data.\\n\\n    Read more in the :ref:`User Guide <PCA>`.\\n\\n    Parameters\\n    ----------\\n    n_components : int, float, None or string\\n        Number of components to keep.\\n        if n_components is not set all components are kept::\\n\\n            n_components == min(n_samples, n_features)\\n\\n        If ``n_components == 'mle'`` and ``svd_solver == 'full'``, Minka's\\n        MLE is used to guess the dimension. Use of ``n_components == 'mle'``\\n        will interpret ``svd_solver == 'auto'`` as ``svd_solver == 'full'``.\\n\\n        If ``0 < n_components < 1`` and ``svd_solver == 'full'``, select the\\n        number of components such that the amount of variance that needs to be\\n        explained is greater than the percentage specified by n_components.\\n\\n        If ``svd_solver == 'arpack'``, the number of components must be\\n        strictly less than the minimum of n_features and n_samples.\\n\\n        Hence, the None case results in::\\n\\n            n_components == min(n_samples, n_features) - 1\\n\\n    copy : bool (default True)\\n        If False, data passed to fit are overwritten and running\\n        fit(X).transform(X) will not yield the expected results,\\n        use fit_transform(X) instead.\\n\\n    whiten : bool, optional (default False)\\n        When True (False by default) the `components_` vectors are multiplied\\n        by the square root of n_samples and then divided by the singular values\\n        to ensure uncorrelated outputs with unit component-wise variances.\\n\\n        Whitening will remove some information from the transformed signal\\n        (the relative variance scales of the components) but can sometime\\n        improve the predictive accuracy of the downstream estimators by\\n        making their data respect some hard-wired assumptions.\\n\\n    svd_solver : string {'auto', 'full', 'arpack', 'randomized'}\\n        auto :\\n            the solver is selected by a default policy based on `X.shape` and\\n            `n_components`: if the input data is larger than 500x500 and the\\n            number of components to extract is lower than 80% of the smallest\\n            dimension of the data, then the more efficient 'randomized'\\n            method is enabled. Otherwise the exact full SVD is computed and\\n            optionally truncated afterwards.\\n        full :\\n            run exact full SVD calling the standard LAPACK solver via\\n            `scipy.linalg.svd` and select the components by postprocessing\\n        arpack :\\n            run SVD truncated to n_components calling ARPACK solver via\\n            `scipy.sparse.linalg.svds`. It requires strictly\\n            0 < n_components < min(X.shape)\\n        randomized :\\n            run randomized SVD by the method of Halko et al.\\n\\n        .. versionadded:: 0.18.0\\n\\n    tol : float >= 0, optional (default .0)\\n        Tolerance for singular values computed by svd_solver == 'arpack'.\\n\\n        .. versionadded:: 0.18.0\\n\\n    iterated_power : int >= 0, or 'auto', (default 'auto')\\n        Number of iterations for the power method computed by\\n        svd_solver == 'randomized'.\\n\\n        .. versionadded:: 0.18.0\\n\\n    random_state : int, RandomState instance or None, optional (default None)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`. Used when ``svd_solver`` == 'arpack' or 'randomized'.\\n\\n        .. versionadded:: 0.18.0\\n\\n    Attributes\\n    ----------\\n    components_ : array, shape (n_components, n_features)\\n        Principal axes in feature space, representing the directions of\\n        maximum variance in the data. The components are sorted by\\n        ``explained_variance_``.\\n\\n    explained_variance_ : array, shape (n_components,)\\n        The amount of variance explained by each of the selected components.\\n\\n        Equal to n_components largest eigenvalues\\n        of the covariance matrix of X.\\n\\n        .. versionadded:: 0.18\\n\\n    explained_variance_ratio_ : array, shape (n_components,)\\n        Percentage of variance explained by each of the selected components.\\n\\n        If ``n_components`` is not set then all components are stored and the\\n        sum of the ratios is equal to 1.0.\\n\\n    singular_values_ : array, shape (n_components,)\\n        The singular values corresponding to each of the selected components.\\n        The singular values are equal to the 2-norms of the ``n_components``\\n        variables in the lower-dimensional space.\\n\\n    mean_ : array, shape (n_features,)\\n        Per-feature empirical mean, estimated from the training set.\\n\\n        Equal to `X.mean(axis=0)`.\\n\\n    n_components_ : int\\n        The estimated number of components. When n_components is set\\n        to 'mle' or a number between 0 and 1 (with svd_solver == 'full') this\\n        number is estimated from input data. Otherwise it equals the parameter\\n        n_components, or the lesser value of n_features and n_samples\\n        if n_components is None.\\n\\n    noise_variance_ : float\\n        The estimated noise covariance following the Probabilistic PCA model\\n        from Tipping and Bishop 1999. See \\\"Pattern Recognition and\\n        Machine Learning\\\" by C. Bishop, 12.2.1 p. 574 or\\n        http://www.miketipping.com/papers/met-mppca.pdf. It is required to\\n        compute the estimated data covariance and score samples.\\n\\n        Equal to the average of (min(n_features, n_samples) - n_components)\\n        smallest eigenvalues of the covariance matrix of X.\\n\\n    References\\n    ----------\\n    For n_components == 'mle', this class uses the method of `Minka, T. P.\\n    \\\"Automatic choice of dimensionality for PCA\\\". In NIPS, pp. 598-604`\\n\\n    Implements the probabilistic PCA model from:\\n    `Tipping, M. E., and Bishop, C. M. (1999). \\\"Probabilistic principal\\n    component analysis\\\". Journal of the Royal Statistical Society:\\n    Series B (Statistical Methodology), 61(3), 611-622.\\n    via the score and score_samples methods.\\n    See http://www.miketipping.com/papers/met-mppca.pdf\\n\\n    For svd_solver == 'arpack', refer to `scipy.sparse.linalg.svds`.\\n\\n    For svd_solver == 'randomized', see:\\n    `Halko, N., Martinsson, P. G., and Tropp, J. A. (2011).\\n    \\\"Finding structure with randomness: Probabilistic algorithms for\\n    constructing approximate matrix decompositions\\\".\\n    SIAM review, 53(2), 217-288.` and also\\n    `Martinsson, P. G., Rokhlin, V., and Tygert, M. (2011).\\n    \\\"A randomized algorithm for the decomposition of matrices\\\".\\n    Applied and Computational Harmonic Analysis, 30(1), 47-68.`\\n\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> from sklearn.decomposition import PCA\\n    >>> X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\\n    >>> pca = PCA(n_components=2)\\n    >>> pca.fit(X)\\n    PCA(copy=True, iterated_power='auto', n_components=2, random_state=None,\\n      svd_solver='auto', tol=0.0, whiten=False)\\n    >>> print(pca.explained_variance_ratio_)  # doctest: +ELLIPSIS\\n    [0.9924... 0.0075...]\\n    >>> print(pca.singular_values_)  # doctest: +ELLIPSIS\\n    [6.30061... 0.54980...]\\n\\n    >>> pca = PCA(n_components=2, svd_solver='full')\\n    >>> pca.fit(X)                 # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\\n    PCA(copy=True, iterated_power='auto', n_components=2, random_state=None,\\n      svd_solver='full', tol=0.0, whiten=False)\\n    >>> print(pca.explained_variance_ratio_)  # doctest: +ELLIPSIS\\n    [0.9924... 0.00755...]\\n    >>> print(pca.singular_values_)  # doctest: +ELLIPSIS\\n    [6.30061... 0.54980...]\\n\\n    >>> pca = PCA(n_components=1, svd_solver='arpack')\\n    >>> pca.fit(X)\\n    PCA(copy=True, iterated_power='auto', n_components=1, random_state=None,\\n      svd_solver='arpack', tol=0.0, whiten=False)\\n    >>> print(pca.explained_variance_ratio_)  # doctest: +ELLIPSIS\\n    [0.99244...]\\n    >>> print(pca.singular_values_)  # doctest: +ELLIPSIS\\n    [6.30061...]\\n\\n    See also\\n    --------\\n    KernelPCA\\n    SparsePCA\\n    TruncatedSVD\\n    IncrementalPCA\\n    \",\n    outputs: [{\n      returned: false,\n      param_type: ['array'],\n      name: 'components_',\n      docstring: 'Principal axes in feature space, representing the directions of maximum variance in the data. The components are sorted by ``explained_variance_``.'\n    }, {\n      returned: false,\n      param_type: ['array'],\n      name: 'explained_variance_',\n      docstring: 'The amount of variance explained by each of the selected components.  Equal to n_components largest eigenvalues of the covariance matrix of X.  .. versionadded:: 0.18'\n    }, {\n      returned: false,\n      param_type: ['array'],\n      name: 'explained_variance_ratio_',\n      docstring: 'Percentage of variance explained by each of the selected components.  If ``n_components`` is not set then all components are stored and the sum of the ratios is equal to 1.0.'\n    }, {\n      returned: false,\n      param_type: ['array'],\n      name: 'singular_values_',\n      docstring: 'The singular values corresponding to each of the selected components. The singular values are equal to the 2-norms of the ``n_components`` variables in the lower-dimensional space.'\n    }, {\n      returned: false,\n      param_type: ['array'],\n      name: 'mean_',\n      docstring: 'Per-feature empirical mean, estimated from the training set.  Equal to `X.mean(axis=0)`.'\n    }, {\n      returned: false,\n      param_type: ['int'],\n      name: 'n_components_',\n      docstring: \"The estimated number of components. When n_components is set to 'mle' or a number between 0 and 1 (with svd_solver == 'full') this number is estimated from input data. Otherwise it equals the parameter n_components, or the lesser value of n_features and n_samples if n_components is None.\"\n    }, {\n      returned: false,\n      param_type: ['float'],\n      name: 'noise_variance_',\n      docstring: 'The estimated noise covariance following the Probabilistic PCA model from Tipping and Bishop 1999. See \"Pattern Recognition and Machine Learning\" by C. Bishop, 12.2.1 p. 574 or http://www.miketipping.com/papers/met-mppca.pdf. It is required to compute the estimated data covariance and score samples.  Equal to the average of (min(n_features, n_samples) - n_components) smallest eigenvalues of the covariance matrix of X.'\n    }]\n  }, {\n    inputs: [{\n      is_optional: true,\n      param_type: ['int'],\n      name: 'n_components',\n      docstring: 'Desired dimensionality of output data. Must be strictly less than the number of features. The default value is useful for visualisation. For LSA, a value of 100 is recommended.',\n      options: null,\n      default_value: '2',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['str'],\n      name: 'algorithm',\n      docstring: 'SVD solver to use. Either \"arpack\" for the ARPACK wrapper in SciPy (scipy.sparse.linalg.svds), or \"randomized\" for the randomized algorithm due to Halko (2009).',\n      options: null,\n      default_value: '\"randomized\"',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int'],\n      name: 'n_iter',\n      docstring: 'Number of iterations for randomized SVD solver. Not used by ARPACK. The default is larger than the default in `randomized_svd` to handle sparse matrices that may have large slowly decaying spectrum.',\n      options: null,\n      default_value: '5',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['float'],\n      name: 'tol',\n      docstring: 'Tolerance for ARPACK. 0 means machine precision. Ignored by randomized SVD solver.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }],\n    name: 'TruncatedSVD',\n    nodes: [],\n    node_functions: [{\n      inputs: [],\n      outputs: [],\n      name: '__init__',\n      docstring: 'None'\n    }, {\n      inputs: [],\n      outputs: [],\n      name: '_get_param_names',\n      docstring: 'Get parameter names for the estimator'\n    }, {\n      inputs: [{\n        is_optional: false,\n        param_type: ['array'],\n        name: 'X',\n        docstring: 'Training data.',\n        options: null,\n        default_value: null,\n        expected_shape: '(n_samples, n_features)'\n      }, {\n        is_optional: true,\n        param_type: [null],\n        name: 'y',\n        docstring: 'Ignored',\n        options: null,\n        default_value: null,\n        expected_shape: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'fit',\n      docstring: 'Fit LSI model on training data X.\\n\\n        Parameters\\n        ----------\\n        X : {array-like, sparse matrix}, shape (n_samples, n_features)\\n            Training data.\\n\\n        y : Ignored\\n\\n        Returns\\n        -------\\n        self : object\\n            Returns the transformer object.\\n        '\n    }, {\n      inputs: [{\n        is_optional: false,\n        param_type: ['array'],\n        name: 'X',\n        docstring: 'Training data.',\n        options: null,\n        default_value: null,\n        expected_shape: '(n_samples, n_features)'\n      }, {\n        is_optional: true,\n        param_type: [null],\n        name: 'y',\n        docstring: 'Ignored',\n        options: null,\n        default_value: null,\n        expected_shape: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        returned: true,\n        param_type: ['array'],\n        name: 'X_new',\n        docstring: 'Reduced version of X. This will always be a dense array.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'fit_transform',\n      docstring: 'Fit LSI model to X and perform dimensionality reduction on X.\\n\\n        Parameters\\n        ----------\\n        X : {array-like, sparse matrix}, shape (n_samples, n_features)\\n            Training data.\\n\\n        y : Ignored\\n\\n        Returns\\n        -------\\n        X_new : array, shape (n_samples, n_components)\\n            Reduced version of X. This will always be a dense array.\\n        '\n    }, {\n      inputs: [{\n        is_optional: false,\n        param_type: ['array'],\n        name: 'X',\n        docstring: 'New data.',\n        options: null,\n        default_value: null,\n        expected_shape: '(n_samples, n_components)'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        returned: true,\n        param_type: ['array'],\n        name: 'X_original',\n        docstring: 'Note that this is always a dense array.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'inverse_transform',\n      docstring: 'Transform X back to its original space.\\n\\n        Returns an array X_original whose transform would be X.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_components)\\n            New data.\\n\\n        Returns\\n        -------\\n        X_original : array, shape (n_samples, n_features)\\n            Note that this is always a dense array.\\n        '\n    }, {\n      inputs: [{\n        is_optional: false,\n        param_type: ['array'],\n        name: 'X',\n        docstring: 'New data.',\n        options: null,\n        default_value: null,\n        expected_shape: '(n_samples, n_features)'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        returned: true,\n        param_type: ['array'],\n        name: 'X_new',\n        docstring: 'Reduced version of X. This will always be a dense array.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      name: 'transform',\n      docstring: 'Perform dimensionality reduction on X.\\n\\n        Parameters\\n        ----------\\n        X : {array-like, sparse matrix}, shape (n_samples, n_features)\\n            New data.\\n\\n        Returns\\n        -------\\n        X_new : array, shape (n_samples, n_components)\\n            Reduced version of X. This will always be a dense array.\\n        '\n    }],\n    docstring: 'Dimensionality reduction using truncated SVD (aka LSA).\\n\\n    This transformer performs linear dimensionality reduction by means of\\n    truncated singular value decomposition (SVD). Contrary to PCA, this\\n    estimator does not center the data before computing the singular value\\n    decomposition. This means it can work with scipy.sparse matrices\\n    efficiently.\\n\\n    In particular, truncated SVD works on term count/tf-idf matrices as\\n    returned by the vectorizers in sklearn.feature_extraction.text. In that\\n    context, it is known as latent semantic analysis (LSA).\\n\\n    This estimator supports two algorithms: a fast randomized SVD solver, and\\n    a \"naive\" algorithm that uses ARPACK as an eigensolver on (X * X.T) or\\n    (X.T * X), whichever is more efficient.\\n\\n    Read more in the :ref:`User Guide <LSA>`.\\n\\n    Parameters\\n    ----------\\n    n_components : int, default = 2\\n        Desired dimensionality of output data.\\n        Must be strictly less than the number of features.\\n        The default value is useful for visualisation. For LSA, a value of\\n        100 is recommended.\\n\\n    algorithm : string, default = \"randomized\"\\n        SVD solver to use. Either \"arpack\" for the ARPACK wrapper in SciPy\\n        (scipy.sparse.linalg.svds), or \"randomized\" for the randomized\\n        algorithm due to Halko (2009).\\n\\n    n_iter : int, optional (default 5)\\n        Number of iterations for randomized SVD solver. Not used by ARPACK.\\n        The default is larger than the default in `randomized_svd` to handle\\n        sparse matrices that may have large slowly decaying spectrum.\\n\\n    random_state : int, RandomState instance or None, optional, default = None\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`.\\n\\n    tol : float, optional\\n        Tolerance for ARPACK. 0 means machine precision. Ignored by randomized\\n        SVD solver.\\n\\n    Attributes\\n    ----------\\n    components_ : array, shape (n_components, n_features)\\n\\n    explained_variance_ : array, shape (n_components,)\\n        The variance of the training samples transformed by a projection to\\n        each component.\\n\\n    explained_variance_ratio_ : array, shape (n_components,)\\n        Percentage of variance explained by each of the selected components.\\n\\n    singular_values_ : array, shape (n_components,)\\n        The singular values corresponding to each of the selected components.\\n        The singular values are equal to the 2-norms of the ``n_components``\\n        variables in the lower-dimensional space.\\n\\n    Examples\\n    --------\\n    >>> from sklearn.decomposition import TruncatedSVD\\n    >>> from sklearn.random_projection import sparse_random_matrix\\n    >>> X = sparse_random_matrix(100, 100, density=0.01, random_state=42)\\n    >>> svd = TruncatedSVD(n_components=5, n_iter=7, random_state=42)\\n    >>> svd.fit(X)  # doctest: +NORMALIZE_WHITESPACE\\n    TruncatedSVD(algorithm=\\'randomized\\', n_components=5, n_iter=7,\\n            random_state=42, tol=0.0)\\n    >>> print(svd.explained_variance_ratio_)  # doctest: +ELLIPSIS\\n    [0.0606... 0.0584... 0.0497... 0.0434... 0.0372...]\\n    >>> print(svd.explained_variance_ratio_.sum())  # doctest: +ELLIPSIS\\n    0.249...\\n    >>> print(svd.singular_values_)  # doctest: +ELLIPSIS\\n    [2.5841... 2.5245... 2.3201... 2.1753... 2.0443...]\\n\\n    See also\\n    --------\\n    PCA\\n\\n    References\\n    ----------\\n    Finding structure with randomness: Stochastic algorithms for constructing\\n    approximate matrix decompositions\\n    Halko, et al., 2009 (arXiv:909) https://arxiv.org/pdf/0909.4061.pdf\\n\\n    Notes\\n    -----\\n    SVD suffers from a problem called \"sign indeterminacy\", which means the\\n    sign of the ``components_`` and the output from transform depend on the\\n    algorithm and random state. To work around this, fit instances of this\\n    class to data once, then keep the instance around to do transformations.\\n\\n    ',\n    outputs: [{\n      returned: false,\n      param_type: ['array'],\n      name: 'components_',\n      docstring: ''\n    }, {\n      returned: false,\n      param_type: ['array'],\n      name: 'explained_variance_',\n      docstring: 'The variance of the training samples transformed by a projection to each component.'\n    }, {\n      returned: false,\n      param_type: ['array'],\n      name: 'explained_variance_ratio_',\n      docstring: 'Percentage of variance explained by each of the selected components.'\n    }, {\n      returned: false,\n      param_type: ['array'],\n      name: 'singular_values_',\n      docstring: 'The singular values corresponding to each of the selected components. The singular values are equal to the 2-norms of the ``n_components`` variables in the lower-dimensional space.'\n    }]\n  }],\n  node_functions: [{\n    inputs: [{\n      is_optional: false,\n      param_type: ['array'],\n      name: 'X',\n      docstring: 'Data matrix.',\n      options: null,\n      default_value: null,\n      expected_shape: '(n_samples, n_features)'\n    }, {\n      is_optional: false,\n      param_type: ['int'],\n      name: 'n_components',\n      docstring: 'Number of dictionary atoms to extract.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['int'],\n      name: 'alpha',\n      docstring: 'Sparsity controlling parameter.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['int'],\n      name: 'max_iter',\n      docstring: 'Maximum number of iterations to perform.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['float'],\n      name: 'tol',\n      docstring: 'Tolerance for the stopping condition.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['LIST_VALID_OPTIONS'],\n      name: 'method',\n      docstring: 'lars: uses the least angle regression method to solve the lasso problem (linear_model.lars_path) cd: uses the coordinate descent method to compute the Lasso solution (linear_model.Lasso). Lars will be faster if the estimated components are sparse.',\n      options: ['lars', 'cd'],\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int', null],\n      name: 'n_jobs',\n      docstring: 'Number of parallel jobs to run. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.',\n      options: null,\n      default_value: 'None',\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['array'],\n      name: 'dict_init',\n      docstring: 'Initial value for the dictionary for warm restart scenarios.',\n      options: null,\n      default_value: null,\n      expected_shape: '(n_components, n_features),'\n    }, {\n      is_optional: false,\n      param_type: ['array'],\n      name: 'code_init',\n      docstring: 'Initial value for the sparse code for warm restart scenarios.',\n      options: null,\n      default_value: null,\n      expected_shape: '(n_samples, n_components),'\n    }, {\n      is_optional: true,\n      param_type: ['callable', null],\n      name: 'callback',\n      docstring: 'Callable that gets invoked every five iterations',\n      options: null,\n      default_value: 'None',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['bool'],\n      name: 'verbose',\n      docstring: 'To control the verbosity of the procedure.',\n      options: null,\n      default_value: 'False',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int', null],\n      name: 'random_state',\n      docstring: 'If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.',\n      options: null,\n      default_value: 'None',\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['bool'],\n      name: 'return_n_iter',\n      docstring: 'Whether or not to return the number of iterations.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['bool'],\n      name: 'positive_dict',\n      docstring: 'Whether to enforce positivity when finding the dictionary.  .. versionadded:: 0.20',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['bool'],\n      name: 'positive_code',\n      docstring: 'Whether to enforce positivity when finding the code.  .. versionadded:: 0.20',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      returned: true,\n      param_type: ['array'],\n      name: 'code',\n      docstring: 'The sparse code factor in the matrix factorization.'\n    }, {\n      returned: true,\n      param_type: ['array'],\n      name: 'dictionary',\n      docstring: 'The dictionary factor in the matrix factorization.'\n    }, {\n      returned: true,\n      param_type: ['array'],\n      name: 'errors',\n      docstring: 'Vector of errors at each iteration.'\n    }, {\n      returned: true,\n      param_type: ['int'],\n      name: 'n_iter',\n      docstring: 'Number of iterations run. Returned only if `return_n_iter` is set to True.'\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }],\n    name: 'dict_learning',\n    docstring: \"Solves a dictionary learning matrix factorization problem.\\n\\n    Finds the best dictionary and the corresponding sparse code for\\n    approximating the data matrix X by solving::\\n\\n        (U^*, V^*) = argmin 0.5 || X - U V ||_2^2 + alpha * || U ||_1\\n                     (U,V)\\n                    with || V_k ||_2 = 1 for all  0 <= k < n_components\\n\\n    where V is the dictionary and U is the sparse code.\\n\\n    Read more in the :ref:`User Guide <DictionaryLearning>`.\\n\\n    Parameters\\n    ----------\\n    X : array of shape (n_samples, n_features)\\n        Data matrix.\\n\\n    n_components : int,\\n        Number of dictionary atoms to extract.\\n\\n    alpha : int,\\n        Sparsity controlling parameter.\\n\\n    max_iter : int,\\n        Maximum number of iterations to perform.\\n\\n    tol : float,\\n        Tolerance for the stopping condition.\\n\\n    method : {'lars', 'cd'}\\n        lars: uses the least angle regression method to solve the lasso problem\\n        (linear_model.lars_path)\\n        cd: uses the coordinate descent method to compute the\\n        Lasso solution (linear_model.Lasso). Lars will be faster if\\n        the estimated components are sparse.\\n\\n    n_jobs : int or None, optional (default=None)\\n        Number of parallel jobs to run.\\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\\n        for more details.\\n\\n    dict_init : array of shape (n_components, n_features),\\n        Initial value for the dictionary for warm restart scenarios.\\n\\n    code_init : array of shape (n_samples, n_components),\\n        Initial value for the sparse code for warm restart scenarios.\\n\\n    callback : callable or None, optional (default: None)\\n        Callable that gets invoked every five iterations\\n\\n    verbose : bool, optional (default: False)\\n        To control the verbosity of the procedure.\\n\\n    random_state : int, RandomState instance or None, optional (default=None)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`.\\n\\n    return_n_iter : bool\\n        Whether or not to return the number of iterations.\\n\\n    positive_dict : bool\\n        Whether to enforce positivity when finding the dictionary.\\n\\n        .. versionadded:: 0.20\\n\\n    positive_code : bool\\n        Whether to enforce positivity when finding the code.\\n\\n        .. versionadded:: 0.20\\n\\n    Returns\\n    -------\\n    code : array of shape (n_samples, n_components)\\n        The sparse code factor in the matrix factorization.\\n\\n    dictionary : array of shape (n_components, n_features),\\n        The dictionary factor in the matrix factorization.\\n\\n    errors : array\\n        Vector of errors at each iteration.\\n\\n    n_iter : int\\n        Number of iterations run. Returned only if `return_n_iter` is\\n        set to True.\\n\\n    See also\\n    --------\\n    dict_learning_online\\n    DictionaryLearning\\n    MiniBatchDictionaryLearning\\n    SparsePCA\\n    MiniBatchSparsePCA\\n    \"\n  }, {\n    inputs: [{\n      is_optional: false,\n      param_type: ['array'],\n      name: 'X',\n      docstring: 'Data matrix.',\n      options: null,\n      default_value: null,\n      expected_shape: '(n_samples, n_features)'\n    }, {\n      is_optional: false,\n      param_type: ['int'],\n      name: 'n_components',\n      docstring: 'Number of dictionary atoms to extract.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['float'],\n      name: 'alpha',\n      docstring: 'Sparsity controlling parameter.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['int'],\n      name: 'n_iter',\n      docstring: 'Number of iterations to perform.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['bool'],\n      name: 'return_code',\n      docstring: 'Whether to also return the code U or just the dictionary V.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['array'],\n      name: 'dict_init',\n      docstring: 'Initial value for the dictionary for warm restart scenarios.',\n      options: null,\n      default_value: null,\n      expected_shape: '(n_components, n_features),'\n    }, {\n      is_optional: true,\n      param_type: ['callable', null],\n      name: 'callback',\n      docstring: 'callable that gets invoked every five iterations',\n      options: null,\n      default_value: 'None',\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['int'],\n      name: 'batch_size',\n      docstring: 'The number of samples to take in each batch.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['bool'],\n      name: 'verbose',\n      docstring: 'To control the verbosity of the procedure.',\n      options: null,\n      default_value: 'False',\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['bool'],\n      name: 'shuffle',\n      docstring: 'Whether to shuffle the data before splitting it in batches.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int', null],\n      name: 'n_jobs',\n      docstring: 'Number of parallel jobs to run. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.',\n      options: null,\n      default_value: 'None',\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['LIST_VALID_OPTIONS'],\n      name: 'method',\n      docstring: 'lars: uses the least angle regression method to solve the lasso problem (linear_model.lars_path) cd: uses the coordinate descent method to compute the Lasso solution (linear_model.Lasso). Lars will be faster if the estimated components are sparse.',\n      options: ['lars', 'cd'],\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int'],\n      name: 'iter_offset',\n      docstring: 'Number of previous iterations completed on the dictionary used for initialization.',\n      options: null,\n      default_value: '0',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int', null],\n      name: 'random_state',\n      docstring: 'If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.',\n      options: null,\n      default_value: 'None',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['bool'],\n      name: 'return_inner_stats',\n      docstring: 'Return the inner statistics A (dictionary covariance) and B (data approximation). Useful to restart the algorithm in an online setting. If return_inner_stats is True, return_code is ignored',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['array', 'tuple'],\n      name: 'inner_stats',\n      docstring: 'Inner sufficient statistics that are kept by the algorithm. Passing them at initialization is useful in online settings, to avoid loosing the history of the evolution. A (n_components, n_components) is the dictionary covariance matrix. B (n_features, n_components) is the data approximation matrix',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['bool'],\n      name: 'return_n_iter',\n      docstring: 'Whether or not to return the number of iterations.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['bool'],\n      name: 'positive_dict',\n      docstring: 'Whether to enforce positivity when finding the dictionary.  .. versionadded:: 0.20',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['bool'],\n      name: 'positive_code',\n      docstring: 'Whether to enforce positivity when finding the code.  .. versionadded:: 0.20',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      returned: true,\n      param_type: ['array'],\n      name: 'code',\n      docstring: 'the sparse code (only returned if `return_code=True`)'\n    }, {\n      returned: true,\n      param_type: ['array'],\n      name: 'dictionary',\n      docstring: 'the solutions to the dictionary learning problem'\n    }, {\n      returned: true,\n      param_type: ['int'],\n      name: 'n_iter',\n      docstring: 'Number of iterations run. Returned only if `return_n_iter` is set to `True`.'\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }],\n    name: 'dict_learning_online',\n    docstring: \"Solves a dictionary learning matrix factorization problem online.\\n\\n    Finds the best dictionary and the corresponding sparse code for\\n    approximating the data matrix X by solving::\\n\\n        (U^*, V^*) = argmin 0.5 || X - U V ||_2^2 + alpha * || U ||_1\\n                     (U,V)\\n                     with || V_k ||_2 = 1 for all  0 <= k < n_components\\n\\n    where V is the dictionary and U is the sparse code. This is\\n    accomplished by repeatedly iterating over mini-batches by slicing\\n    the input data.\\n\\n    Read more in the :ref:`User Guide <DictionaryLearning>`.\\n\\n    Parameters\\n    ----------\\n    X : array of shape (n_samples, n_features)\\n        Data matrix.\\n\\n    n_components : int,\\n        Number of dictionary atoms to extract.\\n\\n    alpha : float,\\n        Sparsity controlling parameter.\\n\\n    n_iter : int,\\n        Number of iterations to perform.\\n\\n    return_code : boolean,\\n        Whether to also return the code U or just the dictionary V.\\n\\n    dict_init : array of shape (n_components, n_features),\\n        Initial value for the dictionary for warm restart scenarios.\\n\\n    callback : callable or None, optional (default: None)\\n        callable that gets invoked every five iterations\\n\\n    batch_size : int,\\n        The number of samples to take in each batch.\\n\\n    verbose : bool, optional (default: False)\\n        To control the verbosity of the procedure.\\n\\n    shuffle : boolean,\\n        Whether to shuffle the data before splitting it in batches.\\n\\n    n_jobs : int or None, optional (default=None)\\n        Number of parallel jobs to run.\\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\\n        for more details.\\n\\n    method : {'lars', 'cd'}\\n        lars: uses the least angle regression method to solve the lasso problem\\n        (linear_model.lars_path)\\n        cd: uses the coordinate descent method to compute the\\n        Lasso solution (linear_model.Lasso). Lars will be faster if\\n        the estimated components are sparse.\\n\\n    iter_offset : int, default 0\\n        Number of previous iterations completed on the dictionary used for\\n        initialization.\\n\\n    random_state : int, RandomState instance or None, optional (default=None)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`.\\n\\n    return_inner_stats : boolean, optional\\n        Return the inner statistics A (dictionary covariance) and B\\n        (data approximation). Useful to restart the algorithm in an\\n        online setting. If return_inner_stats is True, return_code is\\n        ignored\\n\\n    inner_stats : tuple of (A, B) ndarrays\\n        Inner sufficient statistics that are kept by the algorithm.\\n        Passing them at initialization is useful in online settings, to\\n        avoid loosing the history of the evolution.\\n        A (n_components, n_components) is the dictionary covariance matrix.\\n        B (n_features, n_components) is the data approximation matrix\\n\\n    return_n_iter : bool\\n        Whether or not to return the number of iterations.\\n\\n    positive_dict : bool\\n        Whether to enforce positivity when finding the dictionary.\\n\\n        .. versionadded:: 0.20\\n\\n    positive_code : bool\\n        Whether to enforce positivity when finding the code.\\n\\n        .. versionadded:: 0.20\\n\\n    Returns\\n    -------\\n    code : array of shape (n_samples, n_components),\\n        the sparse code (only returned if `return_code=True`)\\n\\n    dictionary : array of shape (n_components, n_features),\\n        the solutions to the dictionary learning problem\\n\\n    n_iter : int\\n        Number of iterations run. Returned only if `return_n_iter` is\\n        set to `True`.\\n\\n    See also\\n    --------\\n    dict_learning\\n    DictionaryLearning\\n    MiniBatchDictionaryLearning\\n    SparsePCA\\n    MiniBatchSparsePCA\\n\\n    \"\n  }, {\n    inputs: [{\n      is_optional: false,\n      param_type: ['array'],\n      name: 'X',\n      docstring: 'Training vector, where n_samples is the number of samples and n_features is the number of features.',\n      options: null,\n      default_value: null,\n      expected_shape: '(n_samples, n_features)'\n    }, {\n      is_optional: true,\n      param_type: ['int'],\n      name: 'n_components',\n      docstring: 'Number of components to extract. If None no dimension reduction is performed.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['LIST_VALID_OPTIONS'],\n      name: 'algorithm',\n      docstring: 'Apply a parallel or deflational FASTICA algorithm.',\n      options: ['parallel', 'deflation', 'optional'],\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['bool'],\n      name: 'whiten',\n      docstring: 'If True perform an initial whitening of the data. If False, the data is assumed to have already been preprocessed: it should be centered, normed and white. Otherwise you will get incorrect results. In this case the parameter n_components will be ignored.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['str'],\n      name: 'fun',\n      docstring: \"The functional form of the G function used in the approximation to neg-entropy. Could be either 'logcosh', 'exp', or 'cube'. You can also provide your own function. It should return a tuple containing the value of the function, and of its derivative, in the point. The derivative should be averaged along its last dimension. Example:  def my_g(x):     return x ** 3, np.mean(3 * x ** 2, axis=-1)\",\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['dict'],\n      name: 'fun_args',\n      docstring: \"Arguments to send to the functional form. If empty or None and if fun='logcosh', fun_args will take value {'alpha' : 1.0}\",\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int'],\n      name: 'max_iter',\n      docstring: 'Maximum number of iterations to perform.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['float'],\n      name: 'tol',\n      docstring: 'A positive scalar giving the tolerance at which the un-mixing matrix is considered to have converged.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['array'],\n      name: 'w_init',\n      docstring: \"Initial un-mixing array of dimension (n.comp,n.comp). If None (default) then an array of normal r.v.'s is used.\",\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int', null],\n      name: 'random_state',\n      docstring: 'If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.',\n      options: null,\n      default_value: 'None',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['bool'],\n      name: 'return_X_mean',\n      docstring: 'If True, X_mean is returned too.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['bool'],\n      name: 'compute_sources',\n      docstring: 'If False, sources are not computed, but only the rotation matrix. This can save memory when working with big data. Defaults to True.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['bool'],\n      name: 'return_n_iter',\n      docstring: 'Whether or not to return the number of iterations.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      returned: true,\n      param_type: ['LIST_VALID_OPTIONS', 'array', null],\n      name: 'K',\n      docstring: \"If whiten is 'True', K is the pre-whitening matrix that projects data onto the first n_components principal components. If whiten is 'False', K is 'None'.\"\n    }, {\n      returned: true,\n      param_type: ['array'],\n      name: 'W',\n      docstring: 'Estimated un-mixing matrix. The mixing matrix can be obtained by::      w = np.dot(W, K.T)     A = w.T * (w * w.T).I'\n    }, {\n      returned: true,\n      param_type: ['LIST_VALID_OPTIONS', 'array', null],\n      name: 'S',\n      docstring: 'Estimated source matrix'\n    }, {\n      returned: true,\n      param_type: ['array'],\n      name: 'X_mean',\n      docstring: 'The mean over features. Returned only if return_X_mean is True.'\n    }, {\n      returned: true,\n      param_type: ['int'],\n      name: 'n_iter',\n      docstring: 'If the algorithm is \"deflation\", n_iter is the maximum number of iterations run across all components. Else they are just the number of iterations taken to converge. This is returned only when return_n_iter is set to `True`.'\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }],\n    name: 'fastica',\n    docstring: \"Perform Fast Independent Component Analysis.\\n\\n    Read more in the :ref:`User Guide <ICA>`.\\n\\n    Parameters\\n    ----------\\n    X : array-like, shape (n_samples, n_features)\\n        Training vector, where n_samples is the number of samples and\\n        n_features is the number of features.\\n\\n    n_components : int, optional\\n        Number of components to extract. If None no dimension reduction\\n        is performed.\\n\\n    algorithm : {'parallel', 'deflation'}, optional\\n        Apply a parallel or deflational FASTICA algorithm.\\n\\n    whiten : boolean, optional\\n        If True perform an initial whitening of the data.\\n        If False, the data is assumed to have already been\\n        preprocessed: it should be centered, normed and white.\\n        Otherwise you will get incorrect results.\\n        In this case the parameter n_components will be ignored.\\n\\n    fun : string or function, optional. Default: 'logcosh'\\n        The functional form of the G function used in the\\n        approximation to neg-entropy. Could be either 'logcosh', 'exp',\\n        or 'cube'.\\n        You can also provide your own function. It should return a tuple\\n        containing the value of the function, and of its derivative, in the\\n        point. The derivative should be averaged along its last dimension.\\n        Example:\\n\\n        def my_g(x):\\n            return x ** 3, np.mean(3 * x ** 2, axis=-1)\\n\\n    fun_args : dictionary, optional\\n        Arguments to send to the functional form.\\n        If empty or None and if fun='logcosh', fun_args will take value\\n        {'alpha' : 1.0}\\n\\n    max_iter : int, optional\\n        Maximum number of iterations to perform.\\n\\n    tol : float, optional\\n        A positive scalar giving the tolerance at which the\\n        un-mixing matrix is considered to have converged.\\n\\n    w_init : (n_components, n_components) array, optional\\n        Initial un-mixing array of dimension (n.comp,n.comp).\\n        If None (default) then an array of normal r.v.'s is used.\\n\\n    random_state : int, RandomState instance or None, optional (default=None)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`.\\n\\n    return_X_mean : bool, optional\\n        If True, X_mean is returned too.\\n\\n    compute_sources : bool, optional\\n        If False, sources are not computed, but only the rotation matrix.\\n        This can save memory when working with big data. Defaults to True.\\n\\n    return_n_iter : bool, optional\\n        Whether or not to return the number of iterations.\\n\\n    Returns\\n    -------\\n    K : array, shape (n_components, n_features) | None.\\n        If whiten is 'True', K is the pre-whitening matrix that projects data\\n        onto the first n_components principal components. If whiten is 'False',\\n        K is 'None'.\\n\\n    W : array, shape (n_components, n_components)\\n        Estimated un-mixing matrix.\\n        The mixing matrix can be obtained by::\\n\\n            w = np.dot(W, K.T)\\n            A = w.T * (w * w.T).I\\n\\n    S : array, shape (n_samples, n_components) | None\\n        Estimated source matrix\\n\\n    X_mean : array, shape (n_features, )\\n        The mean over features. Returned only if return_X_mean is True.\\n\\n    n_iter : int\\n        If the algorithm is \\\"deflation\\\", n_iter is the\\n        maximum number of iterations run across all components. Else\\n        they are just the number of iterations taken to converge. This is\\n        returned only when return_n_iter is set to `True`.\\n\\n    Notes\\n    -----\\n\\n    The data matrix X is considered to be a linear combination of\\n    non-Gaussian (independent) components i.e. X = AS where columns of S\\n    contain the independent components and A is a linear mixing\\n    matrix. In short ICA attempts to `un-mix' the data by estimating an\\n    un-mixing matrix W where ``S = W K X.``\\n\\n    This implementation was originally made for data of shape\\n    [n_features, n_samples]. Now the input is transposed\\n    before the algorithm is applied. This makes it slightly\\n    faster for Fortran-ordered input.\\n\\n    Implemented using FastICA:\\n    `A. Hyvarinen and E. Oja, Independent Component Analysis:\\n    Algorithms and Applications, Neural Networks, 13(4-5), 2000,\\n    pp. 411-430`\\n\\n    \"\n  }, {\n    inputs: [{\n      is_optional: false,\n      param_type: ['array'],\n      name: 'X',\n      docstring: 'Constant matrix.',\n      options: null,\n      default_value: null,\n      expected_shape: '(n_samples, n_features)'\n    }, {\n      is_optional: false,\n      param_type: ['array'],\n      name: 'W',\n      docstring: \"If init='custom', it is used as initial guess for the solution.\",\n      options: null,\n      default_value: null,\n      expected_shape: '(n_samples, n_components)'\n    }, {\n      is_optional: false,\n      param_type: ['array'],\n      name: 'H',\n      docstring: \"If init='custom', it is used as initial guess for the solution. If update_H=False, it is used as a constant, to solve for W only.\",\n      options: null,\n      default_value: null,\n      expected_shape: '(n_components, n_features)'\n    }, {\n      is_optional: false,\n      param_type: ['int'],\n      name: 'n_components',\n      docstring: 'Number of components, if n_components is not set all features are kept.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['LIST_VALID_OPTIONS', null],\n      name: 'init',\n      docstring: \"Method used to initialize the procedure. Default: 'random'. Valid options:  - 'random': non-negative random matrices, scaled with:     sqrt(X.mean() / n_components)  - 'nndsvd': Nonnegative Double Singular Value Decomposition (NNDSVD)     initialization (better for sparseness)  - 'nndsvda': NNDSVD with zeros filled with the average of X     (better when sparsity is not desired)  - 'nndsvdar': NNDSVD with zeros filled with small random values     (generally faster, less accurate alternative to NNDSVDa     for when sparsity is not desired)  - 'custom': use custom matrices W and H\",\n      options: [' None ', \" 'random' \", \" 'nndsvd' \", \" 'nndsvda' \", \" 'nndsvdar' \", \" 'custom\"],\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['bool'],\n      name: 'update_H',\n      docstring: 'Set to True, both W and H will be estimated from initial guesses. Set to False, only W will be estimated.',\n      options: null,\n      default_value: 'True',\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['LIST_VALID_OPTIONS'],\n      name: 'solver',\n      docstring: \"Numerical solver to use: 'cd' is a Coordinate Descent solver that uses Fast Hierarchical     Alternating Least Squares (Fast HALS). 'mu' is a Multiplicative Update solver.  .. versionadded:: 0.17    Coordinate Descent solver.  .. versionadded:: 0.19    Multiplicative Update solver.\",\n      options: [\"cd' \", \" 'mu\"],\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['float', 'str'],\n      name: 'beta_loss',\n      docstring: \"String must be in {'frobenius', 'kullback-leibler', 'itakura-saito'}. Beta divergence to be minimized, measuring the distance between X and the dot product WH. Note that values different from 'frobenius' (or 2) and 'kullback-leibler' (or 1) lead to significantly slower fits. Note that for beta_loss <= 0 (or 'itakura-saito'), the input matrix X cannot contain zeros. Used only in 'mu' solver.  .. versionadded:: 0.19\",\n      options: null,\n      default_value: 'frobenius',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['float'],\n      name: 'tol',\n      docstring: 'Tolerance of the stopping condition.',\n      options: null,\n      default_value: '1e-4',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int'],\n      name: 'max_iter',\n      docstring: 'Maximum number of iterations before timing out.',\n      options: null,\n      default_value: '200',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['float'],\n      name: 'alpha',\n      docstring: 'Constant that multiplies the regularization terms.',\n      options: null,\n      default_value: '0.',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['float'],\n      name: 'l1_ratio',\n      docstring: 'The regularization mixing parameter, with 0 <= l1_ratio <= 1. For l1_ratio = 0 the penalty is an elementwise L2 penalty (aka Frobenius Norm). For l1_ratio = 1 it is an elementwise L1 penalty. For 0 < l1_ratio < 1, the penalty is a combination of L1 and L2.',\n      options: null,\n      default_value: '0.',\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['LIST_VALID_OPTIONS', null],\n      name: 'regularization',\n      docstring: 'Select whether the regularization affects the components (H), the transformation (W), both or none of them.',\n      options: [\"both' \", \" 'components' \", \" 'transformation' \", ' None'],\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int', null],\n      name: 'random_state',\n      docstring: 'If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.',\n      options: null,\n      default_value: 'None',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int'],\n      name: 'verbose',\n      docstring: 'The verbosity level.',\n      options: null,\n      default_value: '0',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['bool'],\n      name: 'shuffle',\n      docstring: 'If true, randomize the order of coordinates in the CD solver.',\n      options: null,\n      default_value: 'False',\n      expected_shape: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      returned: true,\n      param_type: ['array'],\n      name: 'W',\n      docstring: 'Solution to the non-negative least squares problem.'\n    }, {\n      returned: true,\n      param_type: ['array'],\n      name: 'H',\n      docstring: 'Solution to the non-negative least squares problem.'\n    }, {\n      returned: true,\n      param_type: ['int'],\n      name: 'n_iter',\n      docstring: 'Actual number of iterations.'\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }],\n    name: 'non_negative_factorization',\n    docstring: \"Compute Non-negative Matrix Factorization (NMF)\\n\\n    Find two non-negative matrices (W, H) whose product approximates the non-\\n    negative matrix X. This factorization can be used for example for\\n    dimensionality reduction, source separation or topic extraction.\\n\\n    The objective function is::\\n\\n        0.5 * ||X - WH||_Fro^2\\n        + alpha * l1_ratio * ||vec(W)||_1\\n        + alpha * l1_ratio * ||vec(H)||_1\\n        + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\\n        + 0.5 * alpha * (1 - l1_ratio) * ||H||_Fro^2\\n\\n    Where::\\n\\n        ||A||_Fro^2 = \\\\sum_{i,j} A_{ij}^2 (Frobenius norm)\\n        ||vec(A)||_1 = \\\\sum_{i,j} abs(A_{ij}) (Elementwise L1 norm)\\n\\n    For multiplicative-update ('mu') solver, the Frobenius norm\\n    (0.5 * ||X - WH||_Fro^2) can be changed into another beta-divergence loss,\\n    by changing the beta_loss parameter.\\n\\n    The objective function is minimized with an alternating minimization of W\\n    and H. If H is given and update_H=False, it solves for W only.\\n\\n    Parameters\\n    ----------\\n    X : array-like, shape (n_samples, n_features)\\n        Constant matrix.\\n\\n    W : array-like, shape (n_samples, n_components)\\n        If init='custom', it is used as initial guess for the solution.\\n\\n    H : array-like, shape (n_components, n_features)\\n        If init='custom', it is used as initial guess for the solution.\\n        If update_H=False, it is used as a constant, to solve for W only.\\n\\n    n_components : integer\\n        Number of components, if n_components is not set all features\\n        are kept.\\n\\n    init :  None | 'random' | 'nndsvd' | 'nndsvda' | 'nndsvdar' | 'custom'\\n        Method used to initialize the procedure.\\n        Default: 'random'.\\n        Valid options:\\n\\n        - 'random': non-negative random matrices, scaled with:\\n            sqrt(X.mean() / n_components)\\n\\n        - 'nndsvd': Nonnegative Double Singular Value Decomposition (NNDSVD)\\n            initialization (better for sparseness)\\n\\n        - 'nndsvda': NNDSVD with zeros filled with the average of X\\n            (better when sparsity is not desired)\\n\\n        - 'nndsvdar': NNDSVD with zeros filled with small random values\\n            (generally faster, less accurate alternative to NNDSVDa\\n            for when sparsity is not desired)\\n\\n        - 'custom': use custom matrices W and H\\n\\n    update_H : boolean, default: True\\n        Set to True, both W and H will be estimated from initial guesses.\\n        Set to False, only W will be estimated.\\n\\n    solver : 'cd' | 'mu'\\n        Numerical solver to use:\\n        'cd' is a Coordinate Descent solver that uses Fast Hierarchical\\n            Alternating Least Squares (Fast HALS).\\n        'mu' is a Multiplicative Update solver.\\n\\n        .. versionadded:: 0.17\\n           Coordinate Descent solver.\\n\\n        .. versionadded:: 0.19\\n           Multiplicative Update solver.\\n\\n    beta_loss : float or string, default 'frobenius'\\n        String must be in {'frobenius', 'kullback-leibler', 'itakura-saito'}.\\n        Beta divergence to be minimized, measuring the distance between X\\n        and the dot product WH. Note that values different from 'frobenius'\\n        (or 2) and 'kullback-leibler' (or 1) lead to significantly slower\\n        fits. Note that for beta_loss <= 0 (or 'itakura-saito'), the input\\n        matrix X cannot contain zeros. Used only in 'mu' solver.\\n\\n        .. versionadded:: 0.19\\n\\n    tol : float, default: 1e-4\\n        Tolerance of the stopping condition.\\n\\n    max_iter : integer, default: 200\\n        Maximum number of iterations before timing out.\\n\\n    alpha : double, default: 0.\\n        Constant that multiplies the regularization terms.\\n\\n    l1_ratio : double, default: 0.\\n        The regularization mixing parameter, with 0 <= l1_ratio <= 1.\\n        For l1_ratio = 0 the penalty is an elementwise L2 penalty\\n        (aka Frobenius Norm).\\n        For l1_ratio = 1 it is an elementwise L1 penalty.\\n        For 0 < l1_ratio < 1, the penalty is a combination of L1 and L2.\\n\\n    regularization : 'both' | 'components' | 'transformation' | None\\n        Select whether the regularization affects the components (H), the\\n        transformation (W), both or none of them.\\n\\n    random_state : int, RandomState instance or None, optional, default: None\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`.\\n\\n    verbose : integer, default: 0\\n        The verbosity level.\\n\\n    shuffle : boolean, default: False\\n        If true, randomize the order of coordinates in the CD solver.\\n\\n    Returns\\n    -------\\n    W : array-like, shape (n_samples, n_components)\\n        Solution to the non-negative least squares problem.\\n\\n    H : array-like, shape (n_components, n_features)\\n        Solution to the non-negative least squares problem.\\n\\n    n_iter : int\\n        Actual number of iterations.\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> X = np.array([[1,1], [2, 1], [3, 1.2], [4, 1], [5, 0.8], [6, 1]])\\n    >>> from sklearn.decomposition import non_negative_factorization\\n    >>> W, H, n_iter = non_negative_factorization(X, n_components=2,\\n    ... init='random', random_state=0)\\n\\n    References\\n    ----------\\n    Cichocki, Andrzej, and P. H. A. N. Anh-Huy. \\\"Fast local algorithms for\\n    large scale nonnegative matrix and tensor factorizations.\\\"\\n    IEICE transactions on fundamentals of electronics, communications and\\n    computer sciences 92.3: 708-721, 2009.\\n\\n    Fevotte, C., & Idier, J. (2011). Algorithms for nonnegative matrix\\n    factorization with the beta-divergence. Neural Computation, 23(9).\\n    \"\n  }, {\n    inputs: [{\n      is_optional: false,\n      param_type: ['array'],\n      name: 'M',\n      docstring: 'Matrix to decompose',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['int'],\n      name: 'n_components',\n      docstring: 'Number of singular values and vectors to extract.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int'],\n      name: 'n_oversamples',\n      docstring: 'Additional number of random vectors to sample the range of M so as to ensure proper conditioning. The total number of random vectors used to find the range of M is n_components + n_oversamples. Smaller number can improve speed but can negatively impact the quality of approximation of singular vectors and singular values.',\n      options: null,\n      default_value: '10',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int'],\n      name: 'n_iter',\n      docstring: \"Number of power iterations. It can be used to deal with very noisy problems. When 'auto', it is set to 4, unless `n_components` is small (< .1 * min(X.shape)) `n_iter` in which case is set to 7. This improves precision with few components.  .. versionchanged:: 0.18\",\n      options: null,\n      default_value: 'auto',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: [null],\n      name: 'power_iteration_normalizer',\n      docstring: \"Whether the power iterations are normalized with step-by-step QR factorization (the slowest but most accurate), 'none' (the fastest but numerically unstable when `n_iter` is large, e.g. typically 5 or larger), or 'LU' factorization (numerically stable but can lose slightly in accuracy). The 'auto' mode applies no normalization if `n_iter` <= 2 and switches to LU otherwise.  .. versionadded:: 0.18\",\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: [null],\n      name: 'transpose',\n      docstring: \"Whether the algorithm should be applied to M.T instead of M. The result should approximately be the same. The 'auto' mode will trigger the transposition if M.shape[1] > M.shape[0] since this implementation of randomized SVD tend to be a little faster in that case.  .. versionchanged:: 0.18\",\n      options: null,\n      default_value: '',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['bool'],\n      name: 'flip_sign',\n      docstring: 'The output of a singular value decomposition is only unique up to a permutation of the signs of the singular vectors. If `flip_sign` is set to `True`, the sign ambiguity is resolved by making the largest loadings for each component in the left singular vectors positive.',\n      options: null,\n      default_value: '',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int', null],\n      name: 'random_state',\n      docstring: 'The seed of the pseudo random number generator to use when shuffling the data.  If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.',\n      options: null,\n      default_value: 'None',\n      expected_shape: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }],\n    name: 'randomized_svd',\n    docstring: \"Computes a truncated randomized SVD\\n\\n    Parameters\\n    ----------\\n    M : ndarray or sparse matrix\\n        Matrix to decompose\\n\\n    n_components : int\\n        Number of singular values and vectors to extract.\\n\\n    n_oversamples : int (default is 10)\\n        Additional number of random vectors to sample the range of M so as\\n        to ensure proper conditioning. The total number of random vectors\\n        used to find the range of M is n_components + n_oversamples. Smaller\\n        number can improve speed but can negatively impact the quality of\\n        approximation of singular vectors and singular values.\\n\\n    n_iter : int or 'auto' (default is 'auto')\\n        Number of power iterations. It can be used to deal with very noisy\\n        problems. When 'auto', it is set to 4, unless `n_components` is small\\n        (< .1 * min(X.shape)) `n_iter` in which case is set to 7.\\n        This improves precision with few components.\\n\\n        .. versionchanged:: 0.18\\n\\n    power_iteration_normalizer : 'auto' (default), 'QR', 'LU', 'none'\\n        Whether the power iterations are normalized with step-by-step\\n        QR factorization (the slowest but most accurate), 'none'\\n        (the fastest but numerically unstable when `n_iter` is large, e.g.\\n        typically 5 or larger), or 'LU' factorization (numerically stable\\n        but can lose slightly in accuracy). The 'auto' mode applies no\\n        normalization if `n_iter` <= 2 and switches to LU otherwise.\\n\\n        .. versionadded:: 0.18\\n\\n    transpose : True, False or 'auto' (default)\\n        Whether the algorithm should be applied to M.T instead of M. The\\n        result should approximately be the same. The 'auto' mode will\\n        trigger the transposition if M.shape[1] > M.shape[0] since this\\n        implementation of randomized SVD tend to be a little faster in that\\n        case.\\n\\n        .. versionchanged:: 0.18\\n\\n    flip_sign : boolean, (True by default)\\n        The output of a singular value decomposition is only unique up to a\\n        permutation of the signs of the singular vectors. If `flip_sign` is\\n        set to `True`, the sign ambiguity is resolved by making the largest\\n        loadings for each component in the left singular vectors positive.\\n\\n    random_state : int, RandomState instance or None, optional (default=None)\\n        The seed of the pseudo random number generator to use when shuffling\\n        the data.  If int, random_state is the seed used by the random number\\n        generator; If RandomState instance, random_state is the random number\\n        generator; If None, the random number generator is the RandomState\\n        instance used by `np.random`.\\n\\n    Notes\\n    -----\\n    This algorithm finds a (usually very good) approximate truncated\\n    singular value decomposition using randomization to speed up the\\n    computations. It is particularly fast on large matrices on which\\n    you wish to extract only a small number of components. In order to\\n    obtain further speed up, `n_iter` can be set <=2 (at the cost of\\n    loss of precision).\\n\\n    References\\n    ----------\\n    * Finding structure with randomness: Stochastic algorithms for constructing\\n      approximate matrix decompositions\\n      Halko, et al., 2009 https://arxiv.org/abs/0909.4061\\n\\n    * A randomized algorithm for the decomposition of matrices\\n      Per-Gunnar Martinsson, Vladimir Rokhlin and Mark Tygert\\n\\n    * An implementation of a randomized algorithm for principal component\\n      analysis\\n      A. Szlam et al. 2014\\n    \"\n  }, {\n    inputs: [{\n      is_optional: false,\n      param_type: ['array'],\n      name: 'X',\n      docstring: 'Data matrix',\n      options: null,\n      default_value: null,\n      expected_shape: '(n_samples, n_features)'\n    }, {\n      is_optional: false,\n      param_type: ['array'],\n      name: 'dictionary',\n      docstring: 'The dictionary matrix against which to solve the sparse coding of the data. Some of the algorithms assume normalized rows for meaningful output.',\n      options: null,\n      default_value: null,\n      expected_shape: '(n_components, n_features)'\n    }, {\n      is_optional: false,\n      param_type: ['array'],\n      name: 'gram',\n      docstring: \"Precomputed Gram matrix, dictionary * dictionary'\",\n      options: null,\n      default_value: null,\n      expected_shape: '(n_components, n_components)'\n    }, {\n      is_optional: false,\n      param_type: ['array'],\n      name: 'cov',\n      docstring: \"Precomputed covariance, dictionary' * X\",\n      options: null,\n      default_value: null,\n      expected_shape: '(n_components, n_samples)'\n    }, {\n      is_optional: false,\n      param_type: ['LIST_VALID_OPTIONS'],\n      name: 'algorithm',\n      docstring: \"lars: uses the least angle regression method (linear_model.lars_path) lasso_lars: uses Lars to compute the Lasso solution lasso_cd: uses the coordinate descent method to compute the Lasso solution (linear_model.Lasso). lasso_lars will be faster if the estimated components are sparse. omp: uses orthogonal matching pursuit to estimate the sparse solution threshold: squashes to zero all coefficients less than alpha from the projection dictionary * X'\",\n      options: ['lasso_lars', 'lasso_cd', 'lars', 'omp', 'threshold'],\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int'],\n      name: 'n_nonzero_coefs',\n      docstring: \"Number of nonzero coefficients to target in each column of the solution. This is only used by `algorithm='lars'` and `algorithm='omp'` and is overridden by `alpha` in the `omp` case.\",\n      options: null,\n      default_value: '',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['float'],\n      name: 'alpha',\n      docstring: \"If `algorithm='lasso_lars'` or `algorithm='lasso_cd'`, `alpha` is the penalty applied to the L1 norm. If `algorithm='threshold'`, `alpha` is the absolute value of the threshold below which coefficients will be squashed to zero. If `algorithm='omp'`, `alpha` is the tolerance parameter: the value of the reconstruction error targeted. In this case, it overrides `n_nonzero_coefs`.\",\n      options: null,\n      default_value: '',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['bool'],\n      name: 'copy_cov',\n      docstring: 'Whether to copy the precomputed covariance matrix; if False, it may be overwritten.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: false,\n      param_type: ['array'],\n      name: 'init',\n      docstring: \"Initialization value of the sparse codes. Only used if `algorithm='lasso_cd'`.\",\n      options: null,\n      default_value: null,\n      expected_shape: '(n_samples, n_components)'\n    }, {\n      is_optional: true,\n      param_type: ['int'],\n      name: 'max_iter',\n      docstring: \"Maximum number of iterations to perform if `algorithm='lasso_cd'`.\",\n      options: null,\n      default_value: '',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int', null],\n      name: 'n_jobs',\n      docstring: 'Number of parallel jobs to run. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.',\n      options: null,\n      default_value: 'None',\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['bool'],\n      name: 'check_input',\n      docstring: 'If False, the input arrays X and dictionary will not be checked.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['int'],\n      name: 'verbose',\n      docstring: 'Controls the verbosity; the higher, the more messages. Defaults to 0.',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      is_optional: true,\n      param_type: ['bool'],\n      name: 'positive',\n      docstring: 'Whether to enforce positivity when finding the encoding.  .. versionadded:: 0.20',\n      options: null,\n      default_value: null,\n      expected_shape: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      returned: true,\n      param_type: ['array'],\n      name: 'code',\n      docstring: 'The sparse codes'\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }],\n    name: 'sparse_encode',\n    docstring: \"Sparse coding\\n\\n    Each row of the result is the solution to a sparse coding problem.\\n    The goal is to find a sparse array `code` such that::\\n\\n        X ~= code * dictionary\\n\\n    Read more in the :ref:`User Guide <SparseCoder>`.\\n\\n    Parameters\\n    ----------\\n    X : array of shape (n_samples, n_features)\\n        Data matrix\\n\\n    dictionary : array of shape (n_components, n_features)\\n        The dictionary matrix against which to solve the sparse coding of\\n        the data. Some of the algorithms assume normalized rows for meaningful\\n        output.\\n\\n    gram : array, shape=(n_components, n_components)\\n        Precomputed Gram matrix, dictionary * dictionary'\\n\\n    cov : array, shape=(n_components, n_samples)\\n        Precomputed covariance, dictionary' * X\\n\\n    algorithm : {'lasso_lars', 'lasso_cd', 'lars', 'omp', 'threshold'}\\n        lars: uses the least angle regression method (linear_model.lars_path)\\n        lasso_lars: uses Lars to compute the Lasso solution\\n        lasso_cd: uses the coordinate descent method to compute the\\n        Lasso solution (linear_model.Lasso). lasso_lars will be faster if\\n        the estimated components are sparse.\\n        omp: uses orthogonal matching pursuit to estimate the sparse solution\\n        threshold: squashes to zero all coefficients less than alpha from\\n        the projection dictionary * X'\\n\\n    n_nonzero_coefs : int, 0.1 * n_features by default\\n        Number of nonzero coefficients to target in each column of the\\n        solution. This is only used by `algorithm='lars'` and `algorithm='omp'`\\n        and is overridden by `alpha` in the `omp` case.\\n\\n    alpha : float, 1. by default\\n        If `algorithm='lasso_lars'` or `algorithm='lasso_cd'`, `alpha` is the\\n        penalty applied to the L1 norm.\\n        If `algorithm='threshold'`, `alpha` is the absolute value of the\\n        threshold below which coefficients will be squashed to zero.\\n        If `algorithm='omp'`, `alpha` is the tolerance parameter: the value of\\n        the reconstruction error targeted. In this case, it overrides\\n        `n_nonzero_coefs`.\\n\\n    copy_cov : boolean, optional\\n        Whether to copy the precomputed covariance matrix; if False, it may be\\n        overwritten.\\n\\n    init : array of shape (n_samples, n_components)\\n        Initialization value of the sparse codes. Only used if\\n        `algorithm='lasso_cd'`.\\n\\n    max_iter : int, 1000 by default\\n        Maximum number of iterations to perform if `algorithm='lasso_cd'`.\\n\\n    n_jobs : int or None, optional (default=None)\\n        Number of parallel jobs to run.\\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\\n        for more details.\\n\\n    check_input : boolean, optional\\n        If False, the input arrays X and dictionary will not be checked.\\n\\n    verbose : int, optional\\n        Controls the verbosity; the higher, the more messages. Defaults to 0.\\n\\n    positive : boolean, optional\\n        Whether to enforce positivity when finding the encoding.\\n\\n        .. versionadded:: 0.20\\n\\n    Returns\\n    -------\\n    code : array of shape (n_samples, n_components)\\n        The sparse codes\\n\\n    See also\\n    --------\\n    sklearn.linear_model.lars_path\\n    sklearn.linear_model.orthogonal_mp\\n    sklearn.linear_model.Lasso\\n    SparseCoder\\n    \"\n  }],\n  docstring: '',\n  outputs: []\n});\n\n/***/ }),\n\n/***/ 1052:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'sklearn.preprocessing',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [{\n    name: 'add_dummy_feature',\n    docstring: 'Augment dataset with an additional dummy feature.\\n\\n    This is useful for fitting an intercept term with implementations which\\n    cannot otherwise fit it directly.\\n\\n    Parameters\\n    ----------\\n    X : {array-like, sparse matrix}, shape [n_samples, n_features]\\n        Data.\\n\\n    value : float\\n        Value to use for the dummy feature.\\n\\n    Returns\\n    -------\\n\\n    X : {array, sparse matrix}, shape [n_samples, n_features + 1]\\n        Same data with dummy feature added as first column.\\n\\n    Examples\\n    --------\\n\\n    >>> from sklearn.preprocessing import add_dummy_feature\\n    >>> add_dummy_feature([[0, 1], [1, 0]])\\n    array([[1., 0., 1.],\\n           [1., 1., 0.]])\\n    ',\n    inputs: [{\n      name: 'X',\n      docstring: 'Data.',\n      param_type: ['LIST_VALID_OPTIONS', 'array'],\n      expected_shape: '[n_samples, n_features]',\n      is_optional: false,\n      default_value: null,\n      options: ['array-like', 'sparse matrix', 'shape [n_samples', 'n_features]']\n    }, {\n      name: 'value',\n      docstring: 'Value to use for the dummy feature.',\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      name: 'X',\n      docstring: 'Same data with dummy feature added as first column.',\n      param_type: ['LIST_VALID_OPTIONS', 'array'],\n      returned: true\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }]\n  }, {\n    name: 'binarize',\n    docstring: 'Boolean thresholding of array-like or scipy.sparse matrix\\n\\n    Read more in the :ref:`User Guide <preprocessing_binarization>`.\\n\\n    Parameters\\n    ----------\\n    X : {array-like, sparse matrix}, shape [n_samples, n_features]\\n        The data to binarize, element by element.\\n        scipy.sparse matrices should be in CSR or CSC format to avoid an\\n        un-necessary copy.\\n\\n    threshold : float, optional (0.0 by default)\\n        Feature values below or equal to this are replaced by 0, above it by 1.\\n        Threshold may not be less than 0 for operations on sparse matrices.\\n\\n    copy : boolean, optional, default True\\n        set to False to perform inplace binarization and avoid a copy\\n        (if the input is already a numpy array or a scipy.sparse CSR / CSC\\n        matrix and if axis is 1).\\n\\n    See also\\n    --------\\n    Binarizer: Performs binarization using the ``Transformer`` API\\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\\n    ',\n    inputs: [{\n      name: 'X',\n      docstring: 'The data to binarize, element by element. scipy.sparse matrices should be in CSR or CSC format to avoid an un-necessary copy.',\n      param_type: ['LIST_VALID_OPTIONS', 'array'],\n      expected_shape: '[n_samples, n_features]',\n      is_optional: false,\n      default_value: null,\n      options: ['array-like', 'sparse matrix', 'shape [n_samples', 'n_features]']\n    }, {\n      name: 'threshold',\n      docstring: 'Feature values below or equal to this are replaced by 0, above it by 1. Threshold may not be less than 0 for operations on sparse matrices.',\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '',\n      options: null\n    }, {\n      name: 'copy',\n      docstring: 'set to False to perform inplace binarization and avoid a copy (if the input is already a numpy array or a scipy.sparse CSR / CSC matrix and if axis is 1).',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }]\n  }, {\n    name: 'label_binarize',\n    docstring: \"Binarize labels in a one-vs-all fashion\\n\\n    Several regression and binary classification algorithms are\\n    available in scikit-learn. A simple way to extend these algorithms\\n    to the multi-class classification case is to use the so-called\\n    one-vs-all scheme.\\n\\n    This function makes it possible to compute this transformation for a\\n    fixed set of class labels known ahead of time.\\n\\n    Parameters\\n    ----------\\n    y : array-like\\n        Sequence of integer labels or multilabel data to encode.\\n\\n    classes : array-like of shape [n_classes]\\n        Uniquely holds the label for each class.\\n\\n    neg_label : int (default: 0)\\n        Value with which negative labels must be encoded.\\n\\n    pos_label : int (default: 1)\\n        Value with which positive labels must be encoded.\\n\\n    sparse_output : boolean (default: False),\\n        Set to true if output binary array is desired in CSR sparse format\\n\\n    Returns\\n    -------\\n    Y : numpy array or CSR matrix of shape [n_samples, n_classes]\\n        Shape will be [n_samples, 1] for binary problems.\\n\\n    Examples\\n    --------\\n    >>> from sklearn.preprocessing import label_binarize\\n    >>> label_binarize([1, 6], classes=[1, 2, 4, 6])\\n    array([[1, 0, 0, 0],\\n           [0, 0, 0, 1]])\\n\\n    The class ordering is preserved:\\n\\n    >>> label_binarize([1, 6], classes=[1, 6, 4, 2])\\n    array([[1, 0, 0, 0],\\n           [0, 1, 0, 0]])\\n\\n    Binary targets transform to a column vector\\n\\n    >>> label_binarize(['yes', 'no', 'no', 'yes'], classes=['no', 'yes'])\\n    array([[1],\\n           [0],\\n           [0],\\n           [1]])\\n\\n    See also\\n    --------\\n    LabelBinarizer : class used to wrap the functionality of label_binarize and\\n        allow for fitting to classes independently of the transform operation\\n    \",\n    inputs: [{\n      name: 'y',\n      docstring: 'Sequence of integer labels or multilabel data to encode.',\n      param_type: ['array'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'classes',\n      docstring: 'Uniquely holds the label for each class.',\n      param_type: ['array'],\n      expected_shape: '[n_classes]',\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'neg_label',\n      docstring: 'Value with which negative labels must be encoded.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '0',\n      options: null\n    }, {\n      name: 'pos_label',\n      docstring: 'Value with which positive labels must be encoded.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '1',\n      options: null\n    }, {\n      name: 'sparse_output',\n      docstring: 'Set to true if output binary array is desired in CSR sparse format',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      name: 'Y',\n      docstring: 'Shape will be [n_samples, 1] for binary problems.',\n      param_type: ['array'],\n      returned: true\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }]\n  }, {\n    name: 'maxabs_scale',\n    docstring: 'Scale each feature to the [-1, 1] range without breaking the sparsity.\\n\\n    This estimator scales each feature individually such\\n    that the maximal absolute value of each feature in the\\n    training set will be 1.0.\\n\\n    This scaler can also be applied to sparse CSR or CSC matrices.\\n\\n    Parameters\\n    ----------\\n    X : array-like, shape (n_samples, n_features)\\n        The data.\\n\\n    axis : int (0 by default)\\n        axis used to scale along. If 0, independently scale each feature,\\n        otherwise (if 1) scale each sample.\\n\\n    copy : boolean, optional, default is True\\n        Set to False to perform inplace scaling and avoid a copy (if the input\\n        is already a numpy array).\\n\\n    See also\\n    --------\\n    MaxAbsScaler: Performs scaling to the [-1, 1] range using the``Transformer`` API\\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\\n\\n    Notes\\n    -----\\n    NaNs are treated as missing values: disregarded to compute the statistics,\\n    and maintained during the data transformation.\\n\\n    For a comparison of the different scalers, transformers, and normalizers,\\n    see :ref:`examples/preprocessing/plot_all_scaling.py\\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\\n    ',\n    inputs: [{\n      name: 'X',\n      docstring: 'The data.',\n      param_type: ['array'],\n      expected_shape: '(n_samples, n_features)',\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'axis',\n      docstring: 'axis used to scale along. If 0, independently scale each feature, otherwise (if 1) scale each sample.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '',\n      options: null\n    }, {\n      name: 'copy',\n      docstring: 'Set to False to perform inplace scaling and avoid a copy (if the input is already a numpy array).',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }]\n  }, {\n    name: 'minmax_scale',\n    docstring: 'Transforms features by scaling each feature to a given range.\\n\\n    This estimator scales and translates each feature individually such\\n    that it is in the given range on the training set, i.e. between\\n    zero and one.\\n\\n    The transformation is given by (when ``axis=0``)::\\n\\n        X_std = (X - X.min(axis=0)) / (X.max(axis=0) - X.min(axis=0))\\n        X_scaled = X_std * (max - min) + min\\n\\n    where min, max = feature_range.\\n\\n    The transformation is calculated as (when ``axis=0``)::\\n\\n       X_scaled = scale * X + min - X.min(axis=0) * scale\\n       where scale = (max - min) / (X.max(axis=0) - X.min(axis=0))\\n\\n    This transformation is often used as an alternative to zero mean,\\n    unit variance scaling.\\n\\n    Read more in the :ref:`User Guide <preprocessing_scaler>`.\\n\\n    .. versionadded:: 0.17\\n       *minmax_scale* function interface\\n       to :class:`sklearn.preprocessing.MinMaxScaler`.\\n\\n    Parameters\\n    ----------\\n    X : array-like, shape (n_samples, n_features)\\n        The data.\\n\\n    feature_range : tuple (min, max), default=(0, 1)\\n        Desired range of transformed data.\\n\\n    axis : int (0 by default)\\n        axis used to scale along. If 0, independently scale each feature,\\n        otherwise (if 1) scale each sample.\\n\\n    copy : boolean, optional, default is True\\n        Set to False to perform inplace scaling and avoid a copy (if the input\\n        is already a numpy array).\\n\\n    See also\\n    --------\\n    MinMaxScaler: Performs scaling to a given range using the``Transformer`` API\\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\\n\\n    Notes\\n    -----\\n    For a comparison of the different scalers, transformers, and normalizers,\\n    see :ref:`examples/preprocessing/plot_all_scaling.py\\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\\n    ',\n    inputs: [{\n      name: 'X',\n      docstring: 'The data.',\n      param_type: ['array'],\n      expected_shape: '(n_samples, n_features)',\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'feature_range',\n      docstring: 'Desired range of transformed data.',\n      param_type: ['tuple'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'axis',\n      docstring: 'axis used to scale along. If 0, independently scale each feature, otherwise (if 1) scale each sample.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '',\n      options: null\n    }, {\n      name: 'copy',\n      docstring: 'Set to False to perform inplace scaling and avoid a copy (if the input is already a numpy array).',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }]\n  }, {\n    name: 'normalize',\n    docstring: \"Scale input vectors individually to unit norm (vector length).\\n\\n    Read more in the :ref:`User Guide <preprocessing_normalization>`.\\n\\n    Parameters\\n    ----------\\n    X : {array-like, sparse matrix}, shape [n_samples, n_features]\\n        The data to normalize, element by element.\\n        scipy.sparse matrices should be in CSR format to avoid an\\n        un-necessary copy.\\n\\n    norm : 'l1', 'l2', or 'max', optional ('l2' by default)\\n        The norm to use to normalize each non zero sample (or each non-zero\\n        feature if axis is 0).\\n\\n    axis : 0 or 1, optional (1 by default)\\n        axis used to normalize the data along. If 1, independently normalize\\n        each sample, otherwise (if 0) normalize each feature.\\n\\n    copy : boolean, optional, default True\\n        set to False to perform inplace row normalization and avoid a\\n        copy (if the input is already a numpy array or a scipy.sparse\\n        CSR matrix and if axis is 1).\\n\\n    return_norm : boolean, default False\\n        whether to return the computed norms\\n\\n    Returns\\n    -------\\n    X : {array-like, sparse matrix}, shape [n_samples, n_features]\\n        Normalized input X.\\n\\n    norms : array, shape [n_samples] if axis=1 else [n_features]\\n        An array of norms along given axis for X.\\n        When X is sparse, a NotImplementedError will be raised\\n        for norm 'l1' or 'l2'.\\n\\n    See also\\n    --------\\n    Normalizer: Performs normalization using the ``Transformer`` API\\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\\n\\n    Notes\\n    -----\\n    For a comparison of the different scalers, transformers, and normalizers,\\n    see :ref:`examples/preprocessing/plot_all_scaling.py\\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\\n\\n    \",\n    inputs: [{\n      name: 'X',\n      docstring: 'The data to normalize, element by element. scipy.sparse matrices should be in CSR format to avoid an un-necessary copy.',\n      param_type: ['LIST_VALID_OPTIONS', 'array'],\n      expected_shape: '[n_samples, n_features]',\n      is_optional: false,\n      default_value: null,\n      options: ['array-like', 'sparse matrix', 'shape [n_samples', 'n_features]']\n    }, {\n      name: 'norm',\n      docstring: 'The norm to use to normalize each non zero sample (or each non-zero feature if axis is 0).',\n      param_type: [null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '',\n      options: null\n    }, {\n      name: 'axis',\n      docstring: 'axis used to normalize the data along. If 1, independently normalize each sample, otherwise (if 0) normalize each feature.',\n      param_type: [null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '',\n      options: null\n    }, {\n      name: 'copy',\n      docstring: 'set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array or a scipy.sparse CSR matrix and if axis is 1).',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'return_norm',\n      docstring: 'whether to return the computed norms',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'False',\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      name: 'X',\n      docstring: 'Normalized input X.',\n      param_type: ['LIST_VALID_OPTIONS', 'array'],\n      returned: true\n    }, {\n      name: 'norms',\n      docstring: \"An array of norms along given axis for X. When X is sparse, a NotImplementedError will be raised for norm 'l1' or 'l2'.\",\n      param_type: ['array'],\n      returned: true\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }]\n  }, {\n    name: 'power_transform',\n    docstring: \"\\n    Power transforms are a family of parametric, monotonic transformations\\n    that are applied to make data more Gaussian-like. This is useful for\\n    modeling issues related to heteroscedasticity (non-constant variance),\\n    or other situations where normality is desired.\\n\\n    Currently, power_transform supports the Box-Cox transform and the\\n    Yeo-Johnson transform. The optimal parameter for stabilizing variance and\\n    minimizing skewness is estimated through maximum likelihood.\\n\\n    Box-Cox requires input data to be strictly positive, while Yeo-Johnson\\n    supports both positive or negative data.\\n\\n    By default, zero-mean, unit-variance normalization is applied to the\\n    transformed data.\\n\\n    Read more in the :ref:`User Guide <preprocessing_transformer>`.\\n\\n    Parameters\\n    ----------\\n    X : array-like, shape (n_samples, n_features)\\n        The data to be transformed using a power transformation.\\n\\n    method : str\\n        The power transform method. Available methods are:\\n\\n        - 'yeo-johnson' [1]_, works with positive and negative values\\n        - 'box-cox' [2]_, only works with strictly positive values\\n\\n        The default method will be changed from 'box-cox' to 'yeo-johnson'\\n        in version 0.23. To suppress the FutureWarning, explicitly set the\\n        parameter.\\n\\n    standardize : boolean, default=True\\n        Set to True to apply zero-mean, unit-variance normalization to the\\n        transformed output.\\n\\n    copy : boolean, optional, default=True\\n        Set to False to perform inplace computation during transformation.\\n\\n    Returns\\n    -------\\n    X_trans : array-like, shape (n_samples, n_features)\\n        The transformed data.\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> from sklearn.preprocessing import power_transform\\n    >>> data = [[1, 2], [3, 2], [4, 5]]\\n    >>> print(power_transform(data, method='box-cox'))  # doctest: +ELLIPSIS\\n    [[-1.332... -0.707...]\\n     [ 0.256... -0.707...]\\n     [ 1.076...  1.414...]]\\n\\n    See also\\n    --------\\n    PowerTransformer : Equivalent transformation with the\\n        ``Transformer`` API (e.g. as part of a preprocessing\\n        :class:`sklearn.pipeline.Pipeline`).\\n\\n    quantile_transform : Maps data to a standard normal distribution with\\n        the parameter `output_distribution='normal'`.\\n\\n    Notes\\n    -----\\n    NaNs are treated as missing values: disregarded in ``fit``, and maintained\\n    in ``transform``.\\n\\n    For a comparison of the different scalers, transformers, and normalizers,\\n    see :ref:`examples/preprocessing/plot_all_scaling.py\\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\\n\\n    References\\n    ----------\\n\\n    .. [1] I.K. Yeo and R.A. Johnson, \\\"A new family of power transformations to\\n           improve normality or symmetry.\\\" Biometrika, 87(4), pp.954-959,\\n           (2000).\\n\\n    .. [2] G.E.P. Box and D.R. Cox, \\\"An Analysis of Transformations\\\", Journal\\n           of the Royal Statistical Society B, 26, 211-252 (1964).\\n    \",\n    inputs: [{\n      name: 'X',\n      docstring: 'The data to be transformed using a power transformation.',\n      param_type: ['array'],\n      expected_shape: '(n_samples, n_features)',\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'method',\n      docstring: \"The power transform method. Available methods are:  - 'yeo-johnson' [1]_, works with positive and negative values - 'box-cox' [2]_, only works with strictly positive values  The default method will be changed from 'box-cox' to 'yeo-johnson' in version 0.23. To suppress the FutureWarning, explicitly set the parameter.\",\n      param_type: ['str'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'standardize',\n      docstring: 'Set to True to apply zero-mean, unit-variance normalization to the transformed output.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'copy',\n      docstring: 'Set to False to perform inplace computation during transformation.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      name: 'X_trans',\n      docstring: 'The transformed data.',\n      param_type: ['array'],\n      returned: true\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }]\n  }, {\n    name: 'quantile_transform',\n    docstring: \"Transform features using quantiles information.\\n\\n    This method transforms the features to follow a uniform or a normal\\n    distribution. Therefore, for a given feature, this transformation tends\\n    to spread out the most frequent values. It also reduces the impact of\\n    (marginal) outliers: this is therefore a robust preprocessing scheme.\\n\\n    The transformation is applied on each feature independently. First an\\n    estimate of the cumulative distribution function of a feature is\\n    used to map the original values to a uniform distribution. The obtained\\n    values are then mapped to the desired output distribution using the\\n    associated quantile function. Features values of new/unseen data that fall\\n    below or above the fitted range will be mapped to the bounds of the output\\n    distribution. Note that this transform is non-linear. It may distort linear\\n    correlations between variables measured at the same scale but renders\\n    variables measured at different scales more directly comparable.\\n\\n    Read more in the :ref:`User Guide <preprocessing_transformer>`.\\n\\n    Parameters\\n    ----------\\n    X : array-like, sparse matrix\\n        The data to transform.\\n\\n    axis : int, (default=0)\\n        Axis used to compute the means and standard deviations along. If 0,\\n        transform each feature, otherwise (if 1) transform each sample.\\n\\n    n_quantiles : int, optional (default=1000 or n_samples)\\n        Number of quantiles to be computed. It corresponds to the number\\n        of landmarks used to discretize the cumulative distribution function.\\n        If n_quantiles is larger than the number of samples, n_quantiles is set\\n        to the number of samples as a larger number of quantiles does not give\\n        a better approximation of the cumulative distribution function\\n        estimator.\\n\\n    output_distribution : str, optional (default='uniform')\\n        Marginal distribution for the transformed data. The choices are\\n        'uniform' (default) or 'normal'.\\n\\n    ignore_implicit_zeros : bool, optional (default=False)\\n        Only applies to sparse matrices. If True, the sparse entries of the\\n        matrix are discarded to compute the quantile statistics. If False,\\n        these entries are treated as zeros.\\n\\n    subsample : int, optional (default=1e5)\\n        Maximum number of samples used to estimate the quantiles for\\n        computational efficiency. Note that the subsampling procedure may\\n        differ for value-identical sparse and dense matrices.\\n\\n    random_state : int, RandomState instance or None, optional (default=None)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by np.random. Note that this is used by subsampling and smoothing\\n        noise.\\n\\n    copy : boolean, optional, (default=\\\"warn\\\")\\n        Set to False to perform inplace transformation and avoid a copy (if the\\n        input is already a numpy array). If True, a copy of `X` is transformed,\\n        leaving the original `X` unchanged\\n\\n        .. deprecated:: 0.21\\n            The default value of parameter `copy` will be changed from False\\n            to True in 0.23. The current default of False is being changed to\\n            make it more consistent with the default `copy` values of other\\n            functions in :mod:`sklearn.preprocessing.data`. Furthermore, the\\n            current default of False may have unexpected side effects by\\n            modifying the value of `X` inplace\\n\\n    Returns\\n    -------\\n    Xt : ndarray or sparse matrix, shape (n_samples, n_features)\\n        The transformed data.\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> from sklearn.preprocessing import quantile_transform\\n    >>> rng = np.random.RandomState(0)\\n    >>> X = np.sort(rng.normal(loc=0.5, scale=0.25, size=(25, 1)), axis=0)\\n    >>> quantile_transform(X, n_quantiles=10, random_state=0, copy=True)\\n    ... # doctest: +ELLIPSIS\\n    array([...])\\n\\n    See also\\n    --------\\n    QuantileTransformer : Performs quantile-based scaling using the\\n        ``Transformer`` API (e.g. as part of a preprocessing\\n        :class:`sklearn.pipeline.Pipeline`).\\n    power_transform : Maps data to a normal distribution using a\\n        power transformation.\\n    scale : Performs standardization that is faster, but less robust\\n        to outliers.\\n    robust_scale : Performs robust standardization that removes the influence\\n        of outliers but does not put outliers and inliers on the same scale.\\n\\n    Notes\\n    -----\\n    NaNs are treated as missing values: disregarded in fit, and maintained in\\n    transform.\\n\\n    For a comparison of the different scalers, transformers, and normalizers,\\n    see :ref:`examples/preprocessing/plot_all_scaling.py\\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\\n    \",\n    inputs: [{\n      name: 'X',\n      docstring: 'The data to transform.',\n      param_type: ['array'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'axis',\n      docstring: 'Axis used to compute the means and standard deviations along. If 0, transform each feature, otherwise (if 1) transform each sample.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '0',\n      options: null\n    }, {\n      name: 'n_quantiles',\n      docstring: 'Number of quantiles to be computed. It corresponds to the number of landmarks used to discretize the cumulative distribution function. If n_quantiles is larger than the number of samples, n_quantiles is set to the number of samples as a larger number of quantiles does not give a better approximation of the cumulative distribution function estimator.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '1000 or n_samples',\n      options: null\n    }, {\n      name: 'output_distribution',\n      docstring: \"Marginal distribution for the transformed data. The choices are 'uniform' (default) or 'normal'.\",\n      param_type: ['str'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'uniform',\n      options: null\n    }, {\n      name: 'ignore_implicit_zeros',\n      docstring: 'Only applies to sparse matrices. If True, the sparse entries of the matrix are discarded to compute the quantile statistics. If False, these entries are treated as zeros.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'False',\n      options: null\n    }, {\n      name: 'subsample',\n      docstring: 'Maximum number of samples used to estimate the quantiles for computational efficiency. Note that the subsampling procedure may differ for value-identical sparse and dense matrices.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '1e5',\n      options: null\n    }, {\n      name: 'random_state',\n      docstring: 'If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random. Note that this is used by subsampling and smoothing noise.',\n      param_type: ['int', null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'None',\n      options: null\n    }, {\n      name: 'copy',\n      docstring: 'Set to False to perform inplace transformation and avoid a copy (if the input is already a numpy array). If True, a copy of `X` is transformed, leaving the original `X` unchanged  .. deprecated:: 0.21     The default value of parameter `copy` will be changed from False     to True in 0.23. The current default of False is being changed to     make it more consistent with the default `copy` values of other     functions in :mod:`sklearn.preprocessing.data`. Furthermore, the     current default of False may have unexpected side effects by     modifying the value of `X` inplace',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '\"warn\"',\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      name: 'Xt',\n      docstring: 'The transformed data.',\n      param_type: ['array'],\n      returned: true\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }]\n  }, {\n    name: 'robust_scale',\n    docstring: 'Standardize a dataset along any axis\\n\\n    Center to the median and component wise scale\\n    according to the interquartile range.\\n\\n    Read more in the :ref:`User Guide <preprocessing_scaler>`.\\n\\n    Parameters\\n    ----------\\n    X : array-like\\n        The data to center and scale.\\n\\n    axis : int (0 by default)\\n        axis used to compute the medians and IQR along. If 0,\\n        independently scale each feature, otherwise (if 1) scale\\n        each sample.\\n\\n    with_centering : boolean, True by default\\n        If True, center the data before scaling.\\n\\n    with_scaling : boolean, True by default\\n        If True, scale the data to unit variance (or equivalently,\\n        unit standard deviation).\\n\\n    quantile_range : tuple (q_min, q_max), 0.0 < q_min < q_max < 100.0\\n        Default: (25.0, 75.0) = (1st quantile, 3rd quantile) = IQR\\n        Quantile range used to calculate ``scale_``.\\n\\n        .. versionadded:: 0.18\\n\\n    copy : boolean, optional, default is True\\n        set to False to perform inplace row normalization and avoid a\\n        copy (if the input is already a numpy array or a scipy.sparse\\n        CSR matrix and if axis is 1).\\n\\n    Notes\\n    -----\\n    This implementation will refuse to center scipy.sparse matrices\\n    since it would make them non-sparse and would potentially crash the\\n    program with memory exhaustion problems.\\n\\n    Instead the caller is expected to either set explicitly\\n    `with_centering=False` (in that case, only variance scaling will be\\n    performed on the features of the CSR matrix) or to call `X.toarray()`\\n    if he/she expects the materialized dense array to fit in memory.\\n\\n    To avoid memory copy the caller should pass a CSR matrix.\\n\\n    For a comparison of the different scalers, transformers, and normalizers,\\n    see :ref:`examples/preprocessing/plot_all_scaling.py\\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\\n\\n    See also\\n    --------\\n    RobustScaler: Performs centering and scaling using the ``Transformer`` API\\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\\n    ',\n    inputs: [{\n      name: 'X',\n      docstring: 'The data to center and scale.',\n      param_type: ['array'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'axis',\n      docstring: 'axis used to compute the medians and IQR along. If 0, independently scale each feature, otherwise (if 1) scale each sample.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '',\n      options: null\n    }, {\n      name: 'with_centering',\n      docstring: 'If True, center the data before scaling.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '',\n      options: null\n    }, {\n      name: 'with_scaling',\n      docstring: 'If True, scale the data to unit variance (or equivalently, unit standard deviation).',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '',\n      options: null\n    }, {\n      name: 'quantile_range',\n      docstring: 'Default: (25.0, 75.0) = (1st quantile, 3rd quantile) = IQR Quantile range used to calculate ``scale_``.  .. versionadded:: 0.18',\n      param_type: ['tuple'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'copy',\n      docstring: 'set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array or a scipy.sparse CSR matrix and if axis is 1).',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }]\n  }, {\n    name: 'scale',\n    docstring: 'Standardize a dataset along any axis\\n\\n    Center to the mean and component wise scale to unit variance.\\n\\n    Read more in the :ref:`User Guide <preprocessing_scaler>`.\\n\\n    Parameters\\n    ----------\\n    X : {array-like, sparse matrix}\\n        The data to center and scale.\\n\\n    axis : int (0 by default)\\n        axis used to compute the means and standard deviations along. If 0,\\n        independently standardize each feature, otherwise (if 1) standardize\\n        each sample.\\n\\n    with_mean : boolean, True by default\\n        If True, center the data before scaling.\\n\\n    with_std : boolean, True by default\\n        If True, scale the data to unit variance (or equivalently,\\n        unit standard deviation).\\n\\n    copy : boolean, optional, default True\\n        set to False to perform inplace row normalization and avoid a\\n        copy (if the input is already a numpy array or a scipy.sparse\\n        CSC matrix and if axis is 1).\\n\\n    Notes\\n    -----\\n    This implementation will refuse to center scipy.sparse matrices\\n    since it would make them non-sparse and would potentially crash the\\n    program with memory exhaustion problems.\\n\\n    Instead the caller is expected to either set explicitly\\n    `with_mean=False` (in that case, only variance scaling will be\\n    performed on the features of the CSC matrix) or to call `X.toarray()`\\n    if he/she expects the materialized dense array to fit in memory.\\n\\n    To avoid memory copy the caller should pass a CSC matrix.\\n\\n    NaNs are treated as missing values: disregarded to compute the statistics,\\n    and maintained during the data transformation.\\n\\n    We use a biased estimator for the standard deviation, equivalent to\\n    `numpy.std(x, ddof=0)`. Note that the choice of `ddof` is unlikely to\\n    affect model performance.\\n\\n    For a comparison of the different scalers, transformers, and normalizers,\\n    see :ref:`examples/preprocessing/plot_all_scaling.py\\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\\n\\n    See also\\n    --------\\n    StandardScaler: Performs scaling to unit variance using the``Transformer`` API\\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\\n\\n    ',\n    inputs: [{\n      name: 'X',\n      docstring: 'The data to center and scale.',\n      param_type: ['LIST_VALID_OPTIONS', 'array'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: ['array-like', 'sparse matrix']\n    }, {\n      name: 'axis',\n      docstring: 'axis used to compute the means and standard deviations along. If 0, independently standardize each feature, otherwise (if 1) standardize each sample.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '',\n      options: null\n    }, {\n      name: 'with_mean',\n      docstring: 'If True, center the data before scaling.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '',\n      options: null\n    }, {\n      name: 'with_std',\n      docstring: 'If True, scale the data to unit variance (or equivalently, unit standard deviation).',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '',\n      options: null\n    }, {\n      name: 'copy',\n      docstring: 'set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array or a scipy.sparse CSC matrix and if axis is 1).',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }]\n  }],\n  nodes: [{\n    name: 'MaxAbsScaler',\n    docstring: 'Scale each feature by its maximum absolute value.\\n\\n    This estimator scales and translates each feature individually such\\n    that the maximal absolute value of each feature in the\\n    training set will be 1.0. It does not shift/center the data, and\\n    thus does not destroy any sparsity.',\n    inputs: [{\n      name: 'copy',\n      docstring: 'Set to False to perform inplace scaling and avoid a copy (if the input is already a numpy array).',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }],\n    outputs: [{\n      name: 'scale_',\n      docstring: 'Per feature relative scaling of the data.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'max_abs_',\n      docstring: 'Per feature maximum absolute value.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'n_samples_seen_',\n      docstring: 'The number of samples processed by the estimator. Will be reset on new calls to fit, but increments across ``partial_fit`` calls.',\n      param_type: ['int'],\n      returned: false\n    }],\n    node_functions: [{\n      name: '__init__',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_param_names',\n      docstring: 'Get parameter names for the estimator',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_tags',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_more_tags',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_reset',\n      docstring: 'Reset internal data-dependent state of the scaler, if necessary.\\n\\n        __init__ parameters are not touched.\\n        ',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'fit',\n      docstring: 'Compute the maximum absolute value to be used for later scaling.',\n      inputs: [{\n        name: 'X',\n        docstring: 'The data used to compute the per-feature minimum and maximum used for later scaling along the features axis.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'fit_transform',\n      docstring: 'Fit to data, then transform it.\\n\\n        Fits transformer to X and y with optional parameters fit_params\\n        and returns a transformed version of X.',\n      inputs: [{\n        name: 'X',\n        docstring: 'Training set.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'y',\n        docstring: 'Target values.',\n        param_type: ['array'],\n        expected_shape: '[n_samples]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'X_new',\n        docstring: 'Transformed array.',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'inverse_transform',\n      docstring: 'Scale back the data to the original representation',\n      inputs: [{\n        name: 'X',\n        docstring: 'The data that should be transformed back.',\n        param_type: ['array'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'partial_fit',\n      docstring: 'Online computation of max absolute value of X for later scaling.\\n        All of X is processed as a single batch. This is intended for cases\\n        when `fit` is not feasible due to very large number of `n_samples`\\n        or because X is read from a continuous stream.',\n      inputs: [{\n        name: 'X',\n        docstring: 'The data used to compute the mean and standard deviation used for later scaling along the features axis.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'y',\n        docstring: 'Ignored',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'transform',\n      docstring: 'Scale the data',\n      inputs: [{\n        name: 'X',\n        docstring: 'The data that should be scaled.',\n        param_type: ['array'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }],\n    nodes: []\n  }, {\n    name: 'MinMaxScaler',\n    docstring: 'Transforms features by scaling each feature to a given range.\\n\\n    This estimator scales and translates each feature individually such\\n    that it is in the given range on the training set, e.g. between\\n    zero and one.\\n\\n    The transformation is given by::\\n\\n        X_std = (X - X.min(axis=0)) / (X.max(axis=0) - X.min(axis=0))\\n        X_scaled = X_std * (max - min) + min\\n\\n    where min, max = feature_range.\\n\\n    The transformation is calculated as::\\n\\n        X_scaled = scale * X + min - X.min(axis=0) * scale\\n        where scale = (max - min) / (X.max(axis=0) - X.min(axis=0))\\n\\n    This transformation is often used as an alternative to zero mean,\\n    unit variance scaling.',\n    inputs: [{\n      name: 'feature_range',\n      docstring: 'Desired range of transformed data.',\n      param_type: ['tuple'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '(0, 1)',\n      options: null\n    }, {\n      name: 'copy',\n      docstring: 'Set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array).',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }],\n    outputs: [{\n      name: 'min_',\n      docstring: 'Per feature adjustment for minimum. Equivalent to ``min - X.min(axis=0) * self.scale_``',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'scale_',\n      docstring: 'Per feature relative scaling of the data. Equivalent to ``(max - min) / (X.max(axis=0) - X.min(axis=0))``',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'data_min_',\n      docstring: 'Per feature minimum seen in the data',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'data_max_',\n      docstring: 'Per feature maximum seen in the data',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'data_range_',\n      docstring: 'Per feature range ``(data_max_ - data_min_)`` seen in the data',\n      param_type: ['array'],\n      returned: false\n    }],\n    node_functions: [{\n      name: '__init__',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_param_names',\n      docstring: 'Get parameter names for the estimator',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_tags',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_more_tags',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_reset',\n      docstring: 'Reset internal data-dependent state of the scaler, if necessary.\\n\\n        __init__ parameters are not touched.\\n        ',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'fit',\n      docstring: 'Compute the minimum and maximum to be used for later scaling.',\n      inputs: [{\n        name: 'X',\n        docstring: 'The data used to compute the per-feature minimum and maximum used for later scaling along the features axis.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'fit_transform',\n      docstring: 'Fit to data, then transform it.\\n\\n        Fits transformer to X and y with optional parameters fit_params\\n        and returns a transformed version of X.',\n      inputs: [{\n        name: 'X',\n        docstring: 'Training set.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'y',\n        docstring: 'Target values.',\n        param_type: ['array'],\n        expected_shape: '[n_samples]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'X_new',\n        docstring: 'Transformed array.',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'inverse_transform',\n      docstring: 'Undo the scaling of X according to feature_range.',\n      inputs: [{\n        name: 'X',\n        docstring: 'Input data that will be transformed. It cannot be sparse.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'partial_fit',\n      docstring: 'Online computation of min and max on X for later scaling.\\n        All of X is processed as a single batch. This is intended for cases\\n        when `fit` is not feasible due to very large number of `n_samples`\\n        or because X is read from a continuous stream.',\n      inputs: [{\n        name: 'X',\n        docstring: 'The data used to compute the mean and standard deviation used for later scaling along the features axis.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'y',\n        docstring: 'Ignored',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'transform',\n      docstring: 'Scaling features of X according to feature_range.',\n      inputs: [{\n        name: 'X',\n        docstring: 'Input data that will be transformed.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }],\n    nodes: []\n  }, {\n    name: 'Normalizer',\n    docstring: 'Normalize samples individually to unit norm.\\n\\n    Each sample (i.e. each row of the data matrix) with at least one\\n    non zero component is rescaled independently of other samples so\\n    that its norm (l1 or l2) equals one.\\n\\n    This transformer is able to work both with dense numpy arrays and\\n    scipy.sparse matrix (use CSR format if you want to avoid the burden of\\n    a copy / conversion).\\n\\n    Scaling inputs to unit norms is a common operation for text\\n    classification or clustering for instance. For instance the dot\\n    product of two l2-normalized TF-IDF vectors is the cosine similarity\\n    of the vectors and is the base similarity metric for the Vector\\n    Space Model commonly used by the Information Retrieval community.',\n    inputs: [{\n      name: 'norm',\n      docstring: 'The norm to use to normalize each non zero sample.',\n      param_type: ['LIST_VALID_OPTIONS'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'l2',\n      options: ['l1', 'l2', 'max']\n    }, {\n      name: 'copy',\n      docstring: 'set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array or a scipy.sparse CSR matrix).',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }],\n    outputs: [],\n    node_functions: [{\n      name: '__init__',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_param_names',\n      docstring: 'Get parameter names for the estimator',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_tags',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_more_tags',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'fit',\n      docstring: 'Do nothing and return the estimator unchanged\\n\\n        This method is just there to implement the usual API and hence\\n        work in pipelines.',\n      inputs: [{\n        name: 'X',\n        docstring: 'Data',\n        param_type: ['array'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'fit_transform',\n      docstring: 'Fit to data, then transform it.\\n\\n        Fits transformer to X and y with optional parameters fit_params\\n        and returns a transformed version of X.',\n      inputs: [{\n        name: 'X',\n        docstring: 'Training set.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'y',\n        docstring: 'Target values.',\n        param_type: ['array'],\n        expected_shape: '[n_samples]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'X_new',\n        docstring: 'Transformed array.',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'transform',\n      docstring: 'Scale each non zero row of X to unit norm',\n      inputs: [{\n        name: 'X',\n        docstring: 'The data to normalize, row by row. scipy.sparse matrices should be in CSR format to avoid an un-necessary copy.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'copy',\n        docstring: 'Copy the input X or not.',\n        param_type: ['bool', null],\n        expected_shape: null,\n        is_optional: true,\n        default_value: 'None',\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }],\n    nodes: []\n  }, {\n    name: 'OneHotEncoder',\n    docstring: \"Encode categorical integer features as a one-hot numeric array.\\n\\n    The input to this transformer should be an array-like of integers or\\n    strings, denoting the values taken on by categorical (discrete) features.\\n    The features are encoded using a one-hot (aka 'one-of-K' or 'dummy')\\n    encoding scheme. This creates a binary column for each category and\\n    returns a sparse matrix or dense array.\\n\\n    By default, the encoder derives the categories based on the unique values\\n    in each feature. Alternatively, you can also specify the `categories`\\n    manually.\\n    The OneHotEncoder previously assumed that the input features take on\\n    values in the range [0, max(values)). This behaviour is deprecated.\\n\\n    This encoding is needed for feeding categorical data to many scikit-learn\\n    estimators, notably linear models and SVMs with the standard kernels.\\n\\n    Note: a one-hot encoding of y labels should use a LabelBinarizer\\n    instead.\",\n    inputs: [{\n      name: 'categories',\n      docstring: \"Categories (unique values) per feature:  - 'auto' : Determine categories automatically from the training data. - list : ``categories[i]`` holds the categories expected in the ith   column. The passed categories should not mix strings and numeric   values within a single feature, and should be sorted in case of   numeric values.  The used categories can be found in the ``categories_`` attribute.\",\n      param_type: ['str', 'array', 'list'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'auto.',\n      options: null\n    }, {\n      name: 'drop',\n      docstring: \"Specifies a methodology to use to drop one of the categories per feature. This is useful in situations where perfectly collinear features cause problems, such as when feeding the resulting data into a neural network or an unregularized regression.  - None : retain all features (the default). - 'first' : drop the first category in each feature. If only one   category is present, the feature will be dropped entirely. - array : ``drop[i]`` is the category in feature ``X[:, i]`` that   should be dropped.\",\n      param_type: ['array', 'list', 'str'],\n      expected_shape: '(n_features,)',\n      is_optional: true,\n      default_value: 'None',\n      options: null\n    }, {\n      name: 'sparse',\n      docstring: 'Will return sparse matrix if set True else will return an array.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'dtype',\n      docstring: 'Desired dtype of output.',\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'np.float',\n      options: null\n    }, {\n      name: 'handle_unknown',\n      docstring: \"Whether to raise an error or ignore if an unknown categorical feature is present during transform (default is to raise). When this parameter is set to 'ignore' and an unknown category is encountered during transform, the resulting one-hot encoded columns for this feature will be all zeros. In the inverse transform, an unknown category will be denoted as None.\",\n      param_type: ['LIST_VALID_OPTIONS'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'error',\n      options: ['error', 'ignore']\n    }, {\n      name: 'n_values',\n      docstring: \"Number of values per feature.  - 'auto' : determine value range from training data. - int : number of categorical values per feature.         Each feature value should be in ``range(n_values)`` - array : ``n_values[i]`` is the number of categorical values in           ``X[:, i]``. Each feature value should be           in ``range(n_values[i])``\",\n      param_type: ['array', 'int', 'str'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'auto',\n      options: null\n    }, {\n      name: 'categorical_features',\n      docstring: \"Specify what features are treated as categorical.  - 'all': All features are treated as categorical. - array of indices: Array of categorical feature indices. - mask: Array of length n_features and with dtype=bool.  Non-categorical features are always stacked to the right of the matrix.\",\n      param_type: ['array', 'str'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'all',\n      options: null\n    }],\n    outputs: [{\n      name: 'categories_',\n      docstring: 'The categories of each feature determined during fitting (in order of the features in X and corresponding with the output of ``transform``). This includes the category specified in ``drop`` (if any).',\n      param_type: ['array', 'list'],\n      returned: false\n    }, {\n      name: 'drop_idx_',\n      docstring: '``drop_idx_[i]`` is\\xA0the index in ``categories_[i]`` of the category to be dropped for each feature. None if all the transformed features will be retained.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'active_features_',\n      docstring: \"Indices for active features, meaning values that actually occur in the training set. Only available when n_values is ``'auto'``.  .. deprecated:: 0.20     The ``active_features_`` attribute was deprecated in version     0.20 and will be removed in 0.22.\",\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'feature_indices_',\n      docstring: 'Indices to feature ranges. Feature ``i`` in the original data is mapped to features from ``feature_indices_[i]`` to ``feature_indices_[i+1]`` (and then potentially masked by ``active_features_`` afterwards)  .. deprecated:: 0.20     The ``feature_indices_`` attribute was deprecated in version     0.20 and will be removed in 0.22.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'n_values_',\n      docstring: 'Maximum number of values per feature.  .. deprecated:: 0.20     The ``n_values_`` attribute was deprecated in version     0.20 and will be removed in 0.22.',\n      param_type: ['array'],\n      returned: false\n    }],\n    node_functions: [{\n      name: '__init__',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_check_X',\n      docstring: '\\n        Perform custom check_array:\\n        - convert list of strings to object dtype\\n        - check for missing values for object dtype data (check_array does\\n          not do that)\\n        - return list of features (arrays): this list of features is\\n          constructed feature by feature to preserve the data types\\n          of pandas DataFrame columns, as otherwise information is lost\\n          and cannot be used, eg for the `categories_` attribute.\\n\\n        ',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_compute_drop_idx',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_fit',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_feature',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_param_names',\n      docstring: 'Get parameter names for the estimator',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_tags',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_handle_deprecations',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_legacy_fit_transform',\n      docstring: 'Assumes X contains only categorical features.',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_legacy_transform',\n      docstring: 'Assumes X contains only categorical features.',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_transform',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_transform_new',\n      docstring: 'New implementation assuming categorical input',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_validate_keywords',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'fit',\n      docstring: 'Fit OneHotEncoder to X.',\n      inputs: [{\n        name: 'X',\n        docstring: 'The data to determine the categories of each feature.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: '',\n        docstring: '',\n        param_type: [null],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'fit_transform',\n      docstring: 'Fit OneHotEncoder to X, then transform X.\\n\\n        Equivalent to fit(X).transform(X) but more convenient.',\n      inputs: [{\n        name: 'X',\n        docstring: 'The data to encode.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'X_out',\n        docstring: 'Transformed input.',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'get_feature_names',\n      docstring: 'Return feature names for output features.',\n      inputs: [{\n        name: 'input_features',\n        docstring: 'String names for input features if available. By default, \"x0\", \"x1\", ... \"xn_features\" is used.',\n        param_type: ['list'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'output_feature_names',\n        docstring: '',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'inverse_transform',\n      docstring: 'Convert the back data to the original representation.\\n\\n        In case unknown categories are encountered (all zeros in the\\n        one-hot encoding), ``None`` is used to represent this category.',\n      inputs: [{\n        name: 'X',\n        docstring: 'The transformed data.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_encoded_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'X_tr',\n        docstring: 'Inverse transformed array.',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'transform',\n      docstring: 'Transform X using one-hot encoding.',\n      inputs: [{\n        name: 'X',\n        docstring: 'The data to encode.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'X_out',\n        docstring: 'Transformed input.',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }],\n    nodes: []\n  }, {\n    name: 'StandardScaler',\n    docstring: 'Standardize features by removing the mean and scaling to unit variance\\n\\n    The standard score of a sample `x` is calculated as:\\n\\n        z = (x - u) / s\\n\\n    where `u` is the mean of the training samples or zero if `with_mean=False`,\\n    and `s` is the standard deviation of the training samples or one if\\n    `with_std=False`.\\n\\n    Centering and scaling happen independently on each feature by computing\\n    the relevant statistics on the samples in the training set. Mean and\\n    standard deviation are then stored to be used on later data using the\\n    `transform` method.\\n\\n    Standardization of a dataset is a common requirement for many\\n    machine learning estimators: they might behave badly if the\\n    individual features do not more or less look like standard normally\\n    distributed data (e.g. Gaussian with 0 mean and unit variance).\\n\\n    For instance many elements used in the objective function of\\n    a learning algorithm (such as the RBF kernel of Support Vector\\n    Machines or the L1 and L2 regularizers of linear models) assume that\\n    all features are centered around 0 and have variance in the same\\n    order. If a feature has a variance that is orders of magnitude larger\\n    that others, it might dominate the objective function and make the\\n    estimator unable to learn from other features correctly as expected.\\n\\n    This scaler can also be applied to sparse CSR or CSC matrices by passing\\n    `with_mean=False` to avoid breaking the sparsity structure of the data.',\n    inputs: [{\n      name: 'copy',\n      docstring: 'If False, try to avoid a copy and do inplace scaling instead. This is not guaranteed to always work inplace; e.g. if the data is not a NumPy array or scipy.sparse CSR matrix, a copy may still be returned.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'with_mean',\n      docstring: 'If True, center the data before scaling. This does not work (and will raise an exception) when attempted on sparse matrices, because centering them entails building a dense matrix which in common use cases is likely to be too large to fit in memory.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'with_std',\n      docstring: 'If True, scale the data to unit variance (or equivalently, unit standard deviation).',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }],\n    outputs: [{\n      name: 'scale_',\n      docstring: 'Per feature relative scaling of the data. This is calculated using `np.sqrt(var_)`. Equal to ``None`` when ``with_std=False``.  .. versionadded:: 0.17    *scale_*',\n      param_type: ['array', null],\n      returned: false\n    }, {\n      name: 'mean_',\n      docstring: 'The mean value for each feature in the training set. Equal to ``None`` when ``with_mean=False``.',\n      param_type: ['array', null],\n      returned: false\n    }, {\n      name: 'var_',\n      docstring: 'The variance for each feature in the training set. Used to compute `scale_`. Equal to ``None`` when ``with_std=False``.',\n      param_type: ['array', null],\n      returned: false\n    }, {\n      name: 'n_samples_seen_',\n      docstring: 'The number of samples processed by the estimator for each feature. If there are not missing samples, the ``n_samples_seen`` will be an integer, otherwise it will be an array. Will be reset on new calls to fit, but increments across ``partial_fit`` calls.',\n      param_type: ['array', 'int'],\n      returned: false\n    }],\n    node_functions: [{\n      name: '__init__',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_param_names',\n      docstring: 'Get parameter names for the estimator',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_tags',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_more_tags',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_reset',\n      docstring: 'Reset internal data-dependent state of the scaler, if necessary.\\n\\n        __init__ parameters are not touched.\\n        ',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'fit',\n      docstring: 'Compute the mean and std to be used for later scaling.',\n      inputs: [{\n        name: 'X',\n        docstring: 'The data used to compute the mean and standard deviation used for later scaling along the features axis.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'y',\n        docstring: 'Ignored',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'fit_transform',\n      docstring: 'Fit to data, then transform it.\\n\\n        Fits transformer to X and y with optional parameters fit_params\\n        and returns a transformed version of X.',\n      inputs: [{\n        name: 'X',\n        docstring: 'Training set.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'y',\n        docstring: 'Target values.',\n        param_type: ['array'],\n        expected_shape: '[n_samples]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'X_new',\n        docstring: 'Transformed array.',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'inverse_transform',\n      docstring: 'Scale back the data to the original representation',\n      inputs: [{\n        name: 'X',\n        docstring: 'The data used to scale along the features axis.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'copy',\n        docstring: 'Copy the input X or not.',\n        param_type: ['bool', null],\n        expected_shape: null,\n        is_optional: true,\n        default_value: 'None',\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'X_tr',\n        docstring: 'Transformed array.',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'partial_fit',\n      docstring: 'Online computation of mean and std on X for later scaling.\\n        All of X is processed as a single batch. This is intended for cases\\n        when `fit` is not feasible due to very large number of `n_samples`\\n        or because X is read from a continuous stream.',\n      inputs: [{\n        name: 'X',\n        docstring: 'The data used to compute the mean and standard deviation used for later scaling along the features axis.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'y',\n        docstring: 'Ignored',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'transform',\n      docstring: 'Perform standardization by centering and scaling',\n      inputs: [{\n        name: 'X',\n        docstring: 'The data used to scale along the features axis.',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'copy',\n        docstring: 'Copy the input X or not.',\n        param_type: ['bool', null],\n        expected_shape: null,\n        is_optional: true,\n        default_value: 'None',\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }],\n    nodes: []\n  }],\n  library: 'sklearn',\n  module: 'preprocessing'\n});\n\n/***/ }),\n\n/***/ 1053:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'sklearn.svm',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [{\n    name: 'l1_min_c',\n    docstring: \"\\n    Return the lowest bound for C such that for C in (l1_min_C, infinity)\\n    the model is guaranteed not to be empty. This applies to l1 penalized\\n    classifiers, such as LinearSVC with penalty='l1' and\\n    linear_model.LogisticRegression with penalty='l1'.\\n\\n    This value is valid if class_weight parameter in fit() is not set.\\n\\n    Parameters\\n    ----------\\n    X : array-like or sparse matrix, shape = [n_samples, n_features]\\n        Training vector, where n_samples in the number of samples and\\n        n_features is the number of features.\\n\\n    y : array, shape = [n_samples]\\n        Target vector relative to X\\n\\n    loss : {'squared_hinge', 'log'}, default 'squared_hinge'\\n        Specifies the loss function.\\n        With 'squared_hinge' it is the squared hinge loss (a.k.a. L2 loss).\\n        With 'log' it is the loss of logistic regression models.\\n\\n    fit_intercept : bool, default: True\\n        Specifies if the intercept should be fitted by the model.\\n        It must match the fit() method parameter.\\n\\n    intercept_scaling : float, default: 1\\n        when fit_intercept is True, instance vector x becomes\\n        [x, intercept_scaling],\\n        i.e. a \\\"synthetic\\\" feature with constant value equals to\\n        intercept_scaling is appended to the instance vector.\\n        It must match the fit() method parameter.\\n\\n    Returns\\n    -------\\n    l1_min_c : float\\n        minimum value for C\\n    \",\n    inputs: [{\n      name: 'X',\n      docstring: 'Training vector, where n_samples in the number of samples and n_features is the number of features.',\n      param_type: ['array'],\n      expected_shape: '[n_samples, n_features]',\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'y',\n      docstring: 'Target vector relative to X',\n      param_type: ['array'],\n      expected_shape: '[n_samples]',\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'loss',\n      docstring: \"Specifies the loss function. With 'squared_hinge' it is the squared hinge loss (a.k.a. L2 loss). With 'log' it is the loss of logistic regression models.\",\n      param_type: ['LIST_VALID_OPTIONS'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'squared_hinge',\n      options: ['squared_hinge', 'log', 'default squared_hinge']\n    }, {\n      name: 'fit_intercept',\n      docstring: 'Specifies if the intercept should be fitted by the model. It must match the fit() method parameter.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'intercept_scaling',\n      docstring: 'when fit_intercept is True, instance vector x becomes [x, intercept_scaling], i.e. a \"synthetic\" feature with constant value equals to intercept_scaling is appended to the instance vector. It must match the fit() method parameter.',\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '1',\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      name: 'l1_min_c',\n      docstring: 'minimum value for C',\n      param_type: ['float'],\n      returned: true\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }]\n  }],\n  nodes: [{\n    name: 'OneClassSVM',\n    docstring: 'Unsupervised Outlier Detection.\\n\\n    Estimate the support of a high-dimensional distribution',\n    inputs: [{\n      name: 'kernel',\n      docstring: \"Specifies the kernel type to be used in the algorithm. It must be one of 'linear', 'poly', 'rbf', 'sigmoid', 'precomputed' or a callable. If none is given, 'rbf' will be used. If a callable is given it is used to precompute the kernel matrix.\",\n      param_type: ['LIST_VALID_OPTIONS'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'rbf',\n      options: ['linear', 'poly', 'rbf', 'sigmoid', 'precomputed']\n    }, {\n      name: 'degree',\n      docstring: \"Degree of the polynomial kernel function ('poly'). Ignored by all other kernels.\",\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '3',\n      options: null\n    }, {\n      name: 'gamma',\n      docstring: \"Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.  Current default is 'auto' which uses 1 / n_features, if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.var()) as value of gamma.\",\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'auto',\n      options: null\n    }, {\n      name: 'coef0',\n      docstring: \"Independent term in kernel function. It is only significant in 'poly' and 'sigmoid'.\",\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '0.0',\n      options: null\n    }, {\n      name: 'tol',\n      docstring: 'Tolerance for stopping criterion.',\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'nu',\n      docstring: 'An upper bound on the fraction of training errors and a lower bound of the fraction of support vectors. Should be in the interval (0, 1]. By default 0.5 will be taken.',\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '0.5',\n      options: null\n    }, {\n      name: 'shrinking',\n      docstring: 'Whether to use the shrinking heuristic.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'cache_size',\n      docstring: 'Specify the size of the kernel cache (in MB).',\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'verbose',\n      docstring: 'Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'False',\n      options: null\n    }, {\n      name: 'max_iter',\n      docstring: 'Hard limit on iterations within solver, or -1 for no limit.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '-1',\n      options: null\n    }],\n    outputs: [{\n      name: 'support_',\n      docstring: 'Indices of support vectors.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'support_vectors_',\n      docstring: 'Support vectors.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'dual_coef_',\n      docstring: 'Coefficients of the support vectors in the decision function.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'coef_',\n      docstring: 'Weights assigned to the features (coefficients in the primal problem). This is only available in the case of a linear kernel.  `coef_` is readonly property derived from `dual_coef_` and `support_vectors_`',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'intercept_',\n      docstring: 'Constant in the decision function.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'offset_',\n      docstring: 'Offset used to define the decision function from the raw scores. We have the relation: decision_function = score_samples - `offset_`. The offset is the opposite of `intercept_` and is provided for consistency with other outlier detection algorithms.',\n      param_type: ['float'],\n      returned: false\n    }],\n    node_functions: [{\n      name: '__init__',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_compute_kernel',\n      docstring: 'Return the data transformed by a callable kernel',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_decision_function',\n      docstring: 'Evaluates the decision function for the samples in X.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n\\n        Returns\\n        -------\\n        X : array-like, shape (n_samples, n_class * (n_class-1) / 2)\\n            Returns the decision function of the sample for each class\\n            in the model.\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: '',\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: [{\n        name: 'X',\n        docstring: 'Returns the decision function of the sample for each class in the model.',\n        param_type: ['array'],\n        returned: true\n      }]\n    }, {\n      name: '_dense_decision_function',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_dense_fit',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_dense_predict',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_coef',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_param_names',\n      docstring: 'Get parameter names for the estimator',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_tags',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_sparse_decision_function',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_sparse_fit',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_sparse_predict',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_validate_for_predict',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_validate_targets',\n      docstring: 'Validation of y and class_weight.\\n\\n        Default implementation for SVR and one-class; overridden in BaseSVC.\\n        ',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_warn_from_fit_status',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'decision_function',\n      docstring: 'Signed distance to the separating hyperplane.\\n\\n        Signed distance is positive for an inlier and negative for an outlier.',\n      inputs: [{\n        name: 'X',\n        docstring: 'Data.',\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'dec',\n        docstring: 'Returns the decision function of the samples.',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'fit',\n      docstring: '\\n        Detects the soft boundary of the set of samples X.',\n      inputs: [{\n        name: 'X',\n        docstring: 'Set of samples, where n_samples is the number of samples and n_features is the number of features.',\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'sample_weight',\n        docstring: 'Per-sample weights. Rescale C per sample. Higher weights force the classifier to put more emphasis on these points.',\n        param_type: ['array'],\n        expected_shape: '(n_samples,)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'y',\n        docstring: 'not used, present for API consistency by convention.',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: true,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'fit_predict',\n      docstring: 'Performs fit on X and returns labels for X.\\n\\n        Returns -1 for outliers and 1 for inliers.',\n      inputs: [{\n        name: 'X',\n        docstring: 'Input data.',\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'y',\n        docstring: 'not used, present for API consistency by convention.',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'y',\n        docstring: '1 for inliers, -1 for outliers.',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'predict',\n      docstring: '\\n        Perform classification on samples in X.\\n\\n        For a one-class model, +1 or -1 is returned.',\n      inputs: [{\n        name: 'X',\n        docstring: 'For kernel=\"precomputed\", the expected shape of X is [n_samples_test, n_samples_train]',\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'y_pred',\n        docstring: 'Class labels for samples in X.',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'score_samples',\n      docstring: 'Raw scoring function of the samples.',\n      inputs: [{\n        name: 'X',\n        docstring: '',\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'score_samples',\n        docstring: 'Returns the (unshifted) scoring function of the samples.',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }],\n    nodes: []\n  }, {\n    name: 'SVC',\n    docstring: 'C-Support Vector Classification.\\n\\n    The implementation is based on libsvm. The fit time scales at least\\n    quadratically with the number of samples and may be impractical\\n    beyond tens of thousands of samples.\\n\\n    The multiclass support is handled according to a one-vs-one scheme.\\n\\n    For details on the precise mathematical formulation of the provided\\n    kernel functions and how `gamma`, `coef0` and `degree` affect each\\n    other, see the corresponding section in the narrative documentation:\\n    :ref:`svm_kernels`.',\n    inputs: [{\n      name: 'C',\n      docstring: 'Penalty parameter C of the error term.',\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '1.0',\n      options: null\n    }, {\n      name: 'kernel',\n      docstring: \"Specifies the kernel type to be used in the algorithm. It must be one of 'linear', 'poly', 'rbf', 'sigmoid', 'precomputed' or a callable. If none is given, 'rbf' will be used. If a callable is given it is used to pre-compute the kernel matrix from data matrices; that matrix should be an array of shape ``(n_samples, n_samples)``.\",\n      param_type: ['LIST_VALID_OPTIONS'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'rbf',\n      options: ['linear', 'poly', 'rbf', 'sigmoid', 'precomputed']\n    }, {\n      name: 'degree',\n      docstring: \"Degree of the polynomial kernel function ('poly'). Ignored by all other kernels.\",\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '3',\n      options: null\n    }, {\n      name: 'gamma',\n      docstring: \"Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.  Current default is 'auto' which uses 1 / n_features, if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.var()) as value of gamma.\",\n      param_type: ['float', 'str'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'auto',\n      options: null\n    }, {\n      name: 'coef0',\n      docstring: \"Independent term in kernel function. It is only significant in 'poly' and 'sigmoid'.\",\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '0.0',\n      options: null\n    }, {\n      name: 'shrinking',\n      docstring: 'Whether to use the shrinking heuristic.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'probability',\n      docstring: 'Whether to enable probability estimates. This must be enabled prior to calling `fit`, and will slow down that method.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'False',\n      options: null\n    }, {\n      name: 'tol',\n      docstring: 'Tolerance for stopping criterion.',\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '1e-3',\n      options: null\n    }, {\n      name: 'class_weight',\n      docstring: 'Set the parameter C of class i to class_weight[i]*C for SVC. If not given, all classes are supposed to have weight one. The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``',\n      param_type: ['str', 'dict'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'verbose',\n      docstring: 'Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'False',\n      options: null\n    }, {\n      name: 'max_iter',\n      docstring: 'Hard limit on iterations within solver, or -1 for no limit.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '-1',\n      options: null\n    }, {\n      name: 'decision_function_shape',\n      docstring: \"Whether to return a one-vs-rest ('ovr') decision function of shape (n_samples, n_classes) as all other classifiers, or the original one-vs-one ('ovo') decision function of libsvm which has shape (n_samples, n_classes * (n_classes - 1) / 2). However, one-vs-one ('ovo') is always used as multi-class strategy.\",\n      param_type: ['LIST_VALID_OPTIONS'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'ovr',\n      options: ['ovr', 'ovo']\n    }],\n    outputs: [{\n      name: 'support_',\n      docstring: 'Indices of support vectors.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'support_vectors_',\n      docstring: 'Support vectors.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'n_support_',\n      docstring: 'Number of support vectors for each class.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'dual_coef_',\n      docstring: 'Coefficients of the support vector in the decision function. For multiclass, coefficient for all 1-vs-1 classifiers. The layout of the coefficients in the multiclass case is somewhat non-trivial.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'coef_',\n      docstring: 'Weights assigned to the features (coefficients in the primal problem). This is only available in the case of a linear kernel.  `coef_` is a readonly property derived from `dual_coef_` and `support_vectors_`.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'intercept_',\n      docstring: 'Constants in decision function.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'fit_status_',\n      docstring: '0 if correctly fitted, 1 otherwise (will raise warning)',\n      param_type: ['int'],\n      returned: false\n    }, {\n      name: 'probA_',\n      docstring: '',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'probB_',\n      docstring: 'If probability=True, the parameters learned in Platt scaling to produce probability estimates from decision values. If probability=False, an empty array. Platt scaling uses the logistic function ``1 / (1 + exp(decision_value * probA_ + probB_))`` where ``probA_`` and ``probB_`` are learned from the dataset.',\n      param_type: ['array'],\n      returned: false\n    }],\n    node_functions: [{\n      name: '__init__',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_check_proba',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_compute_kernel',\n      docstring: 'Return the data transformed by a callable kernel',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_decision_function',\n      docstring: 'Evaluates the decision function for the samples in X.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n\\n        Returns\\n        -------\\n        X : array-like, shape (n_samples, n_class * (n_class-1) / 2)\\n            Returns the decision function of the sample for each class\\n            in the model.\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: '',\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: [{\n        name: 'X',\n        docstring: 'Returns the decision function of the sample for each class in the model.',\n        param_type: ['array'],\n        returned: true\n      }]\n    }, {\n      name: '_dense_decision_function',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_dense_fit',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_dense_predict',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_dense_predict_proba',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_coef',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_param_names',\n      docstring: 'Get parameter names for the estimator',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_tags',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_predict_log_proba',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_predict_proba',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_sparse_decision_function',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_sparse_fit',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_sparse_predict',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_sparse_predict_proba',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_validate_for_predict',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_validate_targets',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_warn_from_fit_status',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'decision_function',\n      docstring: \"Evaluates the decision function for the samples in X.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n\\n        Returns\\n        -------\\n        X : array-like, shape (n_samples, n_classes * (n_classes-1) / 2)\\n            Returns the decision function of the sample for each class\\n            in the model.\\n            If decision_function_shape='ovr', the shape is (n_samples,\\n            n_classes).\\n\\n        Notes\\n        -----\\n        If decision_function_shape='ovo', the function values are proportional\\n        to the distance of the samples X to the separating hyperplane. If the\\n        exact distances are required, divide the function values by the norm of\\n        the weight vector (``coef_``). See also `this question\\n        <https://stats.stackexchange.com/questions/14876/\\n        interpreting-distance-from-hyperplane-in-svm>`_ for further details.\\n        If decision_function_shape='ovr', the decision function is a monotonic\\n        transformation of ovo decision function.\\n        \",\n      inputs: [{\n        name: 'X',\n        docstring: 'Data.',\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'X',\n        docstring: \"Returns the decision function of the sample for each class in the model. If decision_function_shape='ovr', the shape is (n_samples, n_classes), (n_samples, n_classes * (n_classes-1) / 2) otherwise\",\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'fit',\n      docstring: 'Fit the SVM model according to the given training data.',\n      inputs: [{\n        name: 'X',\n        docstring: 'Training vectors, where n_samples is the number of samples and n_features is the number of features. For kernel=\"precomputed\", the expected shape of X is (n_samples, n_samples).',\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'y',\n        docstring: 'Target values (class labels in classification, real numbers in regression)',\n        param_type: ['array'],\n        expected_shape: '(n_samples,)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'sample_weight',\n        docstring: 'Per-sample weights. Rescale C per sample. Higher weights force the classifier to put more emphasis on these points.',\n        param_type: ['array'],\n        expected_shape: '(n_samples,)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'predict',\n      docstring: 'Perform classification on samples in X.\\n\\n        For an one-class model, +1 or -1 is returned.',\n      inputs: [{\n        name: 'X',\n        docstring: 'For kernel=\"precomputed\", the expected shape of X is [n_samples_test, n_samples_train]',\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'y_pred',\n        docstring: 'Class labels for samples in X.',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'score',\n      docstring: 'Returns the mean accuracy on the given test data and labels.\\n\\n        In multi-label classification, this is the subset accuracy\\n        which is a harsh metric since you require for each sample that\\n        each label set be correctly predicted.',\n      inputs: [{\n        name: 'X',\n        docstring: 'Test samples.',\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'y',\n        docstring: 'True labels for X.',\n        param_type: ['array'],\n        expected_shape: '(n_samples) or (n_samples, n_outputs)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'sample_weight',\n        docstring: 'Sample weights.',\n        param_type: ['array'],\n        expected_shape: '[n_samples], optional',\n        is_optional: true,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'score',\n        docstring: 'Mean accuracy of self.predict(X) wrt. y.',\n        param_type: ['float'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }],\n    nodes: []\n  }, {\n    name: 'SVR',\n    docstring: 'Epsilon-Support Vector Regression.\\n\\n    The free parameters in the model are C and epsilon.\\n\\n    The implementation is based on libsvm. The fit time complexity\\n    is more than quadratic with the number of samples which makes it hard\\n    to scale to datasets with more than a couple of 10000 samples. ',\n    inputs: [{\n      name: 'kernel',\n      docstring: \"Specifies the kernel type to be used in the algorithm. It must be one of 'linear', 'poly', 'rbf', 'sigmoid', 'precomputed' or a callable. If none is given, 'rbf' will be used. If a callable is given it is used to precompute the kernel matrix.\",\n      param_type: ['LIST_VALID_OPTIONS'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'rbf',\n      options: ['linear', 'poly', 'rbf', 'sigmoid', 'precomputed']\n    }, {\n      name: 'degree',\n      docstring: \"Degree of the polynomial kernel function ('poly'). Ignored by all other kernels.\",\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '3',\n      options: null\n    }, {\n      name: 'gamma',\n      docstring: \"Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.  Current default is 'auto' which uses 1 / n_features, if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.var()) as value of gamma. \",\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'auto',\n      options: null\n    }, {\n      name: 'coef0',\n      docstring: \"Independent term in kernel function. It is only significant in 'poly' and 'sigmoid'.\",\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '0.0',\n      options: null\n    }, {\n      name: 'tol',\n      docstring: 'Tolerance for stopping criterion.',\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '1e-3',\n      options: null\n    }, {\n      name: 'C',\n      docstring: 'Penalty parameter C of the error term.',\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '1.0',\n      options: null\n    }, {\n      name: 'epsilon',\n      docstring: 'Epsilon in the epsilon-SVR model. It specifies the epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value.',\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '0.1',\n      options: null\n    }, {\n      name: 'shrinking',\n      docstring: 'Whether to use the shrinking heuristic.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'cache_size',\n      docstring: 'Specify the size of the kernel cache (in MB).',\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'verbose',\n      docstring: 'Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'False',\n      options: null\n    }, {\n      name: 'max_iter',\n      docstring: 'Hard limit on iterations within solver, or -1 for no limit.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '-1',\n      options: null\n    }],\n    outputs: [{\n      name: 'support_',\n      docstring: 'Indices of support vectors.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'support_vectors_',\n      docstring: 'Support vectors.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'dual_coef_',\n      docstring: 'Coefficients of the support vector in the decision function.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'coef_',\n      docstring: 'Weights assigned to the features (coefficients in the primal problem). This is only available in the case of a linear kernel.  `coef_` is readonly property derived from `dual_coef_` and `support_vectors_`.',\n      param_type: ['array'],\n      returned: false\n    }, {\n      name: 'intercept_',\n      docstring: 'Constants in decision function.',\n      param_type: ['array'],\n      returned: false\n    }],\n    node_functions: [{\n      name: '__init__',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_compute_kernel',\n      docstring: 'Return the data transformed by a callable kernel',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_decision_function',\n      docstring: 'Evaluates the decision function for the samples in X.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n\\n        Returns\\n        -------\\n        X : array-like, shape (n_samples, n_class * (n_class-1) / 2)\\n            Returns the decision function of the sample for each class\\n            in the model.\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: '',\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: [{\n        name: 'X',\n        docstring: 'Returns the decision function of the sample for each class in the model.',\n        param_type: ['array'],\n        returned: true\n      }]\n    }, {\n      name: '_dense_decision_function',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_dense_fit',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_dense_predict',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_coef',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_param_names',\n      docstring: 'Get parameter names for the estimator',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_get_tags',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_sparse_decision_function',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_sparse_fit',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_sparse_predict',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_validate_for_predict',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_validate_targets',\n      docstring: 'Validation of y and class_weight.\\n\\n        Default implementation for SVR and one-class; overridden in BaseSVC.\\n        ',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_warn_from_fit_status',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'fit',\n      docstring: 'Fit the SVM model according to the given training data.',\n      inputs: [{\n        name: 'X',\n        docstring: 'Training vectors, where n_samples is the number of samples and n_features is the number of features. For kernel=\"precomputed\", the expected shape of X is (n_samples, n_samples).',\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'y',\n        docstring: 'Target values (class labels in classification, real numbers in regression)',\n        param_type: ['array'],\n        expected_shape: '(n_samples,)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'sample_weight',\n        docstring: 'Per-sample weights. Rescale C per sample. Higher weights force the classifier to put more emphasis on these points.',\n        param_type: ['array'],\n        expected_shape: '(n_samples,)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'predict',\n      docstring: 'Perform regression on samples in X.\\n\\n        For an one-class model, +1 (inlier) or -1 (outlier) is returned.',\n      inputs: [{\n        name: 'X',\n        docstring: 'For kernel=\"precomputed\", the expected shape of X is (n_samples_test, n_samples_train).',\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'y_pred',\n        docstring: '',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }, {\n      name: 'score',\n      docstring: 'Returns the coefficient of determination R^2 of the prediction.\\n\\n        The coefficient R^2 is defined as (1 - u/v), where u is the residual\\n        sum of squares ((y_true - y_pred) ** 2).sum() and v is the total\\n        sum of squares ((y_true - y_true.mean()) ** 2).sum().\\n        The best possible score is 1.0 and it can be negative (because the\\n        model can be arbitrarily worse). A constant model that always\\n        predicts the expected value of y, disregarding the input features,\\n        would get a R^2 score of 0.0.',\n      inputs: [{\n        name: 'X',\n        docstring: 'Test samples. For some estimators this may be a precomputed kernel matrix instead, shape = (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.',\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'y',\n        docstring: 'True values for X.',\n        param_type: ['array'],\n        expected_shape: '(n_samples) or (n_samples, n_outputs)',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'sample_weight',\n        docstring: 'Sample weights.',\n        param_type: ['array'],\n        expected_shape: '[n_samples], optional',\n        is_optional: true,\n        default_value: null,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }],\n      outputs: [{\n        name: 'score',\n        docstring: 'R^2 of self.predict(X) wrt. y.',\n        param_type: ['float'],\n        returned: true\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }]\n    }],\n    nodes: []\n  }],\n  library: 'sklearn',\n  module: 'svm'\n});\n\n/***/ }),\n\n/***/ 1054:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'sklearn.linear_model',\n  outputs: [],\n  docstring: '',\n  inputs: [],\n  module: 'linear_model',\n  node_functions: [{\n    name: 'enet_path',\n    outputs: [{\n      name: 'alphas',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'The alphas along the path where models are computed.'\n    }, {\n      name: 'coefs',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'Coefficients along the path.'\n    }, {\n      name: 'dual_gaps',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'The dual gaps at the end of the optimization for each alpha.'\n    }, {\n      name: 'n_iters',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'The number of iterations taken by the coordinate descent optimizer to reach the specified tolerance for each alpha. (Is returned when ``return_n_iter`` is set to True).'\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }],\n    docstring: \"Compute elastic net path with coordinate descent\\n\\n    The elastic net optimization function varies for mono and multi-outputs.\\n\\n    For mono-output tasks it is::\\n\\n        1 / (2 * n_samples) * ||y - Xw||^2_2\\n        + alpha * l1_ratio * ||w||_1\\n        + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\\n\\n    For multi-output tasks it is::\\n\\n        (1 / (2 * n_samples)) * ||Y - XW||^Fro_2\\n        + alpha * l1_ratio * ||W||_21\\n        + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\\n\\n    Where::\\n\\n        ||W||_21 = \\\\sum_i \\\\sqrt{\\\\sum_j w_{ij}^2}\\n\\n    i.e. the sum of norm of each row.\\n\\n    Read more in the :ref:`User Guide <elastic_net>`.\\n\\n    Parameters\\n    ----------\\n    X : {array-like}, shape (n_samples, n_features)\\n        Training data. Pass directly as Fortran-contiguous data to avoid\\n        unnecessary memory duplication. If ``y`` is mono-output then ``X``\\n        can be sparse.\\n\\n    y : ndarray, shape (n_samples,) or (n_samples, n_outputs)\\n        Target values\\n\\n    l1_ratio : float, optional\\n        float between 0 and 1 passed to elastic net (scaling between\\n        l1 and l2 penalties). ``l1_ratio=1`` corresponds to the Lasso\\n\\n    eps : float\\n        Length of the path. ``eps=1e-3`` means that\\n        ``alpha_min / alpha_max = 1e-3``\\n\\n    n_alphas : int, optional\\n        Number of alphas along the regularization path\\n\\n    alphas : ndarray, optional\\n        List of alphas where to compute the models.\\n        If None alphas are set automatically\\n\\n    precompute : True | False | 'auto' | array-like\\n        Whether to use a precomputed Gram matrix to speed up\\n        calculations. If set to ``'auto'`` let us decide. The Gram\\n        matrix can also be passed as argument.\\n\\n    Xy : array-like, optional\\n        Xy = np.dot(X.T, y) that can be precomputed. It is useful\\n        only when the Gram matrix is precomputed.\\n\\n    copy_X : boolean, optional, default True\\n        If ``True``, X will be copied; else, it may be overwritten.\\n\\n    coef_init : array, shape (n_features, ) | None\\n        The initial values of the coefficients.\\n\\n    verbose : bool or integer\\n        Amount of verbosity.\\n\\n    return_n_iter : bool\\n        whether to return the number of iterations or not.\\n\\n    positive : bool, default False\\n        If set to True, forces coefficients to be positive.\\n        (Only allowed when ``y.ndim == 1``).\\n\\n    check_input : bool, default True\\n        Skip input validation checks, including the Gram matrix when provided\\n        assuming there are handled by the caller when check_input=False.\\n\\n    **params : kwargs\\n        keyword arguments passed to the coordinate descent solver.\\n\\n    Returns\\n    -------\\n    alphas : array, shape (n_alphas,)\\n        The alphas along the path where models are computed.\\n\\n    coefs : array, shape (n_features, n_alphas) or             (n_outputs, n_features, n_alphas)\\n        Coefficients along the path.\\n\\n    dual_gaps : array, shape (n_alphas,)\\n        The dual gaps at the end of the optimization for each alpha.\\n\\n    n_iters : array-like, shape (n_alphas,)\\n        The number of iterations taken by the coordinate descent optimizer to\\n        reach the specified tolerance for each alpha.\\n        (Is returned when ``return_n_iter`` is set to True).\\n\\n    Notes\\n    -----\\n    For an example, see\\n    :ref:`examples/linear_model/plot_lasso_coordinate_descent_path.py\\n    <sphx_glr_auto_examples_linear_model_plot_lasso_coordinate_descent_path.py>`.\\n\\n    See also\\n    --------\\n    MultiTaskElasticNet\\n    MultiTaskElasticNetCV\\n    ElasticNet\\n    ElasticNetCV\\n    \",\n    inputs: [{\n      name: 'X',\n      default_value: null,\n      param_type: ['LIST_VALID_OPTIONS', 'array'],\n      expected_shape: '(n_samples, n_features)',\n      docstring: 'Training data. Pass directly as Fortran-contiguous data to avoid unnecessary memory duplication. If ``y`` is mono-output then ``X`` can be sparse.',\n      is_optional: false,\n      options: ['array-like}', ' shape (n_samples', ' n_features)']\n    }, {\n      name: 'y',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: '(n_samples,) or (n_samples, n_outputs)',\n      docstring: 'Target values',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'l1_ratio',\n      default_value: null,\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'float between 0 and 1 passed to elastic net (scaling between l1 and l2 penalties). ``l1_ratio=1`` corresponds to the Lasso',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'eps',\n      default_value: null,\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'Length of the path. ``eps=1e-3`` means that ``alpha_min / alpha_max = 1e-3``',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'n_alphas',\n      default_value: null,\n      param_type: ['int'],\n      expected_shape: null,\n      docstring: 'Number of alphas along the regularization path',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'alphas',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: null,\n      docstring: 'List of alphas where to compute the models. If None alphas are set automatically',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'precompute',\n      default_value: null,\n      param_type: ['LIST_VALID_OPTIONS', 'array'],\n      expected_shape: null,\n      docstring: \"Whether to use a precomputed Gram matrix to speed up calculations. If set to ``'auto'`` let us decide. The Gram matrix can also be passed as argument.\",\n      is_optional: false,\n      options: ['True ', ' False ', \" 'auto' \", ' array-like']\n    }, {\n      name: 'Xy',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: null,\n      docstring: 'Xy = np.dot(X.T, y) that can be precomputed. It is useful only when the Gram matrix is precomputed.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'copy_X',\n      default_value: 'True',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'If ``True``, X will be copied; else, it may be overwritten.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'coef_init',\n      default_value: null,\n      param_type: ['LIST_VALID_OPTIONS', 'array', null],\n      expected_shape: '(n_features, ) | None',\n      docstring: 'The initial values of the coefficients.',\n      is_optional: false,\n      options: ['array, shape (n_features, ) ', ' None']\n    }, {\n      name: 'verbose',\n      default_value: null,\n      param_type: ['int', 'bool'],\n      expected_shape: null,\n      docstring: 'Amount of verbosity.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'return_n_iter',\n      default_value: null,\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'whether to return the number of iterations or not.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'positive',\n      default_value: 'False',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'If set to True, forces coefficients to be positive. (Only allowed when ``y.ndim == 1``).',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'check_input',\n      default_value: 'True',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'Skip input validation checks, including the Gram matrix when provided assuming there are handled by the caller when check_input=False.',\n      is_optional: true,\n      options: null\n    }, {\n      name: '**params',\n      default_value: null,\n      param_type: [null],\n      expected_shape: null,\n      docstring: 'keyword arguments passed to the coordinate descent solver.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }]\n  }, {\n    name: 'lars_path',\n    outputs: [{\n      name: 'alphas',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'Maximum of covariances (in absolute value) at each iteration. ``n_alphas`` is either ``max_iter``, ``n_features`` or the number of nodes in the path with ``alpha >= alpha_min``, whichever is smaller.'\n    }, {\n      name: 'active',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'Indices of active variables at the end of the path.'\n    }, {\n      name: 'coefs',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'Coefficients along the path'\n    }, {\n      name: 'n_iter',\n      returned: true,\n      param_type: ['int'],\n      docstring: 'Number of iterations run. Returned only if return_n_iter is set to True.'\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }],\n    docstring: \"Compute Least Angle Regression or Lasso path using LARS algorithm [1]\\n\\n    The optimization objective for the case method='lasso' is::\\n\\n    (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\\n\\n    in the case of method='lars', the objective function is only known in\\n    the form of an implicit equation (see discussion in [1])\\n\\n    Read more in the :ref:`User Guide <least_angle_regression>`.\\n\\n    Parameters\\n    -----------\\n    X : array, shape: (n_samples, n_features)\\n        Input data.\\n\\n    y : array, shape: (n_samples)\\n        Input targets.\\n\\n    Xy : array-like, shape (n_samples,) or (n_samples, n_targets),             optional\\n        Xy = np.dot(X.T, y) that can be precomputed. It is useful\\n        only when the Gram matrix is precomputed.\\n\\n    Gram : None, 'auto', array, shape: (n_features, n_features), optional\\n        Precomputed Gram matrix (X' * X), if ``'auto'``, the Gram\\n        matrix is precomputed from the given X, if there are more samples\\n        than features.\\n\\n    max_iter : integer, optional (default=500)\\n        Maximum number of iterations to perform, set to infinity for no limit.\\n\\n    alpha_min : float, optional (default=0)\\n        Minimum correlation along the path. It corresponds to the\\n        regularization parameter alpha parameter in the Lasso.\\n\\n    method : {'lar', 'lasso'}, optional (default='lar')\\n        Specifies the returned model. Select ``'lar'`` for Least Angle\\n        Regression, ``'lasso'`` for the Lasso.\\n\\n    copy_X : bool, optional (default=True)\\n        If ``False``, ``X`` is overwritten.\\n\\n    eps : float, optional (default=``np.finfo(np.float).eps``)\\n        The machine-precision regularization in the computation of the\\n        Cholesky diagonal factors. Increase this for very ill-conditioned\\n        systems.\\n\\n    copy_Gram : bool, optional (default=True)\\n        If ``False``, ``Gram`` is overwritten.\\n\\n    verbose : int (default=0)\\n        Controls output verbosity.\\n\\n    return_path : bool, optional (default=True)\\n        If ``return_path==True`` returns the entire path, else returns only the\\n        last point of the path.\\n\\n    return_n_iter : bool, optional (default=False)\\n        Whether to return the number of iterations.\\n\\n    positive : boolean (default=False)\\n        Restrict coefficients to be >= 0.\\n        This option is only allowed with method 'lasso'. Note that the model\\n        coefficients will not converge to the ordinary-least-squares solution\\n        for small values of alpha. Only coefficients up to the smallest alpha\\n        value (``alphas_[alphas_ > 0.].min()`` when fit_path=True) reached by\\n        the stepwise Lars-Lasso algorithm are typically in congruence with the\\n        solution of the coordinate descent lasso_path function.\\n\\n    Returns\\n    --------\\n    alphas : array, shape: [n_alphas + 1]\\n        Maximum of covariances (in absolute value) at each iteration.\\n        ``n_alphas`` is either ``max_iter``, ``n_features`` or the\\n        number of nodes in the path with ``alpha >= alpha_min``, whichever\\n        is smaller.\\n\\n    active : array, shape [n_alphas]\\n        Indices of active variables at the end of the path.\\n\\n    coefs : array, shape (n_features, n_alphas + 1)\\n        Coefficients along the path\\n\\n    n_iter : int\\n        Number of iterations run. Returned only if return_n_iter is set\\n        to True.\\n\\n    See also\\n    --------\\n    lasso_path\\n    LassoLars\\n    Lars\\n    LassoLarsCV\\n    LarsCV\\n    sklearn.decomposition.sparse_encode\\n\\n    References\\n    ----------\\n    .. [1] \\\"Least Angle Regression\\\", Effron et al.\\n           http://statweb.stanford.edu/~tibs/ftp/lars.pdf\\n\\n    .. [2] `Wikipedia entry on the Least-angle regression\\n           <https://en.wikipedia.org/wiki/Least-angle_regression>`_\\n\\n    .. [3] `Wikipedia entry on the Lasso\\n           <https://en.wikipedia.org/wiki/Lasso_(statistics)>`_\\n\\n    \",\n    inputs: [{\n      name: 'X',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: ': (n_samples, n_features)',\n      docstring: 'Input data.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'y',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: ': (n_samples)',\n      docstring: 'Input targets.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'Xy',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: '(n_samples,) or (n_samples, n_targets),             optional',\n      docstring: 'Xy = np.dot(X.T, y) that can be precomputed. It is useful only when the Gram matrix is precomputed.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'Gram',\n      default_value: null,\n      param_type: ['array', null],\n      expected_shape: ': (n_features, n_features), optional',\n      docstring: \"Precomputed Gram matrix (X' * X), if ``'auto'``, the Gram matrix is precomputed from the given X, if there are more samples than features.\",\n      is_optional: true,\n      options: null\n    }, {\n      name: 'max_iter',\n      default_value: '500',\n      param_type: ['int'],\n      expected_shape: null,\n      docstring: 'Maximum number of iterations to perform, set to infinity for no limit.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'alpha_min',\n      default_value: '0',\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'Minimum correlation along the path. It corresponds to the regularization parameter alpha parameter in the Lasso.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'method',\n      default_value: 'lar',\n      param_type: ['LIST_VALID_OPTIONS'],\n      expected_shape: null,\n      docstring: \"Specifies the returned model. Select ``'lar'`` for Least Angle Regression, ``'lasso'`` for the Lasso.\",\n      is_optional: true,\n      options: ['lar', \" 'lasso'}\", \" optional (default='lar')\"]\n    }, {\n      name: 'copy_X',\n      default_value: 'True',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'If ``False``, ``X`` is overwritten.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'eps',\n      default_value: '``np.finfonp.float.eps``',\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'The machine-precision regularization in the computation of the Cholesky diagonal factors. Increase this for very ill-conditioned systems.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'copy_Gram',\n      default_value: 'True',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'If ``False``, ``Gram`` is overwritten.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'verbose',\n      default_value: '0',\n      param_type: ['int'],\n      expected_shape: null,\n      docstring: 'Controls output verbosity.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'return_path',\n      default_value: 'True',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'If ``return_path==True`` returns the entire path, else returns only the last point of the path.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'return_n_iter',\n      default_value: 'False',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'Whether to return the number of iterations.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'positive',\n      default_value: 'False',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: \"Restrict coefficients to be >= 0. This option is only allowed with method 'lasso'. Note that the model coefficients will not converge to the ordinary-least-squares solution for small values of alpha. Only coefficients up to the smallest alpha value (``alphas_[alphas_ > 0.].min()`` when fit_path=True) reached by the stepwise Lars-Lasso algorithm are typically in congruence with the solution of the coordinate descent lasso_path function.\",\n      is_optional: true,\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }]\n  }, {\n    name: 'lasso_path',\n    outputs: [{\n      name: 'alphas',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'The alphas along the path where models are computed.'\n    }, {\n      name: 'coefs',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'Coefficients along the path.'\n    }, {\n      name: 'dual_gaps',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'The dual gaps at the end of the optimization for each alpha.'\n    }, {\n      name: 'n_iters',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'The number of iterations taken by the coordinate descent optimizer to reach the specified tolerance for each alpha.'\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }],\n    docstring: \"Compute Lasso path with coordinate descent\\n\\n    The Lasso optimization function varies for mono and multi-outputs.\\n\\n    For mono-output tasks it is::\\n\\n        (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\\n\\n    For multi-output tasks it is::\\n\\n        (1 / (2 * n_samples)) * ||Y - XW||^2_Fro + alpha * ||W||_21\\n\\n    Where::\\n\\n        ||W||_21 = \\\\sum_i \\\\sqrt{\\\\sum_j w_{ij}^2}\\n\\n    i.e. the sum of norm of each row.\\n\\n    Read more in the :ref:`User Guide <lasso>`.\\n\\n    Parameters\\n    ----------\\n    X : {array-like, sparse matrix}, shape (n_samples, n_features)\\n        Training data. Pass directly as Fortran-contiguous data to avoid\\n        unnecessary memory duplication. If ``y`` is mono-output then ``X``\\n        can be sparse.\\n\\n    y : ndarray, shape (n_samples,), or (n_samples, n_outputs)\\n        Target values\\n\\n    eps : float, optional\\n        Length of the path. ``eps=1e-3`` means that\\n        ``alpha_min / alpha_max = 1e-3``\\n\\n    n_alphas : int, optional\\n        Number of alphas along the regularization path\\n\\n    alphas : ndarray, optional\\n        List of alphas where to compute the models.\\n        If ``None`` alphas are set automatically\\n\\n    precompute : True | False | 'auto' | array-like\\n        Whether to use a precomputed Gram matrix to speed up\\n        calculations. If set to ``'auto'`` let us decide. The Gram\\n        matrix can also be passed as argument.\\n\\n    Xy : array-like, optional\\n        Xy = np.dot(X.T, y) that can be precomputed. It is useful\\n        only when the Gram matrix is precomputed.\\n\\n    copy_X : boolean, optional, default True\\n        If ``True``, X will be copied; else, it may be overwritten.\\n\\n    coef_init : array, shape (n_features, ) | None\\n        The initial values of the coefficients.\\n\\n    verbose : bool or integer\\n        Amount of verbosity.\\n\\n    return_n_iter : bool\\n        whether to return the number of iterations or not.\\n\\n    positive : bool, default False\\n        If set to True, forces coefficients to be positive.\\n        (Only allowed when ``y.ndim == 1``).\\n\\n    **params : kwargs\\n        keyword arguments passed to the coordinate descent solver.\\n\\n    Returns\\n    -------\\n    alphas : array, shape (n_alphas,)\\n        The alphas along the path where models are computed.\\n\\n    coefs : array, shape (n_features, n_alphas) or             (n_outputs, n_features, n_alphas)\\n        Coefficients along the path.\\n\\n    dual_gaps : array, shape (n_alphas,)\\n        The dual gaps at the end of the optimization for each alpha.\\n\\n    n_iters : array-like, shape (n_alphas,)\\n        The number of iterations taken by the coordinate descent optimizer to\\n        reach the specified tolerance for each alpha.\\n\\n    Notes\\n    -----\\n    For an example, see\\n    :ref:`examples/linear_model/plot_lasso_coordinate_descent_path.py\\n    <sphx_glr_auto_examples_linear_model_plot_lasso_coordinate_descent_path.py>`.\\n\\n    To avoid unnecessary memory duplication the X argument of the fit method\\n    should be directly passed as a Fortran-contiguous numpy array.\\n\\n    Note that in certain cases, the Lars solver may be significantly\\n    faster to implement this functionality. In particular, linear\\n    interpolation can be used to retrieve model coefficients between the\\n    values output by lars_path\\n\\n    Examples\\n    ---------\\n\\n    Comparing lasso_path and lars_path with interpolation:\\n\\n    >>> X = np.array([[1, 2, 3.1], [2.3, 5.4, 4.3]]).T\\n    >>> y = np.array([1, 2, 3.1])\\n    >>> # Use lasso_path to compute a coefficient path\\n    >>> _, coef_path, _ = lasso_path(X, y, alphas=[5., 1., .5])\\n    >>> print(coef_path)\\n    [[0.         0.         0.46874778]\\n     [0.2159048  0.4425765  0.23689075]]\\n\\n    >>> # Now use lars_path and 1D linear interpolation to compute the\\n    >>> # same path\\n    >>> from sklearn.linear_model import lars_path\\n    >>> alphas, active, coef_path_lars = lars_path(X, y, method='lasso')\\n    >>> from scipy import interpolate\\n    >>> coef_path_continuous = interpolate.interp1d(alphas[::-1],\\n    ...                                             coef_path_lars[:, ::-1])\\n    >>> print(coef_path_continuous([5., 1., .5]))\\n    [[0.         0.         0.46915237]\\n     [0.2159048  0.4425765  0.23668876]]\\n\\n\\n    See also\\n    --------\\n    lars_path\\n    Lasso\\n    LassoLars\\n    LassoCV\\n    LassoLarsCV\\n    sklearn.decomposition.sparse_encode\\n    \",\n    inputs: [{\n      name: 'X',\n      default_value: null,\n      param_type: ['LIST_VALID_OPTIONS', 'array'],\n      expected_shape: '(n_samples, n_features)',\n      docstring: 'Training data. Pass directly as Fortran-contiguous data to avoid unnecessary memory duplication. If ``y`` is mono-output then ``X`` can be sparse.',\n      is_optional: false,\n      options: ['array-like', ' sparse matrix}', ' shape (n_samples', ' n_features)']\n    }, {\n      name: 'y',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: '(n_samples,), or (n_samples, n_outputs)',\n      docstring: 'Target values',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'eps',\n      default_value: null,\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'Length of the path. ``eps=1e-3`` means that ``alpha_min / alpha_max = 1e-3``',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'n_alphas',\n      default_value: null,\n      param_type: ['int'],\n      expected_shape: null,\n      docstring: 'Number of alphas along the regularization path',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'alphas',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: null,\n      docstring: 'List of alphas where to compute the models. If ``None`` alphas are set automatically',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'precompute',\n      default_value: null,\n      param_type: ['LIST_VALID_OPTIONS', 'array'],\n      expected_shape: null,\n      docstring: \"Whether to use a precomputed Gram matrix to speed up calculations. If set to ``'auto'`` let us decide. The Gram matrix can also be passed as argument.\",\n      is_optional: false,\n      options: ['True ', ' False ', \" 'auto' \", ' array-like']\n    }, {\n      name: 'Xy',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: null,\n      docstring: 'Xy = np.dot(X.T, y) that can be precomputed. It is useful only when the Gram matrix is precomputed.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'copy_X',\n      default_value: 'True',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'If ``True``, X will be copied; else, it may be overwritten.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'coef_init',\n      default_value: null,\n      param_type: ['LIST_VALID_OPTIONS', 'array', null],\n      expected_shape: '(n_features, ) | None',\n      docstring: 'The initial values of the coefficients.',\n      is_optional: false,\n      options: ['array, shape (n_features, ) ', ' None']\n    }, {\n      name: 'verbose',\n      default_value: null,\n      param_type: ['int', 'bool'],\n      expected_shape: null,\n      docstring: 'Amount of verbosity.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'return_n_iter',\n      default_value: null,\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'whether to return the number of iterations or not.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'positive',\n      default_value: 'False',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'If set to True, forces coefficients to be positive. (Only allowed when ``y.ndim == 1``).',\n      is_optional: true,\n      options: null\n    }, {\n      name: '**params',\n      default_value: null,\n      param_type: [null],\n      expected_shape: null,\n      docstring: 'keyword arguments passed to the coordinate descent solver.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }]\n  }, {\n    name: 'lasso_stability_path',\n    outputs: [{\n      name: 'alphas_grid',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'The grid points between 0 and 1: alpha/alpha_max  scores_path : array, shape = [n_features, n_grid]     The scores for each feature along the path.'\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }],\n    docstring: 'DEPRECATED: The function lasso_stability_path is deprecated in 0.19 and will be removed in 0.21.\\n\\nStability path based on randomized Lasso estimates\\n\\n    Parameters\\n    ----------\\n    X : array-like, shape = [n_samples, n_features]\\n        training data.\\n\\n    y : array-like, shape = [n_samples]\\n        target values.\\n\\n    scaling : float, optional, default=0.5\\n        The alpha parameter in the stability selection article used to\\n        randomly scale the features. Should be between 0 and 1.\\n\\n    random_state : int, RandomState instance or None, optional, default=None\\n        The generator used to randomize the design.  If int, random_state is\\n        the seed used by the random number generator; If RandomState instance,\\n        random_state is the random number generator; If None, the random number\\n        generator is the RandomState instance used by `np.random`.\\n\\n    n_resampling : int, optional, default=200\\n        Number of randomized models.\\n\\n    n_grid : int, optional, default=100\\n        Number of grid points. The path is linearly reinterpolated\\n        on a grid between 0 and 1 before computing the scores.\\n\\n    sample_fraction : float, optional, default=0.75\\n        The fraction of samples to be used in each randomized design.\\n        Should be between 0 and 1. If 1, all samples are used.\\n\\n    eps : float, optional\\n        Smallest value of alpha / alpha_max considered\\n\\n    n_jobs : int or None, optional (default=None)\\n        Number of CPUs to use during the resampling.\\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\\n        for more details.\\n\\n    verbose : boolean or integer, optional\\n        Sets the verbosity amount\\n\\n    Returns\\n    -------\\n    alphas_grid : array, shape ~ [n_grid]\\n        The grid points between 0 and 1: alpha/alpha_max\\n\\n    scores_path : array, shape = [n_features, n_grid]\\n        The scores for each feature along the path.\\n    ',\n    inputs: [{\n      name: 'X',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: '[n_samples, n_features]',\n      docstring: 'training data.  y : array-like, shape = [n_samples]     target values.  scaling : float, optional, default=0.5     The alpha parameter in the stability selection article used to     randomly scale the features. Should be between 0 and 1.  random_state : int, RandomState instance or None, optional, default=None     The generator used to randomize the design.  If int, random_state is     the seed used by the random number generator; If RandomState instance,     random_state is the random number generator; If None, the random number     generator is the RandomState instance used by `np.random`.  n_resampling : int, optional, default=200     Number of randomized models.  n_grid : int, optional, default=100     Number of grid points. The path is linearly reinterpolated     on a grid between 0 and 1 before computing the scores.  sample_fraction : float, optional, default=0.75     The fraction of samples to be used in each randomized design.     Should be between 0 and 1. If 1, all samples are used.  eps : float, optional     Smallest value of alpha / alpha_max considered  n_jobs : int or None, optional (default=None)     Number of CPUs to use during the resampling.     ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.     ``-1`` means using all processors. See :term:`Glossary <n_jobs>`     for more details.  verbose : boolean or integer, optional     Sets the verbosity amount',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }]\n  }, {\n    name: 'logistic_regression_path',\n    outputs: [{\n      name: 'coefs',\n      returned: true,\n      param_type: ['array'],\n      docstring: \"List of coefficients for the Logistic Regression model. If fit_intercept is set to True then the second dimension will be n_features + 1, where the last item represents the intercept. For ``multiclass='multinomial'``, the shape is (n_classes, n_cs, n_features) or (n_classes, n_cs, n_features + 1).\"\n    }, {\n      name: 'Cs',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'Grid of Cs used for cross-validation.'\n    }, {\n      name: 'n_iter',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'Actual number of iteration for each Cs.'\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }],\n    docstring: \"Compute a Logistic Regression model for a list of regularization\\n    parameters.\\n\\n    This is an implementation that uses the result of the previous model\\n    to speed up computations along the set of solutions, making it faster\\n    than sequentially calling LogisticRegression for the different parameters.\\n    Note that there will be no speedup with liblinear solver, since it does\\n    not handle warm-starting.\\n\\n    Read more in the :ref:`User Guide <logistic_regression>`.\\n\\n    Parameters\\n    ----------\\n    X : array-like or sparse matrix, shape (n_samples, n_features)\\n        Input data.\\n\\n    y : array-like, shape (n_samples,) or (n_samples, n_targets)\\n        Input data, target values.\\n\\n    pos_class : int, None\\n        The class with respect to which we perform a one-vs-all fit.\\n        If None, then it is assumed that the given problem is binary.\\n\\n    Cs : int | array-like, shape (n_cs,)\\n        List of values for the regularization parameter or integer specifying\\n        the number of regularization parameters that should be used. In this\\n        case, the parameters will be chosen in a logarithmic scale between\\n        1e-4 and 1e4.\\n\\n    fit_intercept : bool\\n        Whether to fit an intercept for the model. In this case the shape of\\n        the returned array is (n_cs, n_features + 1).\\n\\n    max_iter : int\\n        Maximum number of iterations for the solver.\\n\\n    tol : float\\n        Stopping criterion. For the newton-cg and lbfgs solvers, the iteration\\n        will stop when ``max{|g_i | i = 1, ..., n} <= tol``\\n        where ``g_i`` is the i-th component of the gradient.\\n\\n    verbose : int\\n        For the liblinear and lbfgs solvers set verbose to any positive\\n        number for verbosity.\\n\\n    solver : {'lbfgs', 'newton-cg', 'liblinear', 'sag', 'saga'}\\n        Numerical solver to use.\\n\\n    coef : array-like, shape (n_features,), default None\\n        Initialization value for coefficients of logistic regression.\\n        Useless for liblinear solver.\\n\\n    class_weight : dict or 'balanced', optional\\n        Weights associated with classes in the form ``{class_label: weight}``.\\n        If not given, all classes are supposed to have weight one.\\n\\n        The \\\"balanced\\\" mode uses the values of y to automatically adjust\\n        weights inversely proportional to class frequencies in the input data\\n        as ``n_samples / (n_classes * np.bincount(y))``.\\n\\n        Note that these weights will be multiplied with sample_weight (passed\\n        through the fit method) if sample_weight is specified.\\n\\n    dual : bool\\n        Dual or primal formulation. Dual formulation is only implemented for\\n        l2 penalty with liblinear solver. Prefer dual=False when\\n        n_samples > n_features.\\n\\n    penalty : str, 'l1' or 'l2'\\n        Used to specify the norm used in the penalization. The 'newton-cg',\\n        'sag' and 'lbfgs' solvers support only l2 penalties.\\n\\n    intercept_scaling : float, default 1.\\n        Useful only when the solver 'liblinear' is used\\n        and self.fit_intercept is set to True. In this case, x becomes\\n        [x, self.intercept_scaling],\\n        i.e. a \\\"synthetic\\\" feature with constant value equal to\\n        intercept_scaling is appended to the instance vector.\\n        The intercept becomes ``intercept_scaling * synthetic_feature_weight``.\\n\\n        Note! the synthetic feature weight is subject to l1/l2 regularization\\n        as all other features.\\n        To lessen the effect of regularization on synthetic feature weight\\n        (and therefore on the intercept) intercept_scaling has to be increased.\\n\\n    multi_class : str, {'ovr', 'multinomial', 'auto'}, default: 'ovr'\\n        If the option chosen is 'ovr', then a binary problem is fit for each\\n        label. For 'multinomial' the loss minimised is the multinomial loss fit\\n        across the entire probability distribution, *even when the data is\\n        binary*. 'multinomial' is unavailable when solver='liblinear'.\\n        'auto' selects 'ovr' if the data is binary, or if solver='liblinear',\\n        and otherwise selects 'multinomial'.\\n\\n        .. versionadded:: 0.18\\n           Stochastic Average Gradient descent solver for 'multinomial' case.\\n        .. versionchanged:: 0.20\\n            Default will change from 'ovr' to 'auto' in 0.22.\\n\\n    random_state : int, RandomState instance or None, optional, default None\\n        The seed of the pseudo random number generator to use when shuffling\\n        the data.  If int, random_state is the seed used by the random number\\n        generator; If RandomState instance, random_state is the random number\\n        generator; If None, the random number generator is the RandomState\\n        instance used by `np.random`. Used when ``solver`` == 'sag' or\\n        'liblinear'.\\n\\n    check_input : bool, default True\\n        If False, the input arrays X and y will not be checked.\\n\\n    max_squared_sum : float, default None\\n        Maximum squared sum of X over samples. Used only in SAG solver.\\n        If None, it will be computed, going through all the samples.\\n        The value should be precomputed to speed up cross validation.\\n\\n    sample_weight : array-like, shape(n_samples,) optional\\n        Array of weights that are assigned to individual samples.\\n        If not provided, then each sample is given unit weight.\\n\\n    Returns\\n    -------\\n    coefs : ndarray, shape (n_cs, n_features) or (n_cs, n_features + 1)\\n        List of coefficients for the Logistic Regression model. If\\n        fit_intercept is set to True then the second dimension will be\\n        n_features + 1, where the last item represents the intercept. For\\n        ``multiclass='multinomial'``, the shape is (n_classes, n_cs,\\n        n_features) or (n_classes, n_cs, n_features + 1).\\n\\n    Cs : ndarray\\n        Grid of Cs used for cross-validation.\\n\\n    n_iter : array, shape (n_cs,)\\n        Actual number of iteration for each Cs.\\n\\n    Notes\\n    -----\\n    You might get slightly different results with the solver liblinear than\\n    with the others since this uses LIBLINEAR which penalizes the intercept.\\n\\n    .. versionchanged:: 0.19\\n        The \\\"copy\\\" parameter was removed.\\n    \",\n    inputs: [{\n      name: 'X',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: '(n_samples, n_features)',\n      docstring: 'Input data.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'y',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: '(n_samples,) or (n_samples, n_targets)',\n      docstring: 'Input data, target values.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'pos_class',\n      default_value: null,\n      param_type: ['int', null],\n      expected_shape: null,\n      docstring: 'The class with respect to which we perform a one-vs-all fit. If None, then it is assumed that the given problem is binary.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'Cs',\n      default_value: null,\n      param_type: ['LIST_VALID_OPTIONS', 'array', 'int'],\n      expected_shape: '(n_cs,)',\n      docstring: 'List of values for the regularization parameter or integer specifying the number of regularization parameters that should be used. In this case, the parameters will be chosen in a logarithmic scale between 1e-4 and 1e4.',\n      is_optional: false,\n      options: ['int ', ' array-like, shape (n_cs,)']\n    }, {\n      name: 'fit_intercept',\n      default_value: null,\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'Whether to fit an intercept for the model. In this case the shape of the returned array is (n_cs, n_features + 1).',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'max_iter',\n      default_value: null,\n      param_type: ['int'],\n      expected_shape: null,\n      docstring: 'Maximum number of iterations for the solver.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'tol',\n      default_value: null,\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'Stopping criterion. For the newton-cg and lbfgs solvers, the iteration will stop when ``max{|g_i | i = 1, ..., n} <= tol`` where ``g_i`` is the i-th component of the gradient.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'verbose',\n      default_value: null,\n      param_type: ['int'],\n      expected_shape: null,\n      docstring: 'For the liblinear and lbfgs solvers set verbose to any positive number for verbosity.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'solver',\n      default_value: null,\n      param_type: ['LIST_VALID_OPTIONS'],\n      expected_shape: null,\n      docstring: 'Numerical solver to use.',\n      is_optional: false,\n      options: ['lbfgs', \" 'newton-cg\", \" 'liblinear\", \" 'sag\", \" 'saga\"]\n    }, {\n      name: 'coef',\n      default_value: 'None',\n      param_type: ['array', null],\n      expected_shape: '(n_features,), default None',\n      docstring: 'Initialization value for coefficients of logistic regression. Useless for liblinear solver.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'class_weight',\n      default_value: null,\n      param_type: ['dict'],\n      expected_shape: null,\n      docstring: 'Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one.  The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``.  Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'dual',\n      default_value: null,\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'Dual or primal formulation. Dual formulation is only implemented for l2 penalty with liblinear solver. Prefer dual=False when n_samples > n_features.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'penalty',\n      default_value: null,\n      param_type: ['str'],\n      expected_shape: null,\n      docstring: \"Used to specify the norm used in the penalization. The 'newton-cg', 'sag' and 'lbfgs' solvers support only l2 penalties.\",\n      is_optional: false,\n      options: null\n    }, {\n      name: 'intercept_scaling',\n      default_value: '1.',\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'Useful only when the solver \\'liblinear\\' is used and self.fit_intercept is set to True. In this case, x becomes [x, self.intercept_scaling], i.e. a \"synthetic\" feature with constant value equal to intercept_scaling is appended to the instance vector. The intercept becomes ``intercept_scaling * synthetic_feature_weight``.  Note! the synthetic feature weight is subject to l1/l2 regularization as all other features. To lessen the effect of regularization on synthetic feature weight (and therefore on the intercept) intercept_scaling has to be increased.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'multi_class',\n      default_value: 'ovr',\n      param_type: ['LIST_VALID_OPTIONS', 'str'],\n      expected_shape: null,\n      docstring: \"If the option chosen is 'ovr', then a binary problem is fit for each label. For 'multinomial' the loss minimised is the multinomial loss fit across the entire probability distribution, *even when the data is binary*. 'multinomial' is unavailable when solver='liblinear'. 'auto' selects 'ovr' if the data is binary, or if solver='liblinear', and otherwise selects 'multinomial'.  .. versionadded:: 0.18    Stochastic Average Gradient descent solver for 'multinomial' case. .. versionchanged:: 0.20     Default will change from 'ovr' to 'auto' in 0.22.\",\n      is_optional: true,\n      options: ['str', \" {'ovr\", \" 'multinomial\", \" 'auto'}\", \" default: 'ovr\"]\n    }, {\n      name: 'random_state',\n      default_value: 'None',\n      param_type: ['int', null],\n      expected_shape: null,\n      docstring: \"The seed of the pseudo random number generator to use when shuffling the data.  If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`. Used when ``solver`` == 'sag' or 'liblinear'.\",\n      is_optional: true,\n      options: null\n    }, {\n      name: 'check_input',\n      default_value: 'True',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'If False, the input arrays X and y will not be checked.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'max_squared_sum',\n      default_value: 'None',\n      param_type: ['float', null],\n      expected_shape: null,\n      docstring: 'Maximum squared sum of X over samples. Used only in SAG solver. If None, it will be computed, going through all the samples. The value should be precomputed to speed up cross validation.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'sample_weight',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: '(n_samples,) optional',\n      docstring: 'Array of weights that are assigned to individual samples. If not provided, then each sample is given unit weight.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }]\n  }, {\n    name: 'orthogonal_mp',\n    outputs: [{\n      name: 'coef',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'Coefficients of the OMP solution. If `return_path=True`, this contains the whole coefficient path. In this case its shape is (n_features, n_features) or (n_features, n_targets, n_features) and iterating over the last axis yields coefficients in increasing order of active features.'\n    }, {\n      name: 'n_iters',\n      returned: true,\n      param_type: ['array', 'int'],\n      docstring: 'Number of active features across every target. Returned only if `return_n_iter` is set to True.'\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }],\n    docstring: \"Orthogonal Matching Pursuit (OMP)\\n\\n    Solves n_targets Orthogonal Matching Pursuit problems.\\n    An instance of the problem has the form:\\n\\n    When parametrized by the number of non-zero coefficients using\\n    `n_nonzero_coefs`:\\n    argmin ||y - X\\\\gamma||^2 subject to ||\\\\gamma||_0 <= n_{nonzero coefs}\\n\\n    When parametrized by error using the parameter `tol`:\\n    argmin ||\\\\gamma||_0 subject to ||y - X\\\\gamma||^2 <= tol\\n\\n    Read more in the :ref:`User Guide <omp>`.\\n\\n    Parameters\\n    ----------\\n    X : array, shape (n_samples, n_features)\\n        Input data. Columns are assumed to have unit norm.\\n\\n    y : array, shape (n_samples,) or (n_samples, n_targets)\\n        Input targets\\n\\n    n_nonzero_coefs : int\\n        Desired number of non-zero entries in the solution. If None (by\\n        default) this value is set to 10% of n_features.\\n\\n    tol : float\\n        Maximum norm of the residual. If not None, overrides n_nonzero_coefs.\\n\\n    precompute : {True, False, 'auto'},\\n        Whether to perform precomputations. Improves performance when n_targets\\n        or n_samples is very large.\\n\\n    copy_X : bool, optional\\n        Whether the design matrix X must be copied by the algorithm. A false\\n        value is only helpful if X is already Fortran-ordered, otherwise a\\n        copy is made anyway.\\n\\n    return_path : bool, optional. Default: False\\n        Whether to return every value of the nonzero coefficients along the\\n        forward path. Useful for cross-validation.\\n\\n    return_n_iter : bool, optional default False\\n        Whether or not to return the number of iterations.\\n\\n    Returns\\n    -------\\n    coef : array, shape (n_features,) or (n_features, n_targets)\\n        Coefficients of the OMP solution. If `return_path=True`, this contains\\n        the whole coefficient path. In this case its shape is\\n        (n_features, n_features) or (n_features, n_targets, n_features) and\\n        iterating over the last axis yields coefficients in increasing order\\n        of active features.\\n\\n    n_iters : array-like or int\\n        Number of active features across every target. Returned only if\\n        `return_n_iter` is set to True.\\n\\n    See also\\n    --------\\n    OrthogonalMatchingPursuit\\n    orthogonal_mp_gram\\n    lars_path\\n    decomposition.sparse_encode\\n\\n    Notes\\n    -----\\n    Orthogonal matching pursuit was introduced in S. Mallat, Z. Zhang,\\n    Matching pursuits with time-frequency dictionaries, IEEE Transactions on\\n    Signal Processing, Vol. 41, No. 12. (December 1993), pp. 3397-3415.\\n    (http://blanche.polytechnique.fr/~mallat/papiers/MallatPursuit93.pdf)\\n\\n    This implementation is based on Rubinstein, R., Zibulevsky, M. and Elad,\\n    M., Efficient Implementation of the K-SVD Algorithm using Batch Orthogonal\\n    Matching Pursuit Technical Report - CS Technion, April 2008.\\n    http://www.cs.technion.ac.il/~ronrubin/Publications/KSVD-OMP-v2.pdf\\n\\n    \",\n    inputs: [{\n      name: 'X',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: '(n_samples, n_features)',\n      docstring: 'Input data. Columns are assumed to have unit norm.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'y',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: '(n_samples,) or (n_samples, n_targets)',\n      docstring: 'Input targets',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'n_nonzero_coefs',\n      default_value: null,\n      param_type: ['int'],\n      expected_shape: null,\n      docstring: 'Desired number of non-zero entries in the solution. If None (by default) this value is set to 10% of n_features.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'tol',\n      default_value: null,\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'Maximum norm of the residual. If not None, overrides n_nonzero_coefs.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'precompute',\n      default_value: null,\n      param_type: ['LIST_VALID_OPTIONS'],\n      expected_shape: null,\n      docstring: 'Whether to perform precomputations. Improves performance when n_targets or n_samples is very large.',\n      is_optional: false,\n      options: ['True', ' False', \" 'auto'}\", '']\n    }, {\n      name: 'copy_X',\n      default_value: null,\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'Whether the design matrix X must be copied by the algorithm. A false value is only helpful if X is already Fortran-ordered, otherwise a copy is made anyway.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'return_path',\n      default_value: null,\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'Whether to return every value of the nonzero coefficients along the forward path. Useful for cross-validation.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'return_n_iter',\n      default_value: 'False',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'Whether or not to return the number of iterations.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }]\n  }, {\n    name: 'orthogonal_mp_gram',\n    outputs: [{\n      name: 'coef',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'Coefficients of the OMP solution. If `return_path=True`, this contains the whole coefficient path. In this case its shape is (n_features, n_features) or (n_features, n_targets, n_features) and iterating over the last axis yields coefficients in increasing order of active features.'\n    }, {\n      name: 'n_iters',\n      returned: true,\n      param_type: ['array', 'int'],\n      docstring: 'Number of active features across every target. Returned only if `return_n_iter` is set to True.'\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }],\n    docstring: 'Gram Orthogonal Matching Pursuit (OMP)\\n\\n    Solves n_targets Orthogonal Matching Pursuit problems using only\\n    the Gram matrix X.T * X and the product X.T * y.\\n\\n    Read more in the :ref:`User Guide <omp>`.\\n\\n    Parameters\\n    ----------\\n    Gram : array, shape (n_features, n_features)\\n        Gram matrix of the input data: X.T * X\\n\\n    Xy : array, shape (n_features,) or (n_features, n_targets)\\n        Input targets multiplied by X: X.T * y\\n\\n    n_nonzero_coefs : int\\n        Desired number of non-zero entries in the solution. If None (by\\n        default) this value is set to 10% of n_features.\\n\\n    tol : float\\n        Maximum norm of the residual. If not None, overrides n_nonzero_coefs.\\n\\n    norms_squared : array-like, shape (n_targets,)\\n        Squared L2 norms of the lines of y. Required if tol is not None.\\n\\n    copy_Gram : bool, optional\\n        Whether the gram matrix must be copied by the algorithm. A false\\n        value is only helpful if it is already Fortran-ordered, otherwise a\\n        copy is made anyway.\\n\\n    copy_Xy : bool, optional\\n        Whether the covariance vector Xy must be copied by the algorithm.\\n        If False, it may be overwritten.\\n\\n    return_path : bool, optional. Default: False\\n        Whether to return every value of the nonzero coefficients along the\\n        forward path. Useful for cross-validation.\\n\\n    return_n_iter : bool, optional default False\\n        Whether or not to return the number of iterations.\\n\\n    Returns\\n    -------\\n    coef : array, shape (n_features,) or (n_features, n_targets)\\n        Coefficients of the OMP solution. If `return_path=True`, this contains\\n        the whole coefficient path. In this case its shape is\\n        (n_features, n_features) or (n_features, n_targets, n_features) and\\n        iterating over the last axis yields coefficients in increasing order\\n        of active features.\\n\\n    n_iters : array-like or int\\n        Number of active features across every target. Returned only if\\n        `return_n_iter` is set to True.\\n\\n    See also\\n    --------\\n    OrthogonalMatchingPursuit\\n    orthogonal_mp\\n    lars_path\\n    decomposition.sparse_encode\\n\\n    Notes\\n    -----\\n    Orthogonal matching pursuit was introduced in G. Mallat, Z. Zhang,\\n    Matching pursuits with time-frequency dictionaries, IEEE Transactions on\\n    Signal Processing, Vol. 41, No. 12. (December 1993), pp. 3397-3415.\\n    (http://blanche.polytechnique.fr/~mallat/papiers/MallatPursuit93.pdf)\\n\\n    This implementation is based on Rubinstein, R., Zibulevsky, M. and Elad,\\n    M., Efficient Implementation of the K-SVD Algorithm using Batch Orthogonal\\n    Matching Pursuit Technical Report - CS Technion, April 2008.\\n    http://www.cs.technion.ac.il/~ronrubin/Publications/KSVD-OMP-v2.pdf\\n\\n    ',\n    inputs: [{\n      name: 'Gram',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: '(n_features, n_features)',\n      docstring: 'Gram matrix of the input data: X.T * X',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'Xy',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: '(n_features,) or (n_features, n_targets)',\n      docstring: 'Input targets multiplied by X: X.T * y',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'n_nonzero_coefs',\n      default_value: null,\n      param_type: ['int'],\n      expected_shape: null,\n      docstring: 'Desired number of non-zero entries in the solution. If None (by default) this value is set to 10% of n_features.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'tol',\n      default_value: null,\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'Maximum norm of the residual. If not None, overrides n_nonzero_coefs.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'norms_squared',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: '(n_targets,)',\n      docstring: 'Squared L2 norms of the lines of y. Required if tol is not None.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'copy_Gram',\n      default_value: null,\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'Whether the gram matrix must be copied by the algorithm. A false value is only helpful if it is already Fortran-ordered, otherwise a copy is made anyway.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'copy_Xy',\n      default_value: null,\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'Whether the covariance vector Xy must be copied by the algorithm. If False, it may be overwritten.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'return_path',\n      default_value: null,\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'Whether to return every value of the nonzero coefficients along the forward path. Useful for cross-validation.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'return_n_iter',\n      default_value: 'False',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'Whether or not to return the number of iterations.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }]\n  }, {\n    name: 'ridge_regression',\n    outputs: [{\n      name: 'coef',\n      returned: true,\n      param_type: ['array'],\n      docstring: 'Weight vector(s).'\n    }, {\n      name: 'n_iter',\n      returned: true,\n      param_type: ['int'],\n      docstring: 'The actual number of iteration performed by the solver. Only returned if `return_n_iter` is True.'\n    }, {\n      name: 'intercept',\n      returned: true,\n      param_type: ['array', 'float'],\n      docstring: 'The intercept of the model. Only returned if `return_intercept` is True and if X is a scipy sparse array.'\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }],\n    docstring: \"Solve the ridge equation by the method of normal equations.\\n\\n    Read more in the :ref:`User Guide <ridge_regression>`.\\n\\n    Parameters\\n    ----------\\n    X : {array-like, sparse matrix, LinearOperator},\\n        shape = [n_samples, n_features]\\n        Training data\\n\\n    y : array-like, shape = [n_samples] or [n_samples, n_targets]\\n        Target values\\n\\n    alpha : {float, array-like},\\n        shape = [n_targets] if array-like\\n        Regularization strength; must be a positive float. Regularization\\n        improves the conditioning of the problem and reduces the variance of\\n        the estimates. Larger values specify stronger regularization.\\n        Alpha corresponds to ``C^-1`` in other linear models such as\\n        LogisticRegression or LinearSVC. If an array is passed, penalties are\\n        assumed to be specific to the targets. Hence they must correspond in\\n        number.\\n\\n    sample_weight : float or numpy array of shape [n_samples]\\n        Individual weights for each sample. If sample_weight is not None and\\n        solver='auto', the solver will be set to 'cholesky'.\\n\\n        .. versionadded:: 0.17\\n\\n    solver : {'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga'}\\n        Solver to use in the computational routines:\\n\\n        - 'auto' chooses the solver automatically based on the type of data.\\n\\n        - 'svd' uses a Singular Value Decomposition of X to compute the Ridge\\n          coefficients. More stable for singular matrices than\\n          'cholesky'.\\n\\n        - 'cholesky' uses the standard scipy.linalg.solve function to\\n          obtain a closed-form solution via a Cholesky decomposition of\\n          dot(X.T, X)\\n\\n        - 'sparse_cg' uses the conjugate gradient solver as found in\\n          scipy.sparse.linalg.cg. As an iterative algorithm, this solver is\\n          more appropriate than 'cholesky' for large-scale data\\n          (possibility to set `tol` and `max_iter`).\\n\\n        - 'lsqr' uses the dedicated regularized least-squares routine\\n          scipy.sparse.linalg.lsqr. It is the fastest and uses an iterative\\n          procedure.\\n\\n        - 'sag' uses a Stochastic Average Gradient descent, and 'saga' uses\\n          its improved, unbiased version named SAGA. Both methods also use an\\n          iterative procedure, and are often faster than other solvers when\\n          both n_samples and n_features are large. Note that 'sag' and\\n          'saga' fast convergence is only guaranteed on features with\\n          approximately the same scale. You can preprocess the data with a\\n          scaler from sklearn.preprocessing.\\n\\n\\n        All last five solvers support both dense and sparse data. However, only\\n        'sag' and 'saga' supports sparse input when`fit_intercept` is True.\\n\\n        .. versionadded:: 0.17\\n           Stochastic Average Gradient descent solver.\\n        .. versionadded:: 0.19\\n           SAGA solver.\\n\\n    max_iter : int, optional\\n        Maximum number of iterations for conjugate gradient solver.\\n        For the 'sparse_cg' and 'lsqr' solvers, the default value is determined\\n        by scipy.sparse.linalg. For 'sag' and saga solver, the default value is\\n        1000.\\n\\n    tol : float\\n        Precision of the solution.\\n\\n    verbose : int\\n        Verbosity level. Setting verbose > 0 will display additional\\n        information depending on the solver used.\\n\\n    random_state : int, RandomState instance or None, optional, default None\\n        The seed of the pseudo random number generator to use when shuffling\\n        the data.  If int, random_state is the seed used by the random number\\n        generator; If RandomState instance, random_state is the random number\\n        generator; If None, the random number generator is the RandomState\\n        instance used by `np.random`. Used when ``solver`` == 'sag'.\\n\\n    return_n_iter : boolean, default False\\n        If True, the method also returns `n_iter`, the actual number of\\n        iteration performed by the solver.\\n\\n        .. versionadded:: 0.17\\n\\n    return_intercept : boolean, default False\\n        If True and if X is sparse, the method also returns the intercept,\\n        and the solver is automatically changed to 'sag'. This is only a\\n        temporary fix for fitting the intercept with sparse data. For dense\\n        data, use sklearn.linear_model._preprocess_data before your regression.\\n\\n        .. versionadded:: 0.17\\n\\n    Returns\\n    -------\\n    coef : array, shape = [n_features] or [n_targets, n_features]\\n        Weight vector(s).\\n\\n    n_iter : int, optional\\n        The actual number of iteration performed by the solver.\\n        Only returned if `return_n_iter` is True.\\n\\n    intercept : float or array, shape = [n_targets]\\n        The intercept of the model. Only returned if `return_intercept`\\n        is True and if X is a scipy sparse array.\\n\\n    Notes\\n    -----\\n    This function won't compute the intercept.\\n    \",\n    inputs: [{\n      name: 'X',\n      default_value: null,\n      param_type: ['LIST_VALID_OPTIONS', 'array'],\n      expected_shape: null,\n      docstring: 'shape = [n_samples, n_features] Training data',\n      is_optional: false,\n      options: ['array-like', ' sparse matrix', ' LinearOperator}', '']\n    }, {\n      name: 'y',\n      default_value: null,\n      param_type: ['array'],\n      expected_shape: '[n_samples] or [n_samples, n_targets]',\n      docstring: 'Target values',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'alpha',\n      default_value: null,\n      param_type: ['LIST_VALID_OPTIONS', 'array', 'float'],\n      expected_shape: null,\n      docstring: 'shape = [n_targets] if array-like Regularization strength; must be a positive float. Regularization improves the conditioning of the problem and reduces the variance of the estimates. Larger values specify stronger regularization. Alpha corresponds to ``C^-1`` in other linear models such as LogisticRegression or LinearSVC. If an array is passed, penalties are assumed to be specific to the targets. Hence they must correspond in number.',\n      is_optional: false,\n      options: ['float', ' array-like}', '']\n    }, {\n      name: 'sample_weight',\n      default_value: null,\n      param_type: ['array', 'float'],\n      expected_shape: '[n_samples]',\n      docstring: \"Individual weights for each sample. If sample_weight is not None and solver='auto', the solver will be set to 'cholesky'.  .. versionadded:: 0.17\",\n      is_optional: false,\n      options: null\n    }, {\n      name: 'solver',\n      default_value: null,\n      param_type: ['LIST_VALID_OPTIONS'],\n      expected_shape: null,\n      docstring: \"Solver to use in the computational routines:  - 'auto' chooses the solver automatically based on the type of data.  - 'svd' uses a Singular Value Decomposition of X to compute the Ridge   coefficients. More stable for singular matrices than   'cholesky'.  - 'cholesky' uses the standard scipy.linalg.solve function to   obtain a closed-form solution via a Cholesky decomposition of   dot(X.T, X)  - 'sparse_cg' uses the conjugate gradient solver as found in   scipy.sparse.linalg.cg. As an iterative algorithm, this solver is   more appropriate than 'cholesky' for large-scale data   (possibility to set `tol` and `max_iter`).  - 'lsqr' uses the dedicated regularized least-squares routine   scipy.sparse.linalg.lsqr. It is the fastest and uses an iterative   procedure.  - 'sag' uses a Stochastic Average Gradient descent, and 'saga' uses   its improved, unbiased version named SAGA. Both methods also use an   iterative procedure, and are often faster than other solvers when   both n_samples and n_features are large. Note that 'sag' and   'saga' fast convergence is only guaranteed on features with   approximately the same scale. You can preprocess the data with a   scaler from sklearn.preprocessing.  All last five solvers support both dense and sparse data. However, only 'sag' and 'saga' supports sparse input when`fit_intercept` is True.  .. versionadded:: 0.17    Stochastic Average Gradient descent solver. .. versionadded:: 0.19    SAGA solver.\",\n      is_optional: false,\n      options: ['auto', \" 'svd\", \" 'cholesky\", \" 'lsqr\", \" 'sparse_cg\", \" 'sag\", \" 'saga\"]\n    }, {\n      name: 'max_iter',\n      default_value: null,\n      param_type: ['int'],\n      expected_shape: null,\n      docstring: \"Maximum number of iterations for conjugate gradient solver. For the 'sparse_cg' and 'lsqr' solvers, the default value is determined by scipy.sparse.linalg. For 'sag' and saga solver, the default value is 1000.\",\n      is_optional: true,\n      options: null\n    }, {\n      name: 'tol',\n      default_value: null,\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'Precision of the solution.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'verbose',\n      default_value: null,\n      param_type: ['int'],\n      expected_shape: null,\n      docstring: 'Verbosity level. Setting verbose > 0 will display additional information depending on the solver used.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'random_state',\n      default_value: 'None',\n      param_type: ['int', null],\n      expected_shape: null,\n      docstring: \"The seed of the pseudo random number generator to use when shuffling the data.  If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`. Used when ``solver`` == 'sag'.\",\n      is_optional: true,\n      options: null\n    }, {\n      name: 'return_n_iter',\n      default_value: 'False',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'If True, the method also returns `n_iter`, the actual number of iteration performed by the solver.  .. versionadded:: 0.17',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'return_intercept',\n      default_value: 'False',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: \"If True and if X is sparse, the method also returns the intercept, and the solver is automatically changed to 'sag'. This is only a temporary fix for fitting the intercept with sparse data. For dense data, use sklearn.linear_model._preprocess_data before your regression.  .. versionadded:: 0.17\",\n      is_optional: true,\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }]\n  }],\n  nodes: [{\n    name: 'ElasticNet',\n    outputs: [{\n      name: 'coef_',\n      returned: false,\n      param_type: ['array'],\n      docstring: 'parameter vector (w in the cost function formula)'\n    }, {\n      name: 'sparse_coef_',\n      returned: false,\n      param_type: ['scipy.sparse.matrix'],\n      docstring: '``sparse_coef_`` is a readonly property derived from ``coef_``'\n    }, {\n      name: 'intercept_',\n      returned: false,\n      param_type: ['array', 'float'],\n      docstring: 'independent term in decision function.'\n    }, {\n      name: 'n_iter_',\n      returned: false,\n      param_type: ['array'],\n      docstring: 'number of iterations run by the coordinate descent solver to reach the specified tolerance.'\n    }],\n    docstring: 'Linear regression with combined L1 and L2 priors as regularizer.\\n\\n    Minimizes the objective function::\\n\\n            1 / (2 * n_samples) * ||y - Xw||^2_2\\n            + alpha * l1_ratio * ||w||_1\\n            + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\\n\\n    If you are interested in controlling the L1 and L2 penalty\\n    separately, keep in mind that this is equivalent to::\\n\\n            a * L1 + b * L2\\n\\n    where::\\n\\n            alpha = a + b and l1_ratio = a / (a + b)\\n\\n    The parameter l1_ratio corresponds to alpha in the glmnet R package while\\n    alpha corresponds to the lambda parameter in glmnet. Specifically, l1_ratio\\n    = 1 is the lasso penalty. Currently, l1_ratio <= 0.01 is not reliable,\\n    unless you supply your own sequence of alpha.',\n    inputs: [{\n      name: 'alpha',\n      default_value: '1.0',\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'Constant that multiplies the penalty terms. Defaults to 1.0. See the notes for the exact mathematical meaning of this parameter.``alpha = 0`` is equivalent to an ordinary least square, solved by the :class:`LinearRegression` object. For numerical reasons, using ``alpha = 0`` with the ``Lasso`` object is not advised. Given this, you should use the :class:`LinearRegression` object.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'l1_ratio',\n      default_value: null,\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'The ElasticNet mixing parameter, with ``0 <= l1_ratio <= 1``. For ``l1_ratio = 0`` the penalty is an L2 penalty. ``For l1_ratio = 1`` it is an L1 penalty.  For ``0 < l1_ratio < 1``, the penalty is a combination of L1 and L2.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'fit_intercept',\n      default_value: null,\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'Whether the intercept should be estimated or not. If ``False``, the data is assumed to be already centered.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'normalize',\n      default_value: 'False',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'precompute',\n      default_value: null,\n      param_type: ['bool', 'array'],\n      expected_shape: null,\n      docstring: 'Whether to use a precomputed Gram matrix to speed up calculations. The Gram matrix can also be passed as argument. For sparse input this option is always ``True`` to preserve sparsity.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'max_iter',\n      default_value: null,\n      param_type: ['int'],\n      expected_shape: null,\n      docstring: 'The maximum number of iterations',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'copy_X',\n      default_value: 'True',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'If ``True``, X will be copied; else, it may be overwritten.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'tol',\n      default_value: null,\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'The tolerance for the optimization: if the updates are smaller than ``tol``, the optimization code checks the dual gap for optimality and continues until it is smaller than ``tol``.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'warm_start',\n      default_value: false,\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'When set to ``True``, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. See :term:`the Glossary <warm_start>`.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'positive',\n      default_value: false,\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'When set to ``True``, forces the coefficients to be positive.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'selection',\n      default_value: 'cyclic',\n      param_type: ['str'],\n      expected_shape: null,\n      docstring: \"If set to 'random', a random coefficient is updated every iteration rather than looping over features sequentially by default. This (setting to 'random') often leads to significantly faster convergence especially when tol is higher than 1e-4.\",\n      is_optional: true,\n      options: ['random', 'cyclic']\n    }],\n    node_functions: [{\n      name: '__init__',\n      outputs: [],\n      docstring: 'None',\n      inputs: []\n    }, {\n      name: '_decision_function',\n      outputs: [{\n        name: 'T',\n        returned: true,\n        param_type: ['array'],\n        docstring: 'The predicted decision function'\n      }],\n      docstring: 'Decision function of the linear model\\n\\n        Parameters\\n        ----------\\n        X : numpy array or scipy.sparse matrix of shape (n_samples, n_features)\\n\\n        Returns\\n        -------\\n        T : array, shape (n_samples,)\\n            The predicted decision function\\n        ',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        docstring: '',\n        is_optional: false,\n        options: null\n      }]\n    }, {\n      name: '_get_param_names',\n      outputs: [],\n      docstring: 'Get parameter names for the estimator',\n      inputs: []\n    }, {\n      name: '_preprocess_data',\n      outputs: [],\n      docstring: '\\n    Centers data to have mean zero along axis 0. If fit_intercept=False or if\\n    the X is a sparse matrix, no centering is done, but normalization can still\\n    be applied. The function returns the statistics necessary to reconstruct\\n    the input data, which are X_offset, y_offset, X_scale, such that the output\\n\\n        X = (X - X_offset) / X_scale\\n\\n    X_scale is the L2 norm of X - X_offset. If sample_weight is not None,\\n    then the weighted mean of X and y is zero, and not the mean itself. If\\n    return_mean=True, the mean, eventually weighted, is returned, independently\\n    of whether X was centered (option used for optimization with sparse data in\\n    coordinate_descend).\\n\\n    This is here because nearly all linear models will want their data to be\\n    centered. This function also systematically makes y consistent with X.dtype\\n    ',\n      inputs: []\n    }, {\n      name: '_set_intercept',\n      outputs: [],\n      docstring: 'Set the intercept_\\n        ',\n      inputs: []\n    }, {\n      name: 'fit',\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Fit model with coordinate descent.',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: null,\n        docstring: 'Data',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'y',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples,) or (n_samples, n_targets)',\n        docstring: \"Target. Will be cast to X's dtype if necessary\",\n        is_optional: false,\n        options: null\n      }, {\n        name: 'check_input',\n        default_value: 'True',\n        param_type: ['bool'],\n        expected_shape: null,\n        docstring: \"Allow to bypass several input checking. Don't use this parameter unless you know what you do.\",\n        is_optional: true,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }, {\n      name: 'predict',\n      outputs: [{\n        name: 'C',\n        returned: true,\n        param_type: ['array'],\n        docstring: 'Returns predicted values.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Predict using the linear model',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        docstring: 'Samples.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }, {\n      name: 'score',\n      outputs: [{\n        name: 'score',\n        returned: true,\n        param_type: ['float'],\n        docstring: 'R^2 of self.predict(X) wrt. y.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Returns the coefficient of determination R^2 of the prediction.\\n\\n        The coefficient R^2 is defined as (1 - u/v), where u is the residual\\n        sum of squares ((y_true - y_pred) ** 2).sum() and v is the total\\n        sum of squares ((y_true - y_true.mean()) ** 2).sum().\\n        The best possible score is 1.0 and it can be negative (because the\\n        model can be arbitrarily worse). A constant model that always\\n        predicts the expected value of y, disregarding the input features,\\n        would get a R^2 score of 0.0.',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        docstring: 'Test samples. For some estimators this may be a precomputed kernel matrix instead, shape = (n_samples, n_samples_fitted], where n_samples_fitted is the number of samples used in the fitting for the estimator.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'y',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples) or (n_samples, n_outputs)',\n        docstring: 'True values for X.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'sample_weight',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '[n_samples], optional',\n        docstring: 'Sample weights.',\n        is_optional: true,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }],\n    nodes: []\n  }, {\n    name: 'Lasso',\n    outputs: [{\n      name: 'coef_',\n      returned: false,\n      param_type: ['array'],\n      docstring: 'parameter vector (w in the cost function formula)'\n    }, {\n      name: 'sparse_coef_',\n      returned: false,\n      param_type: ['scipy.sparse.matrix'],\n      docstring: '``sparse_coef_`` is a readonly property derived from ``coef_``'\n    }, {\n      name: 'intercept_',\n      returned: false,\n      param_type: ['array', 'float'],\n      docstring: 'independent term in decision function.'\n    }, {\n      name: 'n_iter_',\n      returned: false,\n      param_type: ['array', 'int'],\n      docstring: 'number of iterations run by the coordinate descent solver to reach the specified tolerance.'\n    }],\n    docstring: 'Linear Model trained with L1 prior as regularizer (aka the Lasso)\\n\\n    The optimization objective for Lasso is::\\n\\n        (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\\n\\n    Technically the Lasso model is optimizing the same objective function as\\n    the Elastic Net with ``l1_ratio=1.0`` (no L2 penalty).',\n    inputs: [{\n      name: 'alpha',\n      default_value: '1.0',\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'Constant that multiplies the L1 term. Defaults to 1.0. ``alpha = 0`` is equivalent to an ordinary least square, solved by the :class:`LinearRegression` object. For numerical reasons, using ``alpha = 0`` with the ``Lasso`` object is not advised. Given this, you should use the :class:`LinearRegression` object.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'fit_intercept',\n      default_value: 'True',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'Whether to calculate the intercept for this model. If set to False, no intercept will be used in calculations (e.g. data is expected to be already centered).',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'normalize',\n      default_value: 'False',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'precompute',\n      default_value: 'False',\n      param_type: ['bool', 'array'],\n      expected_shape: null,\n      docstring: \"Whether to use a precomputed Gram matrix to speed up calculations. If set to ``'auto'`` let us decide. The Gram matrix can also be passed as argument. For sparse input this option is always ``True`` to preserve sparsity.\",\n      is_optional: true,\n      options: null\n    }, {\n      name: 'copy_X',\n      default_value: 'True',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'If ``True``, X will be copied; else, it may be overwritten.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'max_iter',\n      default_value: null,\n      param_type: ['int'],\n      expected_shape: null,\n      docstring: 'The maximum number of iterations',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'tol',\n      default_value: null,\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'The tolerance for the optimization: if the updates are smaller than ``tol``, the optimization code checks the dual gap for optimality and continues until it is smaller than ``tol``.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'warm_start',\n      default_value: null,\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. See :term:`the Glossary <warm_start>`.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'positive',\n      default_value: null,\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'When set to ``True``, forces the coefficients to be positive.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'selection',\n      default_value: 'cyclic',\n      param_type: ['LIST_VALID_OPTIONS'],\n      expected_shape: null,\n      docstring: \"If set to 'random', a random coefficient is updated every iteration rather than looping over features sequentially by default. This (setting to 'random') often leads to significantly faster convergence especially when tol is higher than 1e-4.\",\n      is_optional: true,\n      options: ['random', 'cyclic']\n    }],\n    node_functions: [{\n      name: '__init__',\n      outputs: [],\n      docstring: 'None',\n      inputs: []\n    }, {\n      name: '_decision_function',\n      outputs: [{\n        name: 'T',\n        returned: true,\n        param_type: ['array'],\n        docstring: 'The predicted decision function'\n      }],\n      docstring: 'Decision function of the linear model\\n\\n        Parameters\\n        ----------\\n        X : numpy array or scipy.sparse matrix of shape (n_samples, n_features)\\n\\n        Returns\\n        -------\\n        T : array, shape (n_samples,)\\n            The predicted decision function\\n        ',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        docstring: '',\n        is_optional: false,\n        options: null\n      }]\n    }, {\n      name: '_get_param_names',\n      outputs: [],\n      docstring: 'Get parameter names for the estimator',\n      inputs: []\n    }, {\n      name: '_preprocess_data',\n      outputs: [],\n      docstring: '\\n    Centers data to have mean zero along axis 0. If fit_intercept=False or if\\n    the X is a sparse matrix, no centering is done, but normalization can still\\n    be applied. The function returns the statistics necessary to reconstruct\\n    the input data, which are X_offset, y_offset, X_scale, such that the output\\n\\n        X = (X - X_offset) / X_scale\\n\\n    X_scale is the L2 norm of X - X_offset. If sample_weight is not None,\\n    then the weighted mean of X and y is zero, and not the mean itself. If\\n    return_mean=True, the mean, eventually weighted, is returned, independently\\n    of whether X was centered (option used for optimization with sparse data in\\n    coordinate_descend).\\n\\n    This is here because nearly all linear models will want their data to be\\n    centered. This function also systematically makes y consistent with X.dtype\\n    ',\n      inputs: []\n    }, {\n      name: '_set_intercept',\n      outputs: [],\n      docstring: 'Set the intercept_\\n        ',\n      inputs: []\n    }, {\n      name: 'fit',\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Fit model with coordinate descent.',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        docstring: 'Data',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'y',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples,) or (n_samples, n_targets)',\n        docstring: \"Target. Will be cast to X's dtype if necessary\",\n        is_optional: false,\n        options: null\n      }, {\n        name: 'check_input',\n        default_value: 'True',\n        param_type: ['bool'],\n        expected_shape: null,\n        docstring: \"Allow to bypass several input checking. Don't use this parameter unless you know what you do.\",\n        is_optional: true,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }, {\n      name: 'predict',\n      outputs: [{\n        name: 'C',\n        returned: true,\n        param_type: ['array'],\n        docstring: 'Returns predicted values.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Predict using the linear model\\n\\n        Parameters\\n        ----------\\n        X : array_like or sparse matrix, shape (n_samples, n_features)\\n            Samples.\\n\\n        Returns\\n        -------\\n        C : array, shape (n_samples,)\\n            Returns predicted values.\\n        ',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        docstring: 'Samples.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }, {\n      name: 'score',\n      outputs: [{\n        name: 'score',\n        returned: true,\n        param_type: ['float'],\n        docstring: 'R^2 of self.predict(X) wrt. y.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Returns the coefficient of determination R^2 of the prediction.\\n\\n        The coefficient R^2 is defined as (1 - u/v), where u is the residual\\n        sum of squares ((y_true - y_pred) ** 2).sum() and v is the total\\n        sum of squares ((y_true - y_true.mean()) ** 2).sum().\\n        The best possible score is 1.0 and it can be negative (because the\\n        model can be arbitrarily worse). A constant model that always\\n        predicts the expected value of y, disregarding the input features,\\n        would get a R^2 score of 0.0.',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        docstring: 'Test samples.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'y',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples) or (n_samples, n_outputs)',\n        docstring: 'True values for X.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'sample_weight',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '[n_samples], optional',\n        docstring: 'Sample weights.',\n        is_optional: true,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }],\n    nodes: []\n  }, {\n    name: 'LinearRegression',\n    outputs: [{\n      name: 'coef_',\n      returned: false,\n      param_type: ['array'],\n      docstring: 'Estimated coefficients for the linear regression problem. If multiple targets are passed during the fit (y 2D), this is a 2D array of shape (n_targets, n_features), while if only one target is passed, this is a 1D array of length n_features.'\n    }, {\n      name: 'intercept_',\n      returned: false,\n      param_type: ['array'],\n      docstring: 'Independent term in the linear model.'\n    }],\n    docstring: 'Ordinary least squares Linear Regression.',\n    inputs: [{\n      name: 'fit_intercept',\n      default_value: 'True',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'whether to calculate the intercept for this model. If set to False, no intercept will be used in calculations (e.g. data is expected to be already centered).',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'normalize',\n      default_value: 'False',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'copy_X',\n      default_value: 'True',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'If True, X will be copied; else, it may be overwritten.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'n_jobs',\n      default_value: 'None',\n      param_type: ['int', null],\n      expected_shape: null,\n      docstring: 'The number of jobs to use for the computation. This will only provide speedup for n_targets > 1 and sufficient large problems. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.',\n      is_optional: true,\n      options: null\n    }],\n    node_functions: [{\n      name: '__init__',\n      outputs: [],\n      docstring: 'None',\n      inputs: []\n    }, {\n      name: '_decision_function',\n      outputs: [],\n      docstring: 'None',\n      inputs: []\n    }, {\n      name: '_get_param_names',\n      outputs: [],\n      docstring: 'Get parameter names for the estimator',\n      inputs: []\n    }, {\n      name: '_preprocess_data',\n      outputs: [],\n      docstring: '\\n    Centers data to have mean zero along axis 0. If fit_intercept=False or if\\n    the X is a sparse matrix, no centering is done, but normalization can still\\n    be applied. The function returns the statistics necessary to reconstruct\\n    the input data, which are X_offset, y_offset, X_scale, such that the output\\n\\n        X = (X - X_offset) / X_scale\\n\\n    X_scale is the L2 norm of X - X_offset. If sample_weight is not None,\\n    then the weighted mean of X and y is zero, and not the mean itself. If\\n    return_mean=True, the mean, eventually weighted, is returned, independently\\n    of whether X was centered (option used for optimization with sparse data in\\n    coordinate_descend).\\n\\n    This is here because nearly all linear models will want their data to be\\n    centered. This function also systematically makes y consistent with X.dtype\\n    ',\n      inputs: []\n    }, {\n      name: '_set_intercept',\n      outputs: [],\n      docstring: 'Set the intercept_\\n        ',\n      inputs: []\n    }, {\n      name: 'fit',\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Fit linear model',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        docstring: 'Training data',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'y',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_targets)',\n        docstring: \"Target values. Will be cast to X's dtype if necessary\",\n        is_optional: false,\n        options: null\n      }, {\n        name: 'sample_weight',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '[n_samples]',\n        docstring: 'Individual weights for each sample  .. versionadded:: 0.17    parameter *sample_weight* support to LinearRegression.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }, {\n      name: 'predict',\n      outputs: [{\n        name: 'C',\n        returned: true,\n        param_type: ['array'],\n        docstring: 'Returns predicted values.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Predict using the linear model',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        docstring: 'Samples.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }, {\n      name: 'score',\n      outputs: [{\n        name: 'score',\n        returned: true,\n        param_type: ['float'],\n        docstring: 'R^2 of self.predict(X) wrt. y.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Returns the coefficient of determination R^2 of the prediction.\\n\\n        The coefficient R^2 is defined as (1 - u/v), where u is the residual\\n        sum of squares ((y_true - y_pred) ** 2).sum() and v is the total\\n        sum of squares ((y_true - y_true.mean()) ** 2).sum().\\n        The best possible score is 1.0 and it can be negative (because the\\n        model can be arbitrarily worse). A constant model that always\\n        predicts the expected value of y, disregarding the input features,\\n        would get a R^2 score of 0.0.',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        docstring: 'Test samples. For some estimators this may be a precomputed kernel matrix instead, shape = (n_samples, n_samples_fitted], where n_samples_fitted is the number of samples used in the fitting for the estimator.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'y',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples) or (n_samples, n_outputs)',\n        docstring: 'True values for X.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'sample_weight',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '[n_samples], optional',\n        docstring: 'Sample weights.',\n        is_optional: true,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }],\n    nodes: []\n  }, {\n    name: 'LogisticRegression',\n    outputs: [{\n      name: 'classes_',\n      returned: false,\n      param_type: ['array'],\n      docstring: 'A list of class labels known to the classifier.'\n    }, {\n      name: 'coef_',\n      returned: false,\n      param_type: ['array'],\n      docstring: \"Coefficient of the features in the decision function.  `coef_` is of shape (1, n_features) when the given problem is binary. In particular, when `multi_class='multinomial'`, `coef_` corresponds to outcome 1 (True) and `-coef_` corresponds to outcome 0 (False).\"\n    }, {\n      name: 'intercept_',\n      returned: false,\n      param_type: ['array'],\n      docstring: \"Intercept (a.k.a. bias) added to the decision function.  If `fit_intercept` is set to False, the intercept is set to zero. `intercept_` is of shape (1,) when the given problem is binary. In particular, when `multi_class='multinomial'`, `intercept_` corresponds to outcome 1 (True) and `-intercept_` corresponds to outcome 0 (False).\"\n    }, {\n      name: 'n_iter_',\n      returned: false,\n      param_type: ['array'],\n      docstring: 'Actual number of iterations for all classes. If binary or multinomial, it returns only 1 element. For liblinear solver, only the maximum number of iteration across all classes is given.  .. versionchanged:: 0.20      In SciPy <= 1.0.0 the number of lbfgs iterations may exceed     ``max_iter``. ``n_iter_`` will now report at most ``max_iter``.'\n    }],\n    docstring: \"Logistic Regression (aka logit, MaxEnt) classifier.\\n\\n    In the multiclass case, the training algorithm uses the one-vs-rest (OvR)\\n    scheme if the 'multi_class' option is set to 'ovr', and uses the cross-\\n    entropy loss if the 'multi_class' option is set to 'multinomial'.\\n    (Currently the 'multinomial' option is supported only by the 'lbfgs',\\n    'sag' and 'newton-cg' solvers.)\\n\\n    This class implements regularized logistic regression using the\\n    'liblinear' library, 'newton-cg', 'sag' and 'lbfgs' solvers. It can handle\\n    both dense and sparse input. Use C-ordered arrays or CSR matrices\\n    containing 64-bit floats for optimal performance; any other input format\\n    will be converted (and copied).\\n\\n    The 'newton-cg', 'sag', and 'lbfgs' solvers support only L2 regularization\\n    with primal formulation. The 'liblinear' solver supports both L1 and L2\\n    regularization, with a dual formulation only for the L2 penalty.\",\n    inputs: [{\n      name: 'penalty',\n      default_value: 'l2',\n      param_type: ['LIST_VALID_OPTIONS'],\n      expected_shape: null,\n      docstring: \"Used to specify the norm used in the penalization. The 'newton-cg', 'sag' and 'lbfgs' solvers support only l2 penalties.  .. versionadded:: 0.19    l1 penalty with SAGA solver (allowing 'multinomial' + L1)\",\n      is_optional: true,\n      options: ['l1', 'l2', 'elasticnet', 'none']\n    }, {\n      name: 'dual',\n      default_value: 'False',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'Dual or primal formulation. Dual formulation is only implemented for l2 penalty with liblinear solver. Prefer dual=False when n_samples > n_features.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'tol',\n      default_value: '1e-4',\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'Tolerance for stopping criteria.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'C',\n      default_value: '1.0',\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'Inverse of regularization strength; must be a positive float. Like in support vector machines, smaller values specify stronger regularization.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'fit_intercept',\n      default_value: 'True',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'Specifies if a constant (a.k.a. bias or intercept) should be added to the decision function.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'intercept_scaling',\n      default_value: '1.',\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'Useful only when the solver \\'liblinear\\' is used and self.fit_intercept is set to True. In this case, x becomes [x, self.intercept_scaling], i.e. a \"synthetic\" feature with constant value equal to intercept_scaling is appended to the instance vector. The intercept becomes ``intercept_scaling * synthetic_feature_weight``.  Note! the synthetic feature weight is subject to l1/l2 regularization as all other features. To lessen the effect of regularization on synthetic feature weight (and therefore on the intercept) intercept_scaling has to be increased.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'class_weight',\n      default_value: 'None',\n      param_type: ['dict', 'str', null],\n      expected_shape: null,\n      docstring: 'Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one.  The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``.  Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'solver',\n      default_value: 'liblinear.',\n      param_type: ['LIST_VALID_OPTIONS'],\n      expected_shape: null,\n      docstring: \"Algorithm to use in the optimization problem.  - For small datasets, 'liblinear' is a good choice, whereas 'sag' and   'saga' are faster for large ones. - For multiclass problems, only 'newton-cg', 'sag', 'saga' and 'lbfgs'   handle multinomial loss; 'liblinear' is limited to one-versus-rest   schemes. - 'newton-cg', 'lbfgs' and 'sag' only handle L2 penalty, whereas   'liblinear' and 'saga' handle L1 penalty.  Note that 'sag' and 'saga' fast convergence is only guaranteed on features with approximately the same scale. You can preprocess the data with a scaler from sklearn.preprocessing.\",\n      is_optional: true,\n      options: ['newton-cg', 'lbfgs', 'liblinear', 'sag', \"saga'}\"]\n    }, {\n      name: 'max_iter',\n      default_value: '100',\n      param_type: ['int'],\n      expected_shape: null,\n      docstring: 'Useful only for the newton-cg, sag and lbfgs solvers. Maximum number of iterations taken for the solvers to converge.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'multi_class',\n      default_value: 'ovr',\n      param_type: ['LIST_VALID_OPTIONS'],\n      expected_shape: null,\n      docstring: \"If the option chosen is 'ovr', then a binary problem is fit for each label. For 'multinomial' the loss minimised is the multinomial loss fit across the entire probability distribution, *even when the data is binary*. 'multinomial' is unavailable when solver='liblinear'. 'auto' selects 'ovr' if the data is binary, or if solver='liblinear', and otherwise selects 'multinomial'.\",\n      is_optional: true,\n      options: ['ovr', 'multinomial', 'auto']\n    }, {\n      name: 'verbose',\n      default_value: '0',\n      param_type: ['int'],\n      expected_shape: null,\n      docstring: 'For the liblinear and lbfgs solvers set verbose to any positive number for verbosity.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'warm_start',\n      default_value: 'False',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. Useless for liblinear solver.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'n_jobs',\n      default_value: 'None',\n      param_type: ['int', null],\n      expected_shape: null,\n      docstring: \"Number of CPU cores used when parallelizing over classes if multi_class='ovr'\\\". This parameter is ignored when the ``solver`` is set to 'liblinear' regardless of whether 'multi_class' is specified or not. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.\",\n      is_optional: true,\n      options: null\n    }],\n    node_functions: [{\n      name: '__init__',\n      outputs: [],\n      docstring: 'None',\n      inputs: []\n    }, {\n      name: '_get_param_names',\n      outputs: [],\n      docstring: 'Get parameter names for the estimator',\n      inputs: []\n    }, {\n      name: '_predict_proba_lr',\n      outputs: [],\n      docstring: 'Probability estimation for OvR logistic regression.\\n\\n        Positive class probabilities are computed as\\n        1. / (1. + np.exp(-self.decision_function(X)));\\n        multiclass is handled by normalizing that over all classes.\\n        ',\n      inputs: []\n    }, {\n      name: 'decision_function',\n      outputs: [{\n        name: 'array, shape=(n_samples,) if n_classes == 2 else (n_samples, n_classes)',\n        returned: true,\n        param_type: [null],\n        docstring: 'Confidence scores per (sample, class) combination. In the binary case, confidence score for self.classes_[1] where >0 means this class would be predicted.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Predict confidence scores for samples.\\n\\n        The confidence score for a sample is the signed distance of that\\n        sample to the hyperplane.\\n\\n        Parameters\\n        ----------\\n        X : array_like or sparse matrix, shape (n_samples, n_features)\\n            Samples.\\n\\n        Returns\\n        -------\\n        array, shape=(n_samples,) if n_classes == 2 else (n_samples, n_classes)\\n            Confidence scores per (sample, class) combination. In the binary\\n            case, confidence score for self.classes_[1] where >0 means this\\n            class would be predicted.\\n        ',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        docstring: 'Samples.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }, {\n      name: 'fit',\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Fit the model according to the given training data.',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        docstring: 'Training vector, where n_samples is the number of samples and n_features is the number of features.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'y',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples,)',\n        docstring: 'Target vector relative to X.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'sample_weight',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples,) optional',\n        docstring: 'Array of weights that are assigned to individual samples. If not provided, then each sample is given unit weight.',\n        is_optional: true,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }, {\n      name: 'predict',\n      outputs: [{\n        name: 'C',\n        returned: true,\n        param_type: ['array'],\n        docstring: 'Predicted class label per sample.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Predict class labels for samples in X.',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        docstring: 'Samples.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }, {\n      name: 'predict_log_proba',\n      outputs: [{\n        name: 'T',\n        returned: true,\n        param_type: ['array'],\n        docstring: 'Returns the log-probability of the sample for each class in the model, where classes are ordered as they are in ``classes_``.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Log of probability estimates.\\n\\n        The returned estimates for all classes are ordered by the\\n        label of classes.',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        docstring: '',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }, {\n      name: 'predict_proba',\n      outputs: [{\n        name: 'T',\n        returned: true,\n        param_type: ['array'],\n        docstring: 'Returns the probability of the sample for each class in the model, where classes are ordered as they are in ``classes_``.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Probability estimates.\\n\\n        The returned estimates for all classes are ordered by the\\n        label of classes.\\n\\n        For a multi_class problem, if multi_class is set to be \"multinomial\"\\n        the softmax function is used to find the predicted probability of\\n        each class.\\n        Else use a one-vs-rest approach, i.e calculate the probability\\n        of each class assuming it to be positive using the logistic function.\\n        and normalize these values across all the classes.',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        docstring: '',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }, {\n      name: 'score',\n      outputs: [{\n        name: 'score',\n        returned: true,\n        param_type: ['float'],\n        docstring: 'Mean accuracy of self.predict(X) wrt. y.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Returns the mean accuracy on the given test data and labels.\\n\\n        In multi-label classification, this is the subset accuracy\\n        which is a harsh metric since you require for each sample that\\n        each label set be correctly predicted.',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        docstring: 'Test samples.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'y',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples) or (n_samples, n_outputs)',\n        docstring: 'True labels for X.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'sample_weight',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '[n_samples]',\n        docstring: 'Sample weights.',\n        is_optional: true,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }],\n    nodes: []\n  }, {\n    name: 'Ridge',\n    outputs: [{\n      name: 'coef_',\n      returned: false,\n      param_type: ['array'],\n      docstring: 'Weight vector(s).'\n    }, {\n      name: 'intercept_',\n      returned: false,\n      param_type: ['LIST_VALID_OPTIONS', 'array', 'float'],\n      docstring: 'Independent term in decision function. Set to 0.0 if ``fit_intercept = False``.'\n    }, {\n      name: 'n_iter_',\n      returned: false,\n      param_type: ['array', null],\n      docstring: 'Actual number of iterations for each target. Available only for sag and lsqr solvers. Other solvers will return None.  .. versionadded:: 0.17'\n    }],\n    docstring: 'Linear least squares with l2 regularization.\\n\\n    Minimizes the objective function::\\n\\n    ||y - Xw||^2_2 + alpha * ||w||^2_2\\n\\n    This model solves a regression model where the loss function is\\n    the linear least squares function and regularization is given by\\n    the l2-norm. Also known as Ridge Regression or Tikhonov regularization.\\n    This estimator has built-in support for multi-variate regression\\n    (i.e., when y is a 2d-array of shape [n_samples, n_targets]).',\n    inputs: [{\n      name: 'alpha',\n      default_value: null,\n      param_type: ['array', 'float'],\n      expected_shape: '(n_targets)',\n      docstring: 'Regularization strength; must be a positive float. Regularization improves the conditioning of the problem and reduces the variance of the estimates. Larger values specify stronger regularization. Alpha corresponds to ``C^-1`` in other linear models such as LogisticRegression or LinearSVC. If an array is passed, penalties are assumed to be specific to the targets. Hence they must correspond in number.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'fit_intercept',\n      default_value: null,\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (e.g. data is expected to be already centered).',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'normalize',\n      default_value: 'False',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'copy_X',\n      default_value: 'True',\n      param_type: ['bool'],\n      expected_shape: null,\n      docstring: 'If True, X will be copied; else, it may be overwritten.',\n      is_optional: true,\n      options: null\n    }, {\n      name: 'max_iter',\n      default_value: null,\n      param_type: ['int'],\n      expected_shape: null,\n      docstring: \"Maximum number of iterations for conjugate gradient solver. For 'sparse_cg' and 'lsqr' solvers, the default value is determined by scipy.sparse.linalg. For 'sag' solver, the default value is 1000.\",\n      is_optional: true,\n      options: null\n    }, {\n      name: 'tol',\n      default_value: null,\n      param_type: ['float'],\n      expected_shape: null,\n      docstring: 'Precision of the solution.',\n      is_optional: false,\n      options: null\n    }, {\n      name: 'solver',\n      default_value: null,\n      param_type: ['LIST_VALID_OPTIONS'],\n      expected_shape: null,\n      docstring: \"Solver to use in the computational routines:  - 'auto' chooses the solver automatically based on the type of data.  - 'svd' uses a Singular Value Decomposition of X to compute the Ridge   coefficients. More stable for singular matrices than   'cholesky'.  - 'cholesky' uses the standard scipy.linalg.solve function to   obtain a closed-form solution.  - 'sparse_cg' uses a conjugate gradient solver. As an iterative algorithm, this solver is   more appropriate than 'cholesky' for large-scale data   (possibility to set `tol` and `max_iter`).  - 'lsqr' uses a dedicated regularized least-squares routine. It is the fastest and uses an iterative   procedure.  - 'sag' uses a Stochastic Average Gradient descent, and 'saga' uses   its improved, unbiased version named SAGA. Both methods also use an   iterative procedure, and are often faster than other solvers when   both n_samples and n_features are large. Note that 'sag' and   'saga' fast convergence is only guaranteed on features with   approximately the same scale. You can preprocess the data with a   scaler from sklearn.preprocessing.\",\n      is_optional: false,\n      options: ['auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga']\n    }],\n    node_functions: [{\n      name: '__init__',\n      outputs: [],\n      docstring: 'None',\n      inputs: []\n    }, {\n      name: '_decision_function',\n      outputs: [],\n      docstring: 'None',\n      inputs: []\n    }, {\n      name: '_get_param_names',\n      outputs: [],\n      docstring: 'Get parameter names for the estimator',\n      inputs: []\n    }, {\n      name: '_preprocess_data',\n      outputs: [],\n      docstring: '\\n    Centers data to have mean zero along axis 0. If fit_intercept=False or if\\n    the X is a sparse matrix, no centering is done, but normalization can still\\n    be applied. The function returns the statistics necessary to reconstruct\\n    the input data, which are X_offset, y_offset, X_scale, such that the output\\n\\n        X = (X - X_offset) / X_scale\\n\\n    X_scale is the L2 norm of X - X_offset. If sample_weight is not None,\\n    then the weighted mean of X and y is zero, and not the mean itself. If\\n    return_mean=True, the mean, eventually weighted, is returned, independently\\n    of whether X was centered (option used for optimization with sparse data in\\n    coordinate_descend).\\n\\n    This is here because nearly all linear models will want their data to be\\n    centered. This function also systematically makes y consistent with X.dtype\\n    ',\n      inputs: []\n    }, {\n      name: '_set_intercept',\n      outputs: [],\n      docstring: 'Set the intercept_\\n        ',\n      inputs: []\n    }, {\n      name: 'fit',\n      outputs: [{\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Fit Ridge regression model',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        docstring: 'Training data',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'y',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '[n_samples] or [n_samples, n_targets]',\n        docstring: 'Target values',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'sample_weight',\n        default_value: null,\n        param_type: ['array', 'float'],\n        expected_shape: '[n_samples]',\n        docstring: 'Individual weights for each sample',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }, {\n      name: 'predict',\n      outputs: [{\n        name: 'C',\n        returned: true,\n        param_type: ['array'],\n        docstring: 'Returns predicted values.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Predict using the linear model',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        docstring: 'Samples.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }, {\n      name: 'score',\n      outputs: [{\n        name: 'score',\n        returned: true,\n        param_type: ['float'],\n        docstring: 'R^2 of self.predict(X) wrt. y.'\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        returned: true\n      }],\n      docstring: 'Returns the coefficient of determination R^2 of the prediction.\\n\\n        The coefficient R^2 is defined as (1 - u/v), where u is the residual\\n        sum of squares ((y_true - y_pred) ** 2).sum() and v is the total\\n        sum of squares ((y_true - y_true.mean()) ** 2).sum().\\n        The best possible score is 1.0 and it can be negative (because the\\n        model can be arbitrarily worse). A constant model that always\\n        predicts the expected value of y, disregarding the input features,\\n        would get a R^2 score of 0.0.',\n      inputs: [{\n        name: 'X',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples, n_features)',\n        docstring: 'Test samples.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'y',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '(n_samples) or (n_samples, n_outputs)',\n        docstring: 'True values for X.',\n        is_optional: false,\n        options: null\n      }, {\n        name: 'sample_weight',\n        default_value: null,\n        param_type: ['array'],\n        expected_shape: '[n_samples], optional',\n        docstring: 'Sample weights.',\n        is_optional: true,\n        options: null\n      }, {\n        name: 'obj',\n        docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: false,\n        options: null\n      }]\n    }],\n    nodes: []\n  }],\n  library: 'sklearn'\n});\n\n/***/ }),\n\n/***/ 1055:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'sklearn.metrics',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [],\n  nodes: [{\n    name: 'Regression Metrics',\n    docstring: 'Module to provide functions for most common metrics to evaluate Regression Models',\n    inputs: [],\n    outputs: [],\n    node_functions: [{\n      name: 'r2_score',\n      docstring: 'R^2 (coefficient of determination) regression score function.\\n\\n    Best possible score is 1.0 and it can be negative (because the\\n    model can be arbitrarily worse). A constant model that always\\n    predicts the expected value of y, disregarding the input features,\\n    would get a R^2 score of 0.0.',\n      inputs: [{\n        name: 'y_true',\n        docstring: 'Ground truth (correct) target values.',\n        param_type: ['array'],\n        expected_shape: '(n_samples) or (n_samples, n_outputs)',\n        is_optional: false,\n        default_value: null\n      }, {\n        name: 'y_pred',\n        docstring: 'Estimated target values.',\n        param_type: ['array'],\n        expected_shape: '(n_samples) or (n_samples, n_outputs)',\n        is_optional: false,\n        default_value: null\n      }, {\n        name: 'sample_weight',\n        docstring: 'Sample weights.',\n        param_type: ['array'],\n        expected_shape: '(n_samples), optional',\n        is_optional: true,\n        default_value: null\n      }, {\n        name: 'multioutput',\n        docstring: \"Defines aggregating of multiple output scores. Array-like value defines weights used to average scores. Default is \\\"uniform_average\\\".  'raw_values' :     Returns a full set of scores in case of multioutput input.  'uniform_average' :     Scores of all outputs are averaged with uniform weight.  'variance_weighted' :     Scores of all outputs are averaged, weighted by the variances     of each individual output.\",\n        param_type: ['array', 'LIST_VALID_OPTIONS', null],\n        expected_shape: '(n_outputs)',\n        is_optional: true,\n        default_value: 'uniform_average',\n        options: ['raw_values', 'uniform_average', 'variance_weighted']\n      }],\n      outputs: [{\n        name: 'z',\n        docstring: \"The R^2 score or ndarray of scores if 'multioutput' is 'raw_values'.\",\n        param_type: ['array', 'float'],\n        returned: true\n      }]\n    }, {\n      name: 'mean_absolute_error',\n      docstring: 'Mean absolute error regression loss',\n      inputs: [{\n        name: 'y_true',\n        docstring: 'Ground truth (correct) target values.',\n        param_type: ['array'],\n        expected_shape: '(n_samples) or (n_samples, n_outputs)',\n        is_optional: false,\n        default_value: null\n      }, {\n        name: 'y_pred',\n        docstring: 'Estimated target values.',\n        param_type: ['array'],\n        expected_shape: '(n_samples) or (n_samples, n_outputs)',\n        is_optional: false,\n        default_value: null\n      }, {\n        name: 'sample_weight',\n        docstring: 'Sample weights.',\n        param_type: ['array'],\n        expected_shape: '(n_samples), optional',\n        is_optional: true,\n        default_value: null\n      }, {\n        name: 'multioutput',\n        docstring: \"Defines aggregating of multiple output scores. Array-like value defines weights used to average scores. Default is \\\"uniform_average\\\".  'raw_values' :     Returns a full set of scores in case of multioutput input.  'uniform_average' :     Scores of all outputs are averaged with uniform weight.\",\n        param_type: ['array', 'LIST_VALID_OPTIONS', null],\n        expected_shape: '(n_outputs)',\n        is_optional: true,\n        default_value: 'uniform_average',\n        options: ['raw_values', 'uniform_average']\n      }],\n      outputs: [{\n        name: 'loss',\n        docstring: \"If multioutput is 'raw_values', then mean absolute error is returned for each output separately. If multioutput is 'uniform_average' or an ndarray of weights, then the weighted average of all output errors is returned.  MAE output is non-negative floating point. The best value is 0.0.\",\n        param_type: ['array', 'float'],\n        returned: true\n      }]\n    }, {\n      name: 'mean_squared_error',\n      docstring: 'Mean squared error regression loss',\n      inputs: [{\n        name: 'y_true',\n        docstring: 'Ground truth (correct) target values.',\n        param_type: ['array'],\n        expected_shape: '(n_samples) or (n_samples, n_outputs)',\n        is_optional: false,\n        default_value: null\n      }, {\n        name: 'y_pred',\n        docstring: 'Estimated target values.',\n        param_type: ['array'],\n        expected_shape: '(n_samples) or (n_samples, n_outputs)',\n        is_optional: false,\n        default_value: null\n      }, {\n        name: 'sample_weight',\n        docstring: 'Sample weights.',\n        param_type: ['array'],\n        expected_shape: '(n_samples), optional',\n        is_optional: true,\n        default_value: null\n      }, {\n        name: 'multioutput',\n        docstring: \"Defines aggregating of multiple output scores. Array-like value defines weights used to average scores. Default is \\\"uniform_average\\\".  'raw_values' :     Returns a full set of scores in case of multioutput input.  'uniform_average' :     Scores of all outputs are averaged with uniform weight.\",\n        param_type: ['array', 'LIST_VALID_OPTIONS', null],\n        expected_shape: '(n_outputs)',\n        is_optional: true,\n        default_value: 'uniform_average',\n        options: ['raw_values', 'uniform_average']\n      }],\n      outputs: [{\n        name: 'loss',\n        docstring: 'A non-negative floating point value (the best value is 0.0), or an array of floating point values, one for each individual target.',\n        param_type: ['array', 'float'],\n        returned: true\n      }]\n    }],\n    nodes: [],\n    placeholder: true\n  }, {\n    name: 'Classification Metrics',\n    docstring: 'Module to provide functions for most common metrics to evaluate Classification Models',\n    inputs: [],\n    outputs: [],\n    node_functions: [{\n      name: 'accuracy_score',\n      docstring: 'Accuracy classification score.\\n\\n    In multilabel classification, this function computes subset accuracy:\\n    the set of labels predicted for a sample must *exactly* match the\\n    corresponding set of labels in y_true.',\n      inputs: [{\n        name: 'y_true',\n        docstring: 'Ground truth (correct) labels.',\n        param_type: ['array'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }, {\n        name: 'y_pred',\n        docstring: 'Predicted labels, as returned by a classifier.',\n        param_type: ['array'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null\n      }, {\n        name: 'normalize',\n        docstring: 'If ``False``, return the number of correctly classified samples. Otherwise, return the fraction of correctly classified samples.',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: 'True'\n      }, {\n        name: 'sample_weight',\n        docstring: 'Sample weights.',\n        param_type: ['array'],\n        expected_shape: '[n_samples], optional',\n        is_optional: true,\n        default_value: null\n      }],\n      outputs: [{\n        name: 'score',\n        docstring: 'If ``normalize == True``, return the fraction of correctly classified samples (float), else returns the number of correctly classified samples (int).  The best performance is 1 with ``normalize == True`` and the number of samples with ``normalize == False``.',\n        param_type: ['float'],\n        returned: true\n      }]\n    }, {\n      name: 'confusion_matrix',\n      docstring: 'Compute confusion matrix to evaluate the accuracy of a classification\\n\\n    By definition a confusion matrix :math:`C` is such that :math:`C_{i, j}`\\n    is equal to the number of observations known to be in group :math:`i` but\\n    predicted to be in group :math:`j`.\\n\\n    Thus in binary classification, the count of true negatives is\\n    :math:`C_{0,0}`, false negatives is :math:`C_{1,0}`, true positives is\\n    :math:`C_{1,1}` and false positives is :math:`C_{0,1}`.',\n      inputs: [{\n        name: 'y_true',\n        docstring: 'Ground truth (correct) target values.',\n        param_type: ['array'],\n        expected_shape: '[n_samples]',\n        is_optional: false,\n        default_value: null\n      }, {\n        name: 'y_pred',\n        docstring: 'Estimated targets as returned by a classifier.',\n        param_type: ['array'],\n        expected_shape: '[n_samples]',\n        is_optional: false,\n        default_value: null\n      }, {\n        name: 'labels',\n        docstring: 'List of labels to index the matrix. This may be used to reorder or select a subset of labels. If none is given, those that appear at least once in ``y_true`` or ``y_pred`` are used in sorted order.',\n        param_type: ['array'],\n        expected_shape: '[n_classes], optional',\n        is_optional: true,\n        default_value: null\n      }, {\n        name: 'sample_weight',\n        docstring: 'Sample weights.',\n        param_type: ['array'],\n        expected_shape: '[n_samples], optional',\n        is_optional: true,\n        default_value: null\n      }],\n      outputs: [{\n        name: 'C',\n        docstring: 'Confusion matrix',\n        param_type: ['array'],\n        returned: true\n      }]\n    }],\n    nodes: [],\n    placeholder: true\n  }],\n  library: 'sklearn',\n  module: 'metrics'\n});\n\n/***/ }),\n\n/***/ 1056:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'pandas',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [{\n    name: 'read_csv',\n    docstring: '\\nRead a comma-separated values (csv) file into DataFrame.',\n    inputs: [{\n      name: 'filepath_or_buffer',\n      docstring: 'Choose a CSV file to upload.',\n      param_type: ['object', 'str'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'sep',\n      docstring: 'Delimiter to use. Use \\\\s+ for whitespace',\n      param_type: ['str'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: ',',\n      options: null\n    }, {\n      name: 'header',\n      docstring: 'Row number(s) to use as the column names, and the start of the data.  Default behavior is to infer the column names: if no names are passed the behavior is identical to ``header=0`` and column names are inferred from the first line of the file, if column names are passed explicitly then the behavior is identical to ``header=None``. Explicitly pass ``header=0`` to be able to replace existing names. The header can be a list of integers that specify row locations for a multi-index on the columns e.g. [0,1,3]. Intervening rows that are not specified will be skipped (e.g. 2 in this example is skipped). Note that this parameter ignores commented lines and empty lines if ``skip_blank_lines=True``, so ``header=0`` denotes the first line of data rather than the first line of the file.',\n      param_type: ['int', 'list'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'infer',\n      options: null\n    }, {\n      name: 'names',\n      docstring: 'List of column names to use. If file contains no header row, then you should explicitly pass ``header=None``. Duplicates in this list are not allowed.',\n      param_type: ['array'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'index_col',\n      docstring: 'Column(s) to use as the row labels of the ``DataFrame``, either given as string name or column index. If a sequence of int / str is given, a MultiIndex is used.  Note: ``index_col=False`` can be used to force pandas to *not* use the first column as the index, e.g. when you have a malformed file with delimiters at the end of each line.',\n      param_type: ['int', 'str', null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '``None``',\n      options: null\n    }, {\n      name: 'usecols',\n      docstring: \"Return a subset of the columns. If list-like, all elements must either be positional (i.e. integer indices into the document columns) or strings that correspond to column names provided either by the user in `names` or inferred from the document header row(s). For example, a valid list-like `usecols` parameter would be ``[0, 1, 2]`` or ``['foo', 'bar', 'baz']``. Element order is ignored, so ``usecols=[0, 1]`` is the same as ``[1, 0]``.\",\n      param_type: ['list', 'callable'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'mangle_dupe_cols',\n      docstring: \"Duplicate columns will be specified as 'X', 'X.1', ...'X.N', rather than 'X'...'X'. Passing in False will cause data to be overwritten if there are duplicate names in the columns.\",\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'skiprows',\n      docstring: 'Line numbers to skip (0-indexed) or number of lines to skip (int) at the start of the file. By default no rows are skipped',\n      param_type: ['int', 'list', 'callable'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'skipfooter',\n      docstring: \"Number of lines at bottom of file to skip (Unsupported with engine='c').\",\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '0',\n      options: null\n    }, {\n      name: 'nrows',\n      docstring: 'Number of rows of file to read. Useful for reading pieces of large files.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'na_values',\n      docstring: \"Additional strings to recognize as NA/NaN. If dict passed, specific per-column NA values.  By default the following values are interpreted as NaN: '', '#N/A', '#N/A N/A', '#NA', '-1.#IND', '-1.#QNAN', '-NaN', '-nan', '1.#IND', '1.#QNAN', 'N/A', 'NA', 'NULL', 'NaN', 'n/a', 'nan', 'null'.\",\n      param_type: ['str', 'dict', 'list'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'keep_default_na',\n      docstring: 'Whether or not to include the default NaN values when parsing the data. Depending on whether `na_values` is passed in, the behavior is as follows:  * If `keep_default_na` is True, and `na_values` are specified, `na_values`   is appended to the default NaN values used for parsing. * If `keep_default_na` is True, and `na_values` are not specified, only   the default NaN values are used for parsing. * If `keep_default_na` is False, and `na_values` are specified, only   the NaN values specified `na_values` are used for parsing. * If `keep_default_na` is False, and `na_values` are not specified, no   strings will be parsed as NaN.  Note that if `na_filter` is passed in as False, the `keep_default_na` and `na_values` parameters will be ignored.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'na_filter',\n      docstring: 'Detect missing value markers (empty strings and the value of na_values). In data without any NAs, passing na_filter=False can improve the performance of reading a large file.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'skip_blank_lines',\n      docstring: 'If True, skip over blank lines rather than interpreting as NaN values.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'compression',\n      docstring: \"For on-the-fly decompression of on-disk data. If 'infer' and `filepath_or_buffer` is path-like, then detect compression from the following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise no decompression). If using 'zip', the ZIP file must contain only one data file to be read in. Set to None for no decompression.  .. versionadded:: 0.18.1 support for 'zip' and 'xz' compression.\",\n      param_type: ['LIST_VALID_OPTIONS', null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'infer',\n      options: ['infer', 'gzip', 'bz2', 'zip', 'xz', 'None']\n    }, {\n      name: 'thousands',\n      docstring: 'Thousands separator.',\n      param_type: ['str'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'decimal',\n      docstring: \"Character to recognize as decimal point (e.g. use ',' for European data).\",\n      param_type: ['str'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '.',\n      options: null\n    }, {\n      name: 'comment',\n      docstring: \"Indicates remainder of line should not be parsed. If found at the beginning of a line, the line will be ignored altogether. This parameter must be a single character. Like empty lines (as long as ``skip_blank_lines=True``), fully commented lines are ignored by the parameter `header` but not by `skiprows`. For example, if ``comment='#'``, parsing ``#empty\\\\na,b,c\\\\n1,2,3`` with ``header=0`` will result in 'a,b,c' being treated as the header.\",\n      param_type: ['str'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: false,\n      options: null\n    }],\n    outputs: [{\n      name: 'data',\n      docstring: 'A comma-separated values (csv) file is returned as two-dimensional data structure with labeled axes.',\n      param_type: ['dataframe'],\n      returned: true\n    }, {\n      name: 'obj',\n      docstring: 'True/False flag to indicate reusing the same instance instead of creating a new one',\n      param_type: ['bool'],\n      returned: true\n    }]\n  }],\n  nodes: [],\n  library: 'pandas',\n  module: null\n});\n\n/***/ }),\n\n/***/ 1057:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'chemml.chem',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [{\n    name: 'atom_features',\n    docstring: 'This function encodes the RDKit atom to a binary vector.\\n\\n    Parameters\\n    ----------\\n    bond : rdkit.Chem.rdchem.Bond\\n        The bond must be an RDKit Bond object.\\n\\n    Returns\\n    -------\\n    features : array\\n        A binary array with length 6 that specifies the type of bond, if it is\\n        a single/double/triple/aromatic bond, a conjugated bond or belongs to a molecular ring.\\n\\n    ',\n    inputs: [{\n      name: 'bond',\n      docstring: 'The bond must be an RDKit Bond object.',\n      param_type: [null],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }],\n    outputs: [{\n      name: 'features',\n      docstring: 'A binary array with length 6 that specifies the type of bond, if it is a single/double/triple/aromatic bond, a conjugated bond or belongs to a molecular ring.',\n      param_type: ['array'],\n      returned: true\n    }]\n  }, {\n    name: 'bond_features',\n    docstring: 'This function encodes the RDKit bond to a binary vector.\\n\\n    Parameters\\n    ----------\\n    bond : rdkit.Chem.rdchem.Bond\\n        The bond must be an RDKit Bond object.\\n\\n    Returns\\n    -------\\n    features : array\\n        A binary array with length 6 that specifies the type of bond, if it is\\n        a single/double/triple/aromatic bond, a conjugated bond or belongs to a molecular ring.\\n\\n    ',\n    inputs: [{\n      name: 'bond',\n      docstring: 'The bond must be an RDKit Bond object.',\n      param_type: [null],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }],\n    outputs: [{\n      name: 'features',\n      docstring: 'A binary array with length 6 that specifies the type of bond, if it is a single/double/triple/aromatic bond, a conjugated bond or belongs to a molecular ring.',\n      param_type: ['array'],\n      returned: true\n    }]\n  }, {\n    name: 'num_atom_features',\n    docstring: 'This function returns the number of atomic features that are available by this module.\\n\\n    Returns\\n    -------\\n    n_features : int\\n        length of atomic feature vector.\\n    ',\n    inputs: [],\n    outputs: [{\n      name: 'n_features',\n      docstring: 'length of atomic feature vector.',\n      param_type: ['int'],\n      returned: true\n    }]\n  }, {\n    name: 'num_bond_features',\n    docstring: 'This function returns the number of bond features that are available by this module.\\n\\n    Returns\\n    -------\\n    n_features : int\\n        length of bond feature vector.\\n    ',\n    inputs: [],\n    outputs: [{\n      name: 'n_features',\n      docstring: 'length of bond feature vector.',\n      param_type: ['int'],\n      returned: true\n    }]\n  }, {\n    name: 'tensorise_molecules',\n    docstring: \"Takes a list of molecules and provides tensor representation of atom and bond features.\\n    This representation is based on the \\\"convolutional networks on graphs for learning molecular fingerprints\\\" by\\n    David Duvenaud et al., NIPS 2015.\\n\\n    Parameters\\n    ----------\\n    molecules : chemml.chem.Molecule object or array\\n        If list, it must be a list of chemml.chem.Molecule objects, otherwise we raise a ValueError.\\n        In addition, all the molecule objects must provide the SMILES representation.\\n        We try to create the SMILES representation if it's not available.\\n\\n    max_degree : int, optional (default=5)\\n        The maximum number of neighbour per atom that each molecule can have\\n        (to which all molecules will be padded), use 'None' for auto\\n\\n    max_atoms : int, optional (default=None)\\n        The maximum number of atoms per molecule (to which all\\n        molecules will be padded), use 'None' for auto\\n\\n    n_jobs : int, optional(default=-1)\\n        The number of parallel processes. If -1, uses all the available processes.\\n\\n    batch_size : int, optional(default=3000)\\n        The number of molecules per process, bigger chunksize is preffered as each process will preallocate np.arrays\\n\\n    verbose : bool, optional(default=True)\\n        The verbosity of messages.\\n\\n    Notes\\n    -----\\n        It is not recommended to set max_degree to `None`/auto when\\n        using `NeuralGraph` layers. Max_degree determines the number of\\n        trainable parameters and is essentially a hyperparameter.\\n        While models can be rebuilt using different `max_atoms`, they cannot\\n        be rebuild for different values of `max_degree`, as the architecture\\n        will be different.\\n\\n        For organic molecules `max_degree=5` is a good value (Duvenaud et. al, 2015)\\n\\n\\n    Returns\\n    -------\\n        atoms : array\\n            An atom feature array of shape (molecules, max_atoms, atom_features)\\n        bonds : array\\n            A bonds array of shape (molecules, max_atoms, max_degree)\\n        edges : array\\n        A connectivity array of shape (molecules, max_atoms, max_degree, bond_features)\\n    \",\n    inputs: [{\n      name: 'molecules',\n      docstring: \"If list, it must be a list of chemml.chem.Molecule objects, otherwise we raise a ValueError. In addition, all the molecule objects must provide the SMILES representation. We try to create the SMILES representation if it's not available.\",\n      param_type: ['array', 'object'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'max_degree',\n      docstring: \"The maximum number of neighbour per atom that each molecule can have (to which all molecules will be padded), use 'None' for auto\",\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '5',\n      options: null\n    }, {\n      name: 'max_atoms',\n      docstring: \"The maximum number of atoms per molecule (to which all molecules will be padded), use 'None' for auto\",\n      param_type: ['int', null],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'None',\n      options: null\n    }, {\n      name: 'n_jobs',\n      docstring: 'The number of parallel processes. If -1, uses all the available processes.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '-1',\n      options: null\n    }, {\n      name: 'batch_size',\n      docstring: 'The number of molecules per process, bigger chunksize is preffered as each process will preallocate np.arrays',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '3000',\n      options: null\n    }, {\n      name: 'verbose',\n      docstring: 'The verbosity of messages.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }],\n    outputs: [{\n      name: 'atoms',\n      docstring: 'An atom feature array of shape (molecules, max_atoms, atom_features)',\n      param_type: ['array'],\n      returned: true\n    }, {\n      name: 'bonds',\n      docstring: 'A bonds array of shape (molecules, max_atoms, max_degree)',\n      param_type: ['array'],\n      returned: true\n    }, {\n      name: 'edges',\n      docstring: 'edges : array A connectivity array of shape (molecules, max_atoms, max_degree, bond_features)',\n      param_type: ['array'],\n      returned: true\n    }]\n  }],\n  nodes: [{\n    name: 'BagofBonds',\n    docstring: '\\n    The implementation of bag of bonds version of coulomb matrix by katja Hansen et. al. 2015, JPCL.',\n    inputs: [{\n      name: 'const',\n      docstring: 'The constant value for coordinates unit conversion to atomic unit if const=1.0, returns atomic unit if const=0.529, returns Angstrom  const/|Ri-Rj|, which denominator is the euclidean distance between two atoms',\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '1.0',\n      options: null\n    }, {\n      name: 'n_jobs',\n      docstring: 'The number of parallel processes. If -1, uses all the available processes.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '-1',\n      options: null\n    }, {\n      name: 'verbose',\n      docstring: 'The verbosity of messages.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }],\n    outputs: [{\n      name: 'header_',\n      docstring: 'contains one nuclear charge (represents single atom) or a tuple of two nuclear charges (represents a bond)',\n      param_type: ['list'],\n      returned: false\n    }],\n    node_functions: [{\n      name: 'represent',\n      docstring: '\\n        provides bag of bonds representation for input molecules.',\n      inputs: [{\n        name: 'molecules',\n        docstring: 'If list, it must be a list of chemml.chem.Molecule objects, otherwise we raise a ValueError. In addition, all the molecule objects must provide the XYZ information. Please make sure the XYZ geometry has been stored or optimized in advance.',\n        param_type: ['array', 'object'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: [{\n        name: 'features',\n        docstring: 'The bag of bond features.',\n        param_type: [null],\n        returned: true\n      }]\n    }],\n    nodes: []\n  }, {\n    name: 'CoulombMatrix',\n    docstring: '\\n    The implementation of coulomb matrix descriptors by Matthias Rupp et. al. 2012, PRL (All 3 different variations).',\n    inputs: [{\n      name: 'cm_type',\n      docstring: \"The coulomb matrix type, one of the following types:     * 'Unsorted_Matrix' or 'UM'     * 'Unsorted_Triangular' or 'UT'     * 'Eigenspectrum' or 'E'      * 'Sorted_Coulomb' or 'SC'     * 'Random_Coulomb' or 'RC'\",\n      param_type: ['str'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'SC',\n      options: ['UM', 'UT', 'E', 'SC', 'RC']\n    }, {\n      name: 'max_n_atoms',\n      docstring: \"Set the maximum number of atoms per molecule (to which all representations will be padded). If 'auto', we find it based on all input molecules.\",\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'auto',\n      options: null\n    }, {\n      name: 'nPerm',\n      docstring: 'Number of permutation of coulomb matrix per molecule for Random_Coulomb (RC)  type of representation.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '3',\n      options: null\n    }, {\n      name: 'const',\n      docstring: 'The constant value for coordinates unit conversion to atomic unit example: atomic unit -> const=1, Angstrom -> const=0.529 const/|Ri-Rj|, which denominator is the euclidean distance between atoms i and j',\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '1',\n      options: null\n    }, {\n      name: 'n_jobs',\n      docstring: 'The number of parallel processes. If -1, uses all the available processes.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '-1',\n      options: null\n    }, {\n      name: 'verbose',\n      docstring: 'The verbosity of messages.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }],\n    outputs: [{\n      name: 'n_molecules_',\n      docstring: 'Total number of molecules.',\n      param_type: ['int'],\n      returned: false\n    }, {\n      name: 'max_n_atoms_',\n      docstring: 'Maximum number of atoms in all molecules.',\n      param_type: ['int'],\n      returned: false\n    }],\n    node_functions: [{\n      name: 'represent',\n      docstring: '\\n        provides coulomb matrix representation for input molecules.',\n      inputs: [{\n        name: 'molecules',\n        docstring: 'If list, it must be a list of chemml.chem.Molecule objects, otherwise we raise a ValueError. In addition, all the molecule objects must provide the XYZ information. Please make sure the XYZ geometry has been stored or optimized in advance.',\n        param_type: ['array', 'object'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: [{\n        name: 'features',\n        docstring: 'A data frame with same number of rows as number of molecules will be returned. The exact shape of the dataframe depends on the type of CM as follows:     - shape of Unsorted_Matrix (UM): (n_molecules, max_n_atoms**2)     - shape of Unsorted_Triangular (UT): (n_molecules, max_n_atoms*(max_n_atoms+1)/2)     - shape of eigenspectrums (E): (n_molecules, max_n_atoms)     - shape of Sorted_Coulomb (SC): (n_molecules, max_n_atoms*(max_n_atoms+1)/2)     - shape of Random_Coulomb (RC): (n_molecules, nPerm * max_n_atoms * (max_n_atoms+1)/2)',\n        param_type: ['dataframe'],\n        returned: true\n      }]\n    }],\n    nodes: []\n  }, {\n    name: 'Dragon',\n    docstring: '\\n    An interface to Dragon 6 and 7 chemoinformatics software. Dragon is a commercial software and\\n    you should provide API Key',\n    inputs: [{\n      name: 'version',\n      docstring: \"The version of available Dragon on the user's system. (available versions: 6 or 7)\",\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '7',\n      options: null\n    }, {\n      name: 'Weights',\n      docstring: 'A list of weights to be used',\n      param_type: ['list'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'blocks',\n      docstring: \"A list of integers as descriptor blocks' id. There are totally 29 and 30 blocks available in version 6 and 7, respectively. This module is not atimed to cherry pick descriptors in each block. For doing so, please use Script Wizard in Drgon GUI.\",\n      param_type: ['list'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'external',\n      docstring: 'If True, include external variables at the end of each saved file.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'False',\n      options: null\n    }],\n    outputs: [],\n    node_functions: [{\n      name: '__init__',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: '_save_script',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'convert_to_csv',\n      docstring: '\\n        This function converts the tab-delimited txt file from Dragon to pandas dataframe.\\n        Note that this process might require large memory based on the number of data points and features.',\n      inputs: [{\n        name: 'remove',\n        docstring: 'if True, the original descriptors file (Dragon_descriptors.txt) will be removed.',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: 'True',\n        options: null\n      }],\n      outputs: [{\n        name: 'features',\n        docstring: \"The 2D dataframe of the descriptors. Note that the first two columns are 'No.' and 'NAME'.\",\n        param_type: ['dataframe'],\n        returned: true\n      }]\n    }, {\n      name: 'printout',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'run',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'script_wizard',\n      docstring: \"\\n        The script_wizard is designed to build a Dragon script file. The name and\\n        the functionality of this function is the same as available Script wizard\\n        in the Dragon Graphic User Interface.\\n        Note: All reported nodes are mandatory, except the <EXTERNAL> tag\\n        Note: Script for version 7 doesn't support fingerprints block\",\n      inputs: [{\n        name: 'script',\n        docstring: 'If \"new\" start creating a new script from scratch. If you want to load an existing script, pass the filename with drs format.',\n        param_type: ['str'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: '\"new\"',\n        options: null\n      }, {\n        name: 'output_directory',\n        docstring: 'the path to the working directory to store output files.',\n        param_type: ['str'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: './',\n        options: null\n      }, {\n        name: 'dragon',\n        docstring: 'Dragon script in  xml format.',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'drs',\n        docstring: 'Dragon script file name',\n        param_type: ['str'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'data_path',\n        docstring: \"The path+name of saved data file in any format. If saveType is 'block' or 'subblock' data_path is just the path to the directory that all data files have been saved.\",\n        param_type: ['str'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: []\n    }],\n    nodes: []\n  }, {\n    name: 'Molecule',\n    docstring: 'The central class to construct a molecule from different chemical input formats.\\n    This module is built on top of RDKit and OpenBabel python API.\\n    We join the forces and strength of these two cheminformatic libraris for a consistent user experience.\\n\\n    Almost all the molecular descriptors and molecule-based ML models require the chemical informatin as a Molecule object.\\n    Several methods are available in this module to facilitate the manipulation of chemical data.',\n    inputs: [{\n      name: 'input',\n      docstring: 'The representation string or path to a file.',\n      param_type: ['str'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'input_type',\n      docstring: 'The input type. The available types are enlisted here:     - smiles: The input must be SMILES representation of a molecule.     - smarts: The input must be SMARTS representation of a molecule.     - inchi: The input must be InChi representation of a molecule.     - xyz:  The input must be the path to an xyz file.',\n      param_type: ['str'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: ['smiles', 'smarts', 'inchi', 'xyz']\n    }, {\n      name: 'kwargs',\n      docstring: 'The corresponding RDKit arguments for each of the input types:     - smiles: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolFromSmiles     - smarts: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolFromSmarts     - inchi: http://rdkit.org/docs/source/rdkit.Chem.inchi.html?highlight=inchi#rdkit.Chem.inchi.MolFromInchi',\n      param_type: [null],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }],\n    outputs: [{\n      name: 'rdkit_molecule',\n      docstring: 'The `rdkit.Chem.rdchem.Mol` object',\n      param_type: ['object'],\n      returned: false\n    }, {\n      name: 'smiles',\n      docstring: 'The SMILES string that you get by running the `to_smiles` method.',\n      param_type: ['str'],\n      returned: false\n    }, {\n      name: 'smarts',\n      docstring: 'The SMARTS string that you get by running the `to_smarts` method.',\n      param_type: ['str'],\n      returned: false\n    }, {\n      name: 'inchi',\n      docstring: 'The InChi string that you get by running the `to_inchi` method.',\n      param_type: ['str'],\n      returned: false\n    }, {\n      name: 'xyz',\n      docstring: \"The class object that stores the 3D info. The available attributes in the class are 'geometry', 'atomic_numbers', and 'atomic_symbols'.\",\n      param_type: [null],\n      returned: false\n    }],\n    node_functions: [{\n      name: 'hydrogens',\n      docstring: \"\\n        This function adds/removes hydrogens to/from a prebuilt molecule object.\\n\\n        Parameters\\n        ----------\\n        action : str\\n            Either 'add' or 'remove', to add hydrogns or remove them from the rdkit molecule.\\n\\n        kwargs :\\n            The arguments that can be passed to the rdkit functions:\\n            - `Chem.AddHs`: documentation at http://rdkit.org/docs/source/rdkit.Chem.rdmolops.html?highlight=addhs#rdkit.Chem.rdmolops.AddHs\\n            - `Chem.RemoveHs`: documentation at http://rdkit.org/docs/source/rdkit.Chem.rdmolops.html?highlight=addhs#rdkit.Chem.rdmolops.RemoveHs\\n\\n        Notes\\n        -----\\n            - The rdkit or pybel molecule object must be created in advance.\\n            - Only rdkit or pybel molecule object will be modified in place.\\n            - If you remove hydrogens from molecules, the atomic 3D coordinates might not be accurate for the conversion to xyz representation.\\n\\n        \",\n      inputs: [{\n        name: 'action',\n        docstring: \"Either 'add' or 'remove', to add hydrogns or remove them from the rdkit molecule.\",\n        param_type: ['str'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'kwargs :',\n        docstring: 'The arguments that can be passed to the rdkit functions: - `Chem.AddHs`: documentation at http://rdkit.org/docs/source/rdkit.Chem.rdmolops.html?highlight=addhs#rdkit.Chem.rdmolops.AddHs - `Chem.RemoveHs`: documentation at http://rdkit.org/docs/source/rdkit.Chem.rdmolops.html?highlight=addhs#rdkit.Chem.rdmolops.RemoveHs',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: []\n    }, {\n      name: 'to_inchi',\n      docstring: '\\n        This function creates and stores the InChi string for a pre-built molecule.\\n\\n        Parameters\\n        ----------\\n        kwargs :\\n            The arguments that can be passed to the rdkit.Chem.MolToInchi function (will be used only if rdkit molecule is available).\\n            The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.inchi.html?highlight=inchi#rdkit.Chem.inchi.MolToInchi\\n\\n        Notes\\n        -----\\n            - The rdkit or pybel molecule object must be created in advance.\\n            - The molecule will be modified in place.\\n\\n        ',\n      inputs: [{\n        name: 'kwargs :',\n        docstring: 'The arguments that can be passed to the rdkit.Chem.MolToInchi function (will be used only if rdkit molecule is available). The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.inchi.html?highlight=inchi#rdkit.Chem.inchi.MolToInchi',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: []\n    }, {\n      name: 'to_smarts',\n      docstring: '\\n        This function creates and stores the SMARTS string for a pre-built molecule.\\n\\n        Parameters\\n        ----------\\n        kwargs :\\n            All the arguments that can be passed to the rdkit.Chem.MolToSmarts function.\\n            The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolToSmarts\\n\\n        Notes\\n        -----\\n            - The rdkit or pybel molecule object must be created in advance.\\n            - If only pybel molecule is available, we create an rdkit molecule using its SMILES representation, and then create the SMARTS string using rdkit arguments.\\n            - The molecule will be modified in place.\\n\\n        ',\n      inputs: [{\n        name: 'kwargs :',\n        docstring: 'All the arguments that can be passed to the rdkit.Chem.MolToSmarts function. The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolToSmarts',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: []\n    }, {\n      name: 'to_smiles',\n      docstring: '\\n        This function creates and stores the SMILES string for a pre-built molecule.\\n\\n        Parameters\\n        ----------\\n        kwargs :\\n            The arguments for the rdkit.Chem.MolToSmiles function.\\n            The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolToSmiles\\n\\n        Notes\\n        -----\\n            - The rdkit or pybel molecule object must be created in advance.\\n            - If only pybel molecule is available, we create an rdkit molecule using its SMILES representation, and then recreate the SMILES string using rdkit arguments.\\n            - The molecule will be modified in place.\\n            - For rdkit molecule the SMILES string is canocical by default, unless when one requests kekuleSmiles.\\n\\n        ',\n      inputs: [{\n        name: 'kwargs :',\n        docstring: 'The arguments for the rdkit.Chem.MolToSmiles function. The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolToSmiles',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: []\n    }, {\n      name: 'to_xyz',\n      docstring: \"\\n        This function creates and stores the xyz coordinates for a pre-built molecule object.\\n\\n        Parameters\\n        ----------\\n        optimizer : None or str, optional (default: None)\\n            If None, the geometries will be extracted from the available source of 3D structure (if any).\\n            Otherwise, any of the 'UFF' or 'MMFF' force fileds should be passed to embed and optimize geometries using 'rdkit.Chem.AllChem.UFFOptimizeMolecule' or\\n            'rdkit.Chem.AllChem.MMFFOptimizeMolecule' methods, respectively.\\n\\n        kwargs :\\n            The arguments that can be passed to the corresponding forcefileds.\\n            The documentation is available at:\\n                - UFFOptimizeMolecule: http://rdkit.org/docs/source/rdkit.Chem.rdForceFieldHelpers.html?highlight=mmff#rdkit.Chem.rdForceFieldHelpers.UFFOptimizeMolecule\\n                - MMFFOptimizeMolecule: http://rdkit.org/docs/source/rdkit.Chem.rdForceFieldHelpers.html?highlight=mmff#rdkit.Chem.rdForceFieldHelpers.MMFFOptimizeMolecule\\n\\n        Notes\\n        -----\\n            - The geometry will be stored in the `xyz` attribute.\\n            - The molecule object must be created in advance.\\n            - The hydrogens won't be added to the molecule automatically. You should add it manually using `hydrogens` method.\\n            - If the molecule object has been built using 2D representations (e.g., SMILES or InChi), the conformer\\n            doesn't exist and you nedd to set the optimizer parameter to any of the force fields.\\n            - If the 3D info exist but you still need to run optimization, the 3D structure will be embedded from scratch (i.e., the current atom coordinates will be removed.)\\n\\n\\n        \",\n      inputs: [{\n        name: 'optimizer',\n        docstring: \"If None, the geometries will be extracted from the available source of 3D structure (if any). Otherwise, any of the 'UFF' or 'MMFF' force fileds should be passed to embed and optimize geometries using 'rdkit.Chem.AllChem.UFFOptimizeMolecule' or 'rdkit.Chem.AllChem.MMFFOptimizeMolecule' methods, respectively.\",\n        param_type: ['str', null],\n        expected_shape: null,\n        is_optional: true,\n        default_value: 'None',\n        options: null\n      }, {\n        name: 'kwargs :',\n        docstring: 'The arguments that can be passed to the corresponding forcefileds. The documentation is available at:     - UFFOptimizeMolecule: http://rdkit.org/docs/source/rdkit.Chem.rdForceFieldHelpers.html?highlight=mmff#rdkit.Chem.rdForceFieldHelpers.UFFOptimizeMolecule     - MMFFOptimizeMolecule: http://rdkit.org/docs/source/rdkit.Chem.rdForceFieldHelpers.html?highlight=mmff#rdkit.Chem.rdForceFieldHelpers.MMFFOptimizeMolecule',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: []\n    }, {\n      name: 'visualize',\n      docstring: '\\n        This function visualizes the molecule. If both rdkit and pybel objects are avaialble, the rdkit object\\n        will be used for visualization.\\n\\n        Parameters\\n        ----------\\n        filename: str, optional (default = None)\\n            This is the path to the file that you want write the image in it.\\n            Tkinter and Python Imaging Library are required for writing the image.\\n\\n        kwargs:\\n            any extra parameter that you want to pass to the rdkit or pybel draw tool.\\n            Additional information at:\\n                - https://www.rdkit.org/docs/source/rdkit.Chem.Draw.html\\n                - http://openbabel.org/docs/dev/UseTheLibrary/Python_PybelAPI.html#pybel.Molecule.draw\\n\\n        Returns\\n        -------\\n        fig : object\\n            You will be able to display this object, e.g., inside the Jupyter Notebook.\\n\\n        ',\n      inputs: [{\n        name: 'filename: str, optional (default = None)',\n        docstring: 'This is the path to the file that you want write the image in it. Tkinter and Python Imaging Library are required for writing the image.',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'kwargs:',\n        docstring: 'any extra parameter that you want to pass to the rdkit or pybel draw tool. Additional information at:     - https://www.rdkit.org/docs/source/rdkit.Chem.Draw.html     - http://openbabel.org/docs/dev/UseTheLibrary/Python_PybelAPI.html#pybel.Molecule.draw',\n        param_type: [null],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: [{\n        name: 'fig',\n        docstring: 'You will be able to display this object, e.g., inside the Jupyter Notebook.',\n        param_type: ['object'],\n        returned: true\n      }]\n    }],\n    nodes: []\n  }, {\n    name: 'RDKitFingerprint',\n    docstring: '\\n    This is an interface to the available molecular fingerprints in the RDKit package.',\n    inputs: [{\n      name: 'fingerprint_type',\n      docstring: \"The type of fingerprint. Available fingerprint types:     - 'hashed_atom_pair' or 'hap'     - 'MACCS' or 'maccs'     - 'morgan'     - 'hashed_topological_torsion' or 'htt'     - 'topological_torsion' or 'tt'\",\n      param_type: ['str'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'Morgan',\n      options: ['hashed_atom_pair', 'MACCS', 'morgan', 'hashed_topological_torsion', 'topological_torsion']\n    }, {\n      name: 'vector',\n      docstring: \"Available options for vector:     - 'int' : represent counts for each fragment instead of bits             It is not available for 'MACCS'.     - 'bit' : only zeros and ones             It is not available for 'Topological_torsion'.\",\n      param_type: ['str'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'bit',\n      options: ['int', 'bit']\n    }, {\n      name: 'n_bits',\n      docstring: \"It sets number of elements/bits in the 'bit' type of fingerprint vectors. Not available for:     - 'MACCS' - (MACCS keys have a fixed length of 167 bits)     - 'Topological_torsion' - doesn't return a bit vector at all.\",\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '1024',\n      options: null\n    }, {\n      name: 'radius',\n      docstring: \"only applicable if calculating 'Morgan' fingerprint.\",\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '2',\n      options: null\n    }, {\n      name: 'kwargs :',\n      docstring: 'Any additional argument that should be passed to the rdkit fingerprint function.',\n      param_type: [null],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }],\n    outputs: [{\n      name: 'n_molecules_',\n      docstring: 'The number of molecules that are received.',\n      param_type: ['int'],\n      returned: false\n    }, {\n      name: 'fps_',\n      docstring: 'The list of rdkit fingerprint objects.',\n      param_type: ['list'],\n      returned: false\n    }],\n    node_functions: [{\n      name: 'represent',\n      docstring: '\\n        The main function to provide fingerprint representation of input molecule(s).',\n      inputs: [{\n        name: 'molecules',\n        docstring: 'It must be an instance of chemml.chem.Molecule object or a list of those objects, otherwise a ValueError will be raised. If smiles representation of the molecule (or rdkit molecule object) is not available, we convert the molecule to smiles automatically. However, the automatic conversion may ignore your manual settings, for example removed hydrogens, kekulized, or canonical smiles.',\n        param_type: ['object', 'list'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: [{\n        name: 'features',\n        docstring: 'A 2-dimensional pandas dataframe of fingerprint features with same number of rows as number of molecules.',\n        param_type: ['dataframe'],\n        returned: true\n      }]\n    }, {\n      name: 'store_sparse',\n      docstring: '\\n        This function helps you to store higly sparse fingerprint feature sets using `.npz` format for memory efficiency and\\n        less store/load time.\\n        Another method of this class, `load_sparse`, enables you to load your `.npz` files and convert it back to pandas dataframe.\\n\\n        Parameters\\n        ----------\\n        file : str\\n            Must be a path to the file with .npz format.\\n\\n        features : pandas DataFrame\\n            Must be the pandas dataframe as you receive it from `represent` method.\\n\\n        ',\n      inputs: [{\n        name: 'file',\n        docstring: 'Must be a path to the file with .npz format.',\n        param_type: ['str'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'features',\n        docstring: 'Must be the pandas dataframe as you receive it from `represent` method.',\n        param_type: ['dataframe'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: []\n    }],\n    nodes: []\n  }, {\n    name: 'XYZ',\n    docstring: '\\n    This class stores the information that is typically carried by standard XYZ files.',\n    inputs: [{\n      name: 'geometry',\n      docstring: 'The numpy array of shape (number_of_atoms, 3). It stores the xyz coordinates for each atom of the molecule.',\n      param_type: ['array'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'atomic_numbers',\n      docstring: 'The numpy array of shape (number_of_atoms, 1). It stores the atomic numbers of each atom in the molecule (in the same order as geometry).',\n      param_type: ['array'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'atomic_symbols',\n      docstring: 'The numpy array of shape (number_of_atoms, 1). It stores the atomic symbols of each atom in the molecule (in the same order as geometry).',\n      param_type: ['array'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }],\n    outputs: [],\n    node_functions: [],\n    nodes: []\n  }],\n  library: 'chemml',\n  module: 'chem'\n});\n\n/***/ }),\n\n/***/ 1058:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'chemml.models',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [],\n  nodes: [{\n    name: 'MLP',\n    docstring: '\\n    Class associated with Multi-Layer Perceptron (Neural Network)',\n    inputs: [{\n      name: 'nhidden',\n      docstring: 'The number of hidden layers in the neural network (excluding input and output)',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '1',\n      options: null\n    }, {\n      name: 'nneurons',\n      docstring: 'The number of nodes in each hidden layer. Must be of same length as nhidden. default: [100] * nhidden',\n      param_type: ['list'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'activations',\n      docstring: \"The activation type for each hidden layer. Must be of same length as nhidden. Refer https://keras.io/activations/ for list of valid activations. default: ['sigmoid'] * nhidden\",\n      param_type: ['list'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: null,\n      options: null\n    }, {\n      name: 'nepochs',\n      docstring: 'Number of training epochs.',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '100',\n      options: null\n    }, {\n      name: 'batch_size',\n      docstring: 'Number of training samples in mini-batch',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '100',\n      options: null\n    }, {\n      name: 'loss',\n      docstring: 'Type of loss used to train the neural network. Refer https://keras.io/losses/ for list of valid losses',\n      param_type: ['str'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: 'mean_squared_error',\n      options: ['mean_squared_error', 'mean_absolute_error', 'squared_hinge', 'hinge', 'categorical_hinge', 'categorical_crossentropy', 'binary_crossentropy', 'kullback_liebler_divergence']\n    }, {\n      name: 'regression',\n      docstring: 'Decides whether we are training for regression or classification task',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'True',\n      options: null\n    }, {\n      name: 'nclasses',\n      docstring: 'Number of classes labels needs to be specified if regression is False',\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'None',\n      options: null\n    }],\n    outputs: [],\n    node_functions: [{\n      name: '__init__',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'fit',\n      docstring: '\\n        Train the MLP for training data X and targets y',\n      inputs: [{\n        name: 'X',\n        docstring: 'Training data',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'y',\n        docstring: 'Training targets',\n        param_type: ['array'],\n        expected_shape: '[n_samples,]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: []\n    }, {\n      name: 'predict',\n      docstring: '\\n        Return prediction for test data X',\n      inputs: [{\n        name: 'X',\n        docstring: 'Testing data',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: [{\n        name: '',\n        docstring: 'Predicted value from model',\n        param_type: ['float'],\n        returned: true\n      }]\n    }, {\n      name: 'score',\n      docstring: '\\n        Predict results for test data X and compare with true targets y. Returns root mean square error if regression,\\n        accuracy if classification\\n\\n        Parameters\\n        ----------\\n        X: array_like, shape=[n_samples, n_features]\\n            Test data\\n\\n        y: array_like, shape=[n_samples,]\\n            True targets\\n\\n        Returns\\n        -------\\n        float\\n            root mean square error if regression, accuracy if classification\\n        ',\n      inputs: [{\n        name: 'X',\n        docstring: 'Test data',\n        param_type: ['array'],\n        expected_shape: '[n_samples, n_features]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'y',\n        docstring: 'True targets',\n        param_type: ['array'],\n        expected_shape: '[n_samples,]',\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: [{\n        name: 'score',\n        docstring: 'root mean square error if regression, accuracy if classification',\n        param_type: ['float'],\n        returned: true\n      }]\n    }],\n    nodes: []\n  }, {\n    name: 'OrganicLorentzLorenz',\n    docstring: '\\n    A machine learning model for Lorentz-Lorenz (LL) estimates of refractive index.\\n    The model predicts refractive index, polarizability, and density of an organic molecule using its\\n    SMILES representation.\\n\\n    The model is trained on 100K small organic molecules with their polarizabilities from DFT calculations, densities from\\n    molecular dynamics simulations, and refractive index by feeding calculated polarizabilities and densities into the\\n    LL model.\\n\\n    The model is a fully connected artificial neural network with 3 hidden layers. The number of neurons per layers from\\n    input layer to the output layer are as follow: 1024 --> 128 --> 64 --> 32 --> [1, 1, 1].\\n    ',\n    inputs: [],\n    outputs: [],\n    node_functions: [{\n      name: '_OrganicLorentzLorenz__represent',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'get_hidden_layer',\n      docstring: '\\n        This functions return the first hidden layer of the model.',\n      inputs: [{\n        name: 'X',\n        docstring: 'If 2D array, must be with 1024 dimension and numerical type. It is recommended to be Morgan fingerprint representation of the molecules. If 1D array, must be an array of `str` type, each element represents a molecule in the SMILES format.',\n        param_type: ['array'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'id',\n        docstring: 'This is the id of hidden layers. It can be any of 1, 2, or 3 for the first, second, or third hidden layer, respectively.',\n        param_type: ['int'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: [{\n        name: 'layer_output',\n        docstring: 'The array of shape (length_of_X, 128) as the outputs of the first hidden layer (id=1). The array of shape (length_of_X, 64) as the outputs of the first hidden layer (id=2). The array of shape (length_of_X, 32) as the outputs of the first hidden layer (id=3).',\n        param_type: ['array'],\n        returned: true\n      }]\n    }, {\n      name: 'load',\n      docstring: 'This function loads the Keras model. The model consists of 3 hidden layers and more than 140K parameters.',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'predict',\n      docstring: 'After loading the model, this function predicts refractive index, polarizability, and density of the entery.',\n      inputs: [{\n        name: 'smiles',\n        docstring: 'The SMILES representaion of a molecule.',\n        param_type: ['str'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'pprint',\n        docstring: 'If True, a short description of the predicted properties will be printed out.',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: 'True',\n        options: null\n      }],\n      outputs: [{\n        name: 'predictions',\n        docstring: 'includes estimates of refractive index, polarizability, and density, respectively.',\n        param_type: ['tuple'],\n        returned: true\n      }]\n    }, {\n      name: 'train',\n      docstring: \"\\n        This function allows the user to retrain the model on a given data set for some further steps.\\n        Thus, all the parameters you are able to pass to a keras model's compile or fit methods can be passed to this\\n        function as well.\",\n      inputs: [{\n        name: 'X',\n        docstring: 'If 2D array, must be with 1024 dimension and numerical type. It is recommended to be Morgan fingerprint representation of the molecules. If 1D array, must be an array of `str` type, each element represents a molecule in the SMILES format. If dataframe, it can be a 2D frame with one columnd of SMILES or 1024 columns of features.',\n        param_type: ['array'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'Y',\n        docstring: 'a list of three numpy arrays for refractive index, polarizability, and density, respectively. The length of arrays must be same as the length of X. If dataframe, it must be a 2D frame with 3 columns, each for one of the properties.',\n        param_type: ['array', 'list'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'scale: bool, optional (default: True)',\n        docstring: 'If True the X and Y will be scaled in the same fashion as the original traning process (recommended).',\n        param_type: ['bool'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: 'True',\n        options: null\n      }],\n      outputs: []\n    }],\n    nodes: []\n  }],\n  library: 'chemml',\n  module: 'models'\n});\n\n/***/ }),\n\n/***/ 1059:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'chemml.datasets',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [{\n    name: 'load_cep_homo',\n    docstring: \"Load and return a small sample of HOMO energies of organic photovoltaic candidates from CEP database (regression).\\n    Clean Energy Project (CEP) database is available at: https://cepdb.molecularspace.org\\n    The unit of HOMO (highest occupied molecular orbitals) energies is electron Volt (eV).\\n    The photovaltaic candidates are provided using SMILES representation.\\n\\n    =================   ==============\\n    rows                           500\\n    Columns                          2\\n    headers             smiles,homo_eV\\n    molecules rep.              SMILES\\n    Features                         0\\n    Returns               2 dataframes\\n    =================   ==============\\n\\n    Returns\\n    -------\\n    smiles: pandas dataframe\\n        The SMILES representation of molecules, shape: (500,1)\\n\\n    homo: pandas dataframe\\n        The HOMO energies of the molecules (eV), shape: (500,1)\\n\\n    Examples\\n    --------\\n    >>> from chemml.datasets import load_cep_homo\\n    >>> smi, homo  = load_cep_homo()\\n    >>> print(list(smi.columns))\\n    ['smiles']\\n    >>> print(homo.shape)\\n    (500, 1)\\n    \",\n    inputs: [],\n    outputs: [{\n      name: 'smiles',\n      docstring: 'The SMILES representation of molecules, shape: (500,1)',\n      param_type: ['dataframe'],\n      returned: true\n    }, {\n      name: 'homo',\n      docstring: 'The HOMO energies of the molecules (eV), shape: (500,1)',\n      param_type: ['dataframe'],\n      returned: true\n    }]\n  }, {\n    name: 'load_comp_energy',\n    docstring: 'Load and return composition entries and formation energies (eV).\\n    From Magpie https://bitbucket.org/wolverton/magpie\\n\\n    =================   ======================\\n    rows                                   630\\n    header                    formation_energy\\n    molecules rep.                 composition\\n    Features                                 0\\n    Returns             1 dataframe and 1 list\\n    =================   ======================\\n\\n    Returns\\n    -------\\n    entries: list\\n        The list of composition entries from CompositionEntry class.\\n\\n    energy: pandas dataframe\\n        The formation energy for each composition.\\n\\n    Examples\\n    --------\\n    >>> from chemml.datasets import load_comp_energy\\n    >>> entries, df = load_comp_energy()\\n    >>> print(df.shape)\\n    (630, 1)\\n    ',\n    inputs: [],\n    outputs: [{\n      name: 'entries',\n      docstring: 'The list of composition entries from CompositionEntry class.',\n      param_type: ['list'],\n      returned: true\n    }, {\n      name: 'energy',\n      docstring: 'The formation energy for each composition.',\n      param_type: ['dataframe'],\n      returned: true\n    }]\n  }, {\n    name: 'load_crystal_structures',\n    docstring: 'Load and return crystal structure entries.\\n    From Magpie https://bitbucket.org/wolverton/magpie\\n\\n    =================   ======================\\n    length                                  18\\n    header                    formation_energy\\n    molecules rep.                 composition\\n    Features                                 0\\n    Returns                             1 list\\n    =================   ======================\\n\\n    Returns\\n    -------\\n    entries: list\\n        The list of crystal structure entries from CrystalStructureEntry class.\\n\\n    Examples\\n    --------\\n    >>> from chemml.datasets import load_crystal_structures\\n    >>> entries = load_crystal_structures()\\n    >>> print(len(entries))\\n    18\\n    ',\n    inputs: [],\n    outputs: [{\n      name: 'entries',\n      docstring: 'The list of crystal structure entries from CrystalStructureEntry class.',\n      param_type: ['list'],\n      returned: true\n    }]\n  }, {\n    name: 'load_organic_density',\n    docstring: \"Load and return 500 small organic molecules with their density and molecular descriptors.\\n\\n    =================   ======================\\n    rows                                   500\\n    Columns                                202\\n    last twoo headers     smiles,density_Kg/m3\\n    molecules rep.                      SMILES\\n    Features                               200\\n    Returns                       3 dataframes\\n    =================   ======================\\n\\n    Returns\\n    -------\\n    smiles: pandas dataframe\\n        The SMILES representation of molecules, shape: (500,1)\\n\\n    density: pandas dataframe\\n        The density of molecules (Kg/m3), shape: (500,1)\\n\\n    features: pandas dataframe\\n        The molecular descriptors of molecules, shape: (500,200)\\n\\n    Examples\\n    --------\\n    >>> from chemml.datasets import load_organic_density\\n    >>> smi, density, features = load_organic_density()\\n    >>> print(list(smi.columns))\\n    ['smiles']\\n    >>> print(features.shape)\\n    (500, 200)\\n    \",\n    inputs: [],\n    outputs: [{\n      name: 'smiles',\n      docstring: 'The SMILES representation of molecules, shape: (500,1)',\n      param_type: ['dataframe'],\n      returned: true\n    }, {\n      name: 'density',\n      docstring: 'The density of molecules (Kg/m3), shape: (500,1)',\n      param_type: ['dataframe'],\n      returned: true\n    }, {\n      name: 'features',\n      docstring: 'The molecular descriptors of molecules, shape: (500,200)',\n      param_type: ['dataframe'],\n      returned: true\n    }]\n  }, {\n    name: 'load_xyz_polarizability',\n    docstring: 'Load and return xyz files and polarizability (Bohr^3).\\n    The xyz coordinates of small organic molecules are optimized with BP86/def2svp level of theory.\\n    Polarizability of the molecules are also calcualted in the same level of thoery.\\n\\n    =================   ======================\\n    rows                                    50\\n    Columns                                  1\\n    header                      polarizability\\n    molecules rep.                         xyz\\n    Features                                 0\\n    Returns             1 dataframe and 1 dict\\n    =================   ======================\\n\\n    Returns\\n    -------\\n    molecules: list\\n        The list of molecule objects with xyz coordinates.\\n\\n    pol: pandas dataframe\\n        The polarizability of each molecule as a column of dataframe.\\n\\n    Examples\\n    --------\\n    >>> from chemml.datasets import load_xyz_polarizability\\n    >>> molecules, polarizabilities = load_xyz_polarizability()\\n    >>> print(len(molecules))\\n    50\\n    >>> print(polarizabilities.shape)\\n    (50, 1)\\n    ',\n    inputs: [],\n    outputs: [{\n      name: 'molecules',\n      docstring: 'The list of molecule objects with xyz coordinates.',\n      param_type: ['list'],\n      returned: true\n    }, {\n      name: 'pol',\n      docstring: 'The polarizability of each molecule as a column of dataframe.',\n      param_type: ['dataframe'],\n      returned: true\n    }]\n  }],\n  nodes: [],\n  library: 'chemml',\n  module: 'datasets'\n});\n\n/***/ }),\n\n/***/ 1060:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'chemml.wrapper.preprocessing',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [],\n  nodes: [{\n    name: 'SplitColumns',\n    docstring: '\\n    This method splits a data matrix by columns.',\n    inputs: [{\n      name: 'selection',\n      docstring: \"if positive integer, it's the number of columns to be selected from left side of dataframe and returns as first data frame (df1). if negative integer, it's the number of columns to be selected from right side of dataframe and returns as first data frame (df1).\",\n      param_type: ['int'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '1',\n      options: null\n    }],\n    outputs: [],\n    node_functions: [{\n      name: '__init__',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'fit',\n      display_name: 'split_columns',\n      docstring: '\\n        The main function to split the input dataframe.',\n      inputs: [{\n        name: 'X',\n        docstring: 'the input array',\n        param_type: ['array'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: [{\n        name: 'X1',\n        docstring: 'Left part of the split data matrix',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'X2',\n        docstring: 'Right part of the split data matrix',\n        param_type: ['array'],\n        returned: true\n      }]\n    }],\n    nodes: []\n  }, {\n    name: 'TrainTestSplit',\n    docstring: 'A module to split a data matrix into train and test (or validation) samples',\n    inputs: [{\n      name: 'test_fraction',\n      docstring: 'The fraction of samples to be selected for the test. If a value not in (0, 1.0) is provided we default to 0.25',\n      param_type: ['float'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: '0.25',\n      options: null\n    }],\n    outputs: [],\n    node_functions: [{\n      name: '__init__',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'split',\n      display_name: 'train_test_split',\n      docstring: 'The function to call for performing the split of the data matrix',\n      inputs: [{\n        name: 'X',\n        docstring: 'the input array',\n        param_type: ['array'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }],\n      outputs: [{\n        name: 'X1',\n        docstring: 'The training data matrix with ((1 - test_fraction) * n_samples) rows',\n        param_type: ['array'],\n        returned: true\n      }, {\n        name: 'X2',\n        docstring: 'The testing data matrix with (test_fraction * n_samples) rows',\n        param_type: ['array'],\n        returned: true\n      }]\n    }],\n    nodes: []\n  }],\n  library: 'chemml',\n  module: 'wrapper.preprocessing'\n});\n\n/***/ }),\n\n/***/ 1061:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'chemml.wrapper.preprocessing',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [],\n  nodes: [{\n    name: 'SaveCSV',\n    docstring: '\\n    Write pandas DataFrame to a comma-seprated-values(CSV) file.',\n    inputs: [{\n      name: 'file_path',\n      docstring: 'The path for the CSV file',\n      param_type: ['str'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'record_time',\n      docstring: 'If True, the current time will be added to the file name.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'False',\n      options: null\n    }, {\n      name: 'index',\n      docstring: 'If True, the index of the dataframe will be also stored as the first column.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'False',\n      options: null\n    }, {\n      name: 'header',\n      docstring: 'If True, the header of the dataframe will be stored.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'False',\n      options: null\n    }],\n    outputs: [],\n    node_functions: [{\n      name: '__init__',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'fit',\n      display_name: 'write',\n      docstring: '\\n        Write DataFrame to a comma-seprated-values CSV) file.',\n      inputs: [{\n        name: 'df',\n        docstring: 'The input pandas dataframe',\n        param_type: ['dataframe'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'main_directory',\n        docstring: 'if there is a main directory for entire chemml wrapper project',\n        param_type: ['str'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: '',\n        options: null\n      }],\n      outputs: []\n    }],\n    nodes: []\n  }, {\n    name: 'SaveFile',\n    docstring: '\\n    Write any input data to a file in string format.\\n    This is good for making text files and keeping track of intermediate data.',\n    inputs: [{\n      name: 'file_path',\n      docstring: 'The path for the CSV file',\n      param_type: ['str'],\n      expected_shape: null,\n      is_optional: false,\n      default_value: null,\n      options: null\n    }, {\n      name: 'record_time',\n      docstring: 'If True, the current time will be added to the file name.',\n      param_type: ['bool'],\n      expected_shape: null,\n      is_optional: true,\n      default_value: 'False',\n      options: null\n    }],\n    outputs: [],\n    node_functions: [{\n      name: '__init__',\n      docstring: 'None',\n      inputs: [],\n      outputs: []\n    }, {\n      name: 'fit',\n      display_name: 'write',\n      docstring: '\\n        This function Write an input data X to a file as a string.',\n      inputs: [{\n        name: 'df',\n        docstring: 'The input pandas dataframe',\n        param_type: ['dataframe'],\n        expected_shape: null,\n        is_optional: false,\n        default_value: null,\n        options: null\n      }, {\n        name: 'main_directory',\n        docstring: 'if there is a main directory for entire chemml wrapper project',\n        param_type: ['str'],\n        expected_shape: null,\n        is_optional: true,\n        default_value: '',\n        options: null\n      }],\n      outputs: []\n    }],\n    nodes: []\n  }],\n  library: 'chemml',\n  module: 'wrapper.preprocessing'\n});\n\n/***/ }),\n\n/***/ 1062:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar menu = {\n  Input: {\n    CSV: {\n      pandas: {\n        name: [],\n        functions: []\n      }\n    },\n    Chemical: {\n      chemml: {\n        name: [],\n        functions: []\n      }\n    }\n  },\n  Represent: {\n    'Dimensionality Reduction': {\n      sklearn: {\n        name: [],\n        functions: []\n      }\n    },\n    'Chemical': {\n      chemml: {\n        name: [],\n        functions: []\n      }\n    }\n  },\n  Prepare: {\n    'Preprocessing': {\n      sklearn: {\n        name: [],\n        functions: []\n      }\n    },\n    'Data Splitting': {\n      chemml: {\n        name: [],\n        functions: []\n      }\n    }\n  },\n  Model: {\n    'Linear': {\n      sklearn: {\n        name: [],\n        functions: []\n      }\n    },\n    'Neural Network': {\n      keras: {\n        name: [],\n        functions: []\n      }\n    },\n    'Support Vector Machines': {\n      sklearn: {\n        name: [],\n        functions: []\n      }\n    }\n  },\n  'Optimize': {\n    'Selection': {\n      'sklearn': {\n        name: [],\n        functions: []\n      }\n    },\n    'Metrics': {\n      'sklearn': {\n        name: [],\n        functions: []\n      }\n    }\n  },\n  Output: {\n    'Store Plot': {\n      chemml: {\n        name: [],\n        functions: []\n      }\n    },\n    'Store Data': {\n      chemml: {\n        name: [],\n        functions: []\n      }\n    }\n  }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (menu);\n\n/***/ }),\n\n/***/ 1081:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(304);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);\n\n\nfunction getEditNodeOnClickFunction(self) {\n  return function (event) {\n    var target = event.target || event.cyTarget;\n    var id = target.data().id;\n    var node = {\n      group: 'nodes',\n      data: self.cy.getElementById(id).data(),\n      position: self.cy.getElementById(id).position()\n    };\n    self.$store.commit('setSelectedNodeId', id);\n    self.$store.commit('setSelectedNodeElem', node);\n    self.$store.commit('showEditNode');\n  };\n}\n\nfunction getEditEdgeOnClickFunction(self) {\n  return function (event) {\n    var target = event.target || event.cyTarget;\n    var id = target.data().id;\n    var edge = {\n      group: 'edges',\n      data: self.cy.getElementById(id).data()\n    };\n    self.$store.commit('setSelectedEdge', edge);\n    self.$store.commit('showEditEdge');\n  };\n}\n\nfunction getRemoveNodeOnClickFunction(self) {\n  return function (event) {\n    var target = event.target || event.cyTarget;\n    var id = target.data().id;\n    self.cy.remove(self.cy.$id(id));\n  };\n}\n\nfunction getRemoveEdgeOnClickFunction(self) {\n  return function (event) {\n    var target = event.target || event.cyTarget;\n    var id = target.data().id;\n    self.cy.remove(self.cy.$id(id));\n  };\n}\n\nfunction getAddNodeOnClickFunction(self) {\n  return function (event) {\n    self.$store.commit('showAddNode');\n    var pos = event.position || event.cyPosition;\n    self.$store.commit('setCyClickPos', { x: pos.x, y: pos.y });\n  };\n}\n\nfunction getEdgeDropFunction(self) {\n  return function (sourceNode, targetNode, addedEles) {\n    console.log(addedEles.data());\n    if (addedEles) {\n      console.log('source node data', sourceNode.data().params);\n      console.log('target node data', targetNode.data().params);\n      var sFunc = sourceNode.data().params.op;\n      var tFunc = targetNode.data().params.inp;\n      console.log('sfunc', sFunc);\n      console.log('tfnc', tFunc);\n      var edge = {\n        group: 'edges',\n        data: addedEles.data()\n      };\n      edge.data.inputs = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.cloneDeep(sFunc);\n      edge.data.outputs = __WEBPACK_IMPORTED_MODULE_0_lodash___default.a.cloneDeep(tFunc);\n\n      self.$store.commit('setSelectedEdge', edge);\n      self.$store.commit('showEditEdge');\n    }\n  };\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  getEditNodeOnClickFunction: getEditNodeOnClickFunction,\n  getEditEdgeOnClickFunction: getEditEdgeOnClickFunction,\n  getRemoveNodeOnClickFunction: getRemoveNodeOnClickFunction,\n  getRemoveEdgeOnClickFunction: getRemoveEdgeOnClickFunction,\n  getAddNodeOnClickFunction: getAddNodeOnClickFunction,\n  getEdgeDropFunction: getEdgeDropFunction\n});\n\n/***/ }),\n\n/***/ 1082:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\nvar state = {\n  addNodeVisible: false,\n  editNodeVisible: false,\n  editEdgeVisible: false,\n  loadGraphVisible: false,\n  saveGraphVisible: false,\n  helpVisible: false,\n  updateGraphVisible: false,\n  wizardVisible: false\n};\n\nvar getters = {\n  addNodeVisible: function addNodeVisible(state) {\n    return state.addNodeVisible;\n  },\n  editNodeVisible: function editNodeVisible(state) {\n    return state.editNodeVisible;\n  },\n  editEdgeVisible: function editEdgeVisible(state) {\n    return state.editEdgeVisible;\n  },\n  loadGraphVisible: function loadGraphVisible(state) {\n    return state.loadGraphVisible;\n  },\n  saveGraphVisible: function saveGraphVisible(state) {\n    return state.saveGraphVisible;\n  },\n  updateGraphVisible: function updateGraphVisible(state) {\n    return state.updateGraphVisible;\n  },\n  wizardVisible: function wizardVisible(state) {\n    return state.wizardVisible;\n  },\n  helpVisible: function helpVisible(state) {\n    return state.helpVisible;\n  }\n};\n\nvar actions = {};\n\nvar mutations = {\n  showAddNode: function showAddNode(state) {\n    state.addNodeVisible = true;\n  },\n  showEditNode: function showEditNode(state) {\n    state.editNodeVisible = true;\n  },\n  showEditEdge: function showEditEdge(state) {\n    state.editEdgeVisible = true;\n  },\n  showSaveGraph: function showSaveGraph(state) {\n    state.saveGraphVisible = true;\n  },\n  showHelp: function showHelp(state) {\n    state.helpVisible = true;\n  },\n  hideHelp: function hideHelp(state) {\n    state.helpVisible = false;\n  },\n  showLoadGraph: function showLoadGraph(state) {\n    state.loadGraphVisible = true;\n  },\n  showUpdateGraph: function showUpdateGraph(state) {\n    state.updateGraphVisible = true;\n  },\n  showWizard: function showWizard(state) {\n    state.wizardVisible = true;\n  },\n  hideAddNode: function hideAddNode(state) {\n    state.addNodeVisible = false;\n  },\n  hideEditNode: function hideEditNode(state) {\n    state.editNodeVisible = false;\n  },\n  hideEditEdge: function hideEditEdge(state) {\n    state.editEdgeVisible = false;\n  },\n  hideSaveGraph: function hideSaveGraph(state) {\n    state.saveGraphVisible = false;\n  },\n  hideLoadGraph: function hideLoadGraph(state) {\n    state.loadGraphVisible = false;\n  },\n  hideUpdateGraph: function hideUpdateGraph(state) {\n    state.updateGraphVisible = false;\n  },\n  hideWizard: function hideWizard(state) {\n    state.wizardVisible = false;\n  }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n});\n\n/***/ }),\n\n/***/ 1083:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty__ = __webpack_require__(305);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__api_auth__ = __webpack_require__(306);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__api_session__ = __webpack_require__(220);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__types__ = __webpack_require__(307);\n\n\nvar _mutations;\n\n\n\n\n\nvar TOKEN_STORAGE_KEY = 'TOKEN_STORAGE_KEY';\n\nvar initialState = {\n  authenticating: false,\n  error: false,\n  token: null\n};\n\nvar getters = {\n  isAuthenticated: function isAuthenticated(state) {\n    return !!state.token;\n  },\n  loginFailed: function loginFailed(state) {\n    return state.error;\n  }\n};\n\nvar actions = {\n  login: function login(_ref, _ref2) {\n    var commit = _ref.commit;\n    var username = _ref2.username,\n        password = _ref2.password;\n\n    commit(__WEBPACK_IMPORTED_MODULE_3__types__[\"e\" /* LOGIN_BEGIN */]);\n    return __WEBPACK_IMPORTED_MODULE_1__api_auth__[\"a\" /* default */].login(username, password).then(function (_ref3) {\n      var data = _ref3.data;\n      return commit(__WEBPACK_IMPORTED_MODULE_3__types__[\"v\" /* SET_TOKEN */], data.key);\n    }).then(function () {\n      return commit(__WEBPACK_IMPORTED_MODULE_3__types__[\"g\" /* LOGIN_SUCCESS */]);\n    }).catch(function () {\n      return commit(__WEBPACK_IMPORTED_MODULE_3__types__[\"f\" /* LOGIN_FAILURE */]);\n    });\n  },\n  logout: function logout(_ref4) {\n    var commit = _ref4.commit;\n\n    return __WEBPACK_IMPORTED_MODULE_1__api_auth__[\"a\" /* default */].logout().then(function () {\n      return commit(__WEBPACK_IMPORTED_MODULE_3__types__[\"h\" /* LOGOUT */]);\n    }).finally(function () {\n      return commit(__WEBPACK_IMPORTED_MODULE_3__types__[\"u\" /* REMOVE_TOKEN */]);\n    });\n  },\n  initialize: function initialize(_ref5) {\n    var commit = _ref5.commit;\n\n    var token = localStorage.getItem(TOKEN_STORAGE_KEY);\n\n    if (token) {\n      commit(__WEBPACK_IMPORTED_MODULE_3__types__[\"v\" /* SET_TOKEN */], token);\n    } else {\n      commit(__WEBPACK_IMPORTED_MODULE_3__types__[\"u\" /* REMOVE_TOKEN */]);\n    }\n  }\n};\n\nvar mutations = (_mutations = {}, __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_3__types__[\"e\" /* LOGIN_BEGIN */], function (state) {\n  state.authenticating = true;\n  state.error = false;\n}), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_3__types__[\"f\" /* LOGIN_FAILURE */], function (state) {\n  state.authenticating = false;\n  state.error = true;\n}), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_3__types__[\"g\" /* LOGIN_SUCCESS */], function (state) {\n  state.authenticating = false;\n  state.error = false;\n}), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_3__types__[\"h\" /* LOGOUT */], function (state) {\n  state.authenticating = false;\n  state.error = false;\n}), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_3__types__[\"v\" /* SET_TOKEN */], function (state, token) {\n  localStorage.setItem(TOKEN_STORAGE_KEY, token);\n  __WEBPACK_IMPORTED_MODULE_2__api_session__[\"a\" /* default */].defaults.headers.Authorization = 'Token ' + token;\n  state.token = token;\n}), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_3__types__[\"u\" /* REMOVE_TOKEN */], function (state) {\n  localStorage.removeItem(TOKEN_STORAGE_KEY);\n  delete __WEBPACK_IMPORTED_MODULE_2__api_session__[\"a\" /* default */].defaults.headers.Authorization;\n  state.token = null;\n}), _mutations);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  namespaced: true,\n  state: initialState,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n});\n\n/***/ }),\n\n/***/ 1087:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty__ = __webpack_require__(305);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__api_auth__ = __webpack_require__(306);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__types__ = __webpack_require__(307);\n\n\nvar _mutations;\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  namespaced: true,\n  state: {\n    emailCompleted: false,\n    emailError: false,\n    emailLoading: false,\n    resetCompleted: false,\n    resetError: false,\n    resetLoading: false\n  },\n  actions: {\n    resetPassword: function resetPassword(_ref, _ref2) {\n      var commit = _ref.commit;\n      var uid = _ref2.uid,\n          token = _ref2.token,\n          password1 = _ref2.password1,\n          password2 = _ref2.password2;\n\n      commit(__WEBPACK_IMPORTED_MODULE_2__types__[\"m\" /* PASSWORD_RESET_BEGIN */]);\n      return __WEBPACK_IMPORTED_MODULE_1__api_auth__[\"a\" /* default */].resetAccountPassword(uid, token, password1, password2).then(function () {\n        return commit(__WEBPACK_IMPORTED_MODULE_2__types__[\"p\" /* PASSWORD_RESET_SUCCESS */]);\n      }).catch(function () {\n        return commit(__WEBPACK_IMPORTED_MODULE_2__types__[\"o\" /* PASSWORD_RESET_FAILURE */]);\n      });\n    },\n    sendPasswordResetEmail: function sendPasswordResetEmail(_ref3, _ref4) {\n      var commit = _ref3.commit;\n      var email = _ref4.email;\n\n      commit(__WEBPACK_IMPORTED_MODULE_2__types__[\"i\" /* PASSWORD_EMAIL_BEGIN */]);\n      return __WEBPACK_IMPORTED_MODULE_1__api_auth__[\"a\" /* default */].sendAccountPasswordResetEmail(email).then(function () {\n        return commit(__WEBPACK_IMPORTED_MODULE_2__types__[\"l\" /* PASSWORD_EMAIL_SUCCESS */]);\n      }).catch(function () {\n        return commit(__WEBPACK_IMPORTED_MODULE_2__types__[\"k\" /* PASSWORD_EMAIL_FAILURE */]);\n      });\n    },\n    clearResetStatus: function clearResetStatus(_ref5) {\n      var commit = _ref5.commit;\n\n      commit(__WEBPACK_IMPORTED_MODULE_2__types__[\"n\" /* PASSWORD_RESET_CLEAR */]);\n    },\n    clearEmailStatus: function clearEmailStatus(_ref6) {\n      var commit = _ref6.commit;\n\n      commit(__WEBPACK_IMPORTED_MODULE_2__types__[\"j\" /* PASSWORD_EMAIL_CLEAR */]);\n    }\n  },\n  mutations: (_mutations = {}, __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_2__types__[\"m\" /* PASSWORD_RESET_BEGIN */], function (state) {\n    state.resetLoading = true;\n  }), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_2__types__[\"n\" /* PASSWORD_RESET_CLEAR */], function (state) {\n    state.resetCompleted = false;\n    state.resetError = false;\n    state.resetLoading = false;\n  }), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_2__types__[\"o\" /* PASSWORD_RESET_FAILURE */], function (state) {\n    state.resetError = true;\n    state.resetLoading = false;\n  }), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_2__types__[\"p\" /* PASSWORD_RESET_SUCCESS */], function (state) {\n    state.resetCompleted = true;\n    state.resetError = false;\n    state.resetLoading = false;\n  }), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_2__types__[\"i\" /* PASSWORD_EMAIL_BEGIN */], function (state) {\n    state.emailLoading = true;\n  }), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_2__types__[\"j\" /* PASSWORD_EMAIL_CLEAR */], function (state) {\n    state.emailCompleted = false;\n    state.emailError = false;\n    state.emailLoading = false;\n  }), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_2__types__[\"k\" /* PASSWORD_EMAIL_FAILURE */], function (state) {\n    state.emailError = true;\n    state.emailLoading = false;\n  }), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_2__types__[\"l\" /* PASSWORD_EMAIL_SUCCESS */], function (state) {\n    state.emailCompleted = true;\n    state.emailError = false;\n    state.emailLoading = false;\n  }), _mutations)\n});\n\n/***/ }),\n\n/***/ 1088:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty__ = __webpack_require__(305);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__api_auth__ = __webpack_require__(306);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__types__ = __webpack_require__(307);\n\n\nvar _mutations;\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  namespaced: true,\n  state: {\n    activationCompleted: false,\n    activationError: false,\n    activationLoading: false,\n    registrationCompleted: false,\n    registrationError: false,\n    registrationLoading: false\n  },\n  actions: {\n    createAccount: function createAccount(_ref, _ref2) {\n      var commit = _ref.commit;\n      var username = _ref2.username,\n          password1 = _ref2.password1,\n          password2 = _ref2.password2,\n          email = _ref2.email;\n\n      commit(__WEBPACK_IMPORTED_MODULE_2__types__[\"q\" /* REGISTRATION_BEGIN */]);\n      return __WEBPACK_IMPORTED_MODULE_1__api_auth__[\"a\" /* default */].createAccount(username, password1, password2, email).then(function () {\n        return commit(__WEBPACK_IMPORTED_MODULE_2__types__[\"t\" /* REGISTRATION_SUCCESS */]);\n      }).catch(function () {\n        return commit(__WEBPACK_IMPORTED_MODULE_2__types__[\"s\" /* REGISTRATION_FAILURE */]);\n      });\n    },\n    activateAccount: function activateAccount(_ref3, _ref4) {\n      var commit = _ref3.commit;\n      var key = _ref4.key;\n\n      commit(__WEBPACK_IMPORTED_MODULE_2__types__[\"a\" /* ACTIVATION_BEGIN */]);\n      return __WEBPACK_IMPORTED_MODULE_1__api_auth__[\"a\" /* default */].verifyAccountEmail(key).then(function () {\n        return commit(__WEBPACK_IMPORTED_MODULE_2__types__[\"d\" /* ACTIVATION_SUCCESS */]);\n      }).catch(function () {\n        return commit(__WEBPACK_IMPORTED_MODULE_2__types__[\"c\" /* ACTIVATION_FAILURE */]);\n      });\n    },\n    clearRegistrationStatus: function clearRegistrationStatus(_ref5) {\n      var commit = _ref5.commit;\n\n      commit(__WEBPACK_IMPORTED_MODULE_2__types__[\"r\" /* REGISTRATION_CLEAR */]);\n    },\n    clearActivationStatus: function clearActivationStatus(_ref6) {\n      var commit = _ref6.commit;\n\n      commit(__WEBPACK_IMPORTED_MODULE_2__types__[\"b\" /* ACTIVATION_CLEAR */]);\n    }\n  },\n  mutations: (_mutations = {}, __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_2__types__[\"a\" /* ACTIVATION_BEGIN */], function (state) {\n    state.activationLoading = true;\n  }), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_2__types__[\"b\" /* ACTIVATION_CLEAR */], function (state) {\n    state.activationCompleted = false;\n    state.activationError = false;\n    state.activationLoading = false;\n  }), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_2__types__[\"c\" /* ACTIVATION_FAILURE */], function (state) {\n    state.activationError = true;\n    state.activationLoading = false;\n  }), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_2__types__[\"d\" /* ACTIVATION_SUCCESS */], function (state) {\n    state.activationCompleted = true;\n    state.activationError = false;\n    state.activationLoading = false;\n  }), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_2__types__[\"q\" /* REGISTRATION_BEGIN */], function (state) {\n    state.registrationLoading = true;\n  }), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_2__types__[\"r\" /* REGISTRATION_CLEAR */], function (state) {\n    state.registrationCompleted = false;\n    state.registrationError = false;\n    state.registrationLoading = false;\n  }), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_2__types__[\"s\" /* REGISTRATION_FAILURE */], function (state) {\n    state.registrationError = true;\n    state.registrationLoading = false;\n  }), __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_defineProperty___default()(_mutations, __WEBPACK_IMPORTED_MODULE_2__types__[\"t\" /* REGISTRATION_SUCCESS */], function (state) {\n    state.registrationCompleted = true;\n    state.registrationError = false;\n    state.registrationLoading = false;\n  }), _mutations)\n});\n\n/***/ }),\n\n/***/ 1089:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api_graph__ = __webpack_require__(1090);\n\n\nvar state = {\n  usergraphs: null,\n  rootgraphs: null,\n  error: false,\n  currentGraphId: '48',\n  currentGraphType: 'root',\n  currentGraphTitle: 'Boston House Prices',\n  graphruns: null\n};\n\nvar getters = {\n  usergraphs: function usergraphs(state) {\n    return state.usergraphs;\n  },\n  rootgraphs: function rootgraphs(state) {\n    return state.rootgraphs;\n  },\n  error: function error(state) {\n    return state.error;\n  },\n  currentGraphId: function currentGraphId(state) {\n    return state.currentGraphId;\n  },\n  currentGraphType: function currentGraphType(state) {\n    return state.currentGraphType;\n  },\n  currentGraphTitle: function currentGraphTitle(state) {\n    return state.currentGraphTitle;\n  },\n  graphruns: function graphruns(state) {\n    return state.graphruns;\n  }\n};\n\nvar actions = {\n  updateRootGraphs: function updateRootGraphs(_ref) {\n    var commit = _ref.commit;\n\n    return __WEBPACK_IMPORTED_MODULE_0__api_graph__[\"a\" /* default */].getRootGraphs().then(function (_ref2) {\n      var data = _ref2.data;\n      return commit('setRootGraphs', data);\n    }).then(function () {\n      return commit('apiSuccess');\n    }).catch(function () {\n      return commit('apiError');\n    });\n  },\n  updateUserGraphs: function updateUserGraphs(_ref3) {\n    var commit = _ref3.commit;\n\n    return __WEBPACK_IMPORTED_MODULE_0__api_graph__[\"a\" /* default */].getUserGraphs().then(function (_ref4) {\n      var data = _ref4.data;\n      return commit('setUserGraphs', data);\n    }).then(function () {\n      return commit('apiSuccess');\n    }).catch(function () {\n      return commit('apiError');\n    });\n  },\n  updateCurrentUserGraph: function updateCurrentUserGraph(_ref5, data) {\n    var commit = _ref5.commit;\n\n    return __WEBPACK_IMPORTED_MODULE_0__api_graph__[\"a\" /* default */].updateCurrentUserGraph(data.id, { 'title': state.currentGraphTitle, 'content': data.content }).then(function () {\n      return commit('apiSuccess');\n    }).catch(function () {\n      return commit('apiError');\n    });\n  },\n  saveCurrentUserGraph: function saveCurrentUserGraph(_ref6, data) {\n    var commit = _ref6.commit;\n\n    return __WEBPACK_IMPORTED_MODULE_0__api_graph__[\"a\" /* default */].saveCurrentUserGraph({ 'title': data.title, 'content': data.content }).then(function () {\n      return commit('apiSuccess');\n    }).catch(function () {\n      return commit('apiError');\n    });\n  },\n  setCurrentGraphId: function setCurrentGraphId(_ref7, graphId) {\n    var commit = _ref7.commit;\n\n    commit('setCurrentGraphId', graphId);\n  },\n  setCurrentGraphType: function setCurrentGraphType(_ref8, graphType) {\n    var commit = _ref8.commit;\n\n    commit('setCurrentGraphType', graphType);\n  },\n  setCurrentGraphTitle: function setCurrentGraphTitle(_ref9, graphTitle) {\n    var commit = _ref9.commit;\n\n    commit('setCurrentGraphTitle', graphTitle);\n  },\n  runCurrentGraph: function runCurrentGraph(_ref10) {\n    var commit = _ref10.commit;\n\n    return __WEBPACK_IMPORTED_MODULE_0__api_graph__[\"a\" /* default */].runGraph({ 'graph_id': state.currentGraphId }).then(function () {\n      return commit('apiSuccess');\n    }).catch(function () {\n      return commit('apiError');\n    });\n  },\n  setGraphRuns: function setGraphRuns(_ref11) {\n    var commit = _ref11.commit;\n\n    return __WEBPACK_IMPORTED_MODULE_0__api_graph__[\"a\" /* default */].getGraphRuns().then(function (_ref12) {\n      var data = _ref12.data;\n      return commit('setGraphRuns', data);\n    }).then(function () {\n      return commit('apiSuccess');\n    }).catch(function () {\n      return commit('apiError');\n    });\n  }\n};\n\nvar mutations = {\n  setRootGraphs: function setRootGraphs(state, data) {\n    state.rootgraphs = data;\n  },\n  setUserGraphs: function setUserGraphs(state, data) {\n    state.usergraphs = data;\n  },\n  apiError: function apiError(state) {\n    state.error = true;\n  },\n  apiSuccess: function apiSuccess(state) {\n    state.error = false;\n  },\n  setCurrentGraphId: function setCurrentGraphId(state, graphId) {\n    state.currentGraphId = graphId;\n  },\n  setCurrentGraphType: function setCurrentGraphType(state, graphType) {\n    state.currentGraphType = graphType;\n  },\n  setCurrentGraphTitle: function setCurrentGraphTitle(state, graphTitle) {\n    state.currentGraphTitle = graphTitle;\n  },\n  setGraphRuns: function setGraphRuns(state, data) {\n    var newData = [];\n    data.forEach(function (item) {\n      var row = {\n        'id': item.content,\n        'graph': item.graph.title,\n        'start_time': item.created,\n        'status': item.state,\n        'actions': \"<a id='\" + item.content + \"' href='api/downloadGraphRun?run=\" + item.content + \"' download>download</a>\"\n      };\n      row.status = item.state === 0 ? 'Created' : item.state === 1 ? 'Requested' : item.state === 2 ? 'Queued' : item.state === 3 ? 'Started' : item.state === 4 ? 'Error' : item.state === 5 ? 'Success' : item.state === 6 ? 'Error' : 'NA';\n      newData.push(row);\n    });\n    state.graphruns = newData;\n  }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n});\n\n/***/ }),\n\n/***/ 1090:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__session__ = __webpack_require__(220);\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  getUserGraphs: function getUserGraphs() {\n    return __WEBPACK_IMPORTED_MODULE_0__session__[\"a\" /* default */].get('https://madeatub.buffalo.edu/mltoolkit/api/usergraphs/');\n  },\n  getRootGraphs: function getRootGraphs() {\n    return __WEBPACK_IMPORTED_MODULE_0__session__[\"a\" /* default */].get('https://madeatub.buffalo.edu/mltoolkit/api/rootgraphs/');\n  },\n  updateCurrentUserGraph: function updateCurrentUserGraph(graphId, payload) {\n    return __WEBPACK_IMPORTED_MODULE_0__session__[\"a\" /* default */].put('https://madeatub.buffalo.edu/mltoolkit/api/graphs/' + graphId + '/', payload);\n  },\n  saveCurrentUserGraph: function saveCurrentUserGraph(data) {\n    return __WEBPACK_IMPORTED_MODULE_0__session__[\"a\" /* default */].post('https://madeatub.buffalo.edu/mltoolkit/api/graphs/', data);\n  },\n  runGraph: function runGraph(data) {\n    return __WEBPACK_IMPORTED_MODULE_0__session__[\"a\" /* default */].post('https://madeatub.buffalo.edu/mltoolkit/api/rungraph/', data);\n  },\n  getGraphRuns: function getGraphRuns() {\n    return __WEBPACK_IMPORTED_MODULE_0__session__[\"a\" /* default */].get('https://madeatub.buffalo.edu/mltoolkit/api/graphruns/');\n  }\n});\n\n/***/ }),\n\n/***/ 1091:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Full_vue__ = __webpack_require__(513);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4fd2d3e0_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Full_vue__ = __webpack_require__(1133);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Full_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4fd2d3e0_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Full_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_4fd2d3e0_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Full_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1092:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  items: [{\n    name: 'Home',\n    url: '/landing',\n    icon: 'icon-drawer'\n  }, {\n    name: 'Dashboard',\n    url: '/dashboard',\n    icon: 'icon-speedometer'\n  }, {\n    name: 'Results',\n    url: '/results',\n    icon: 'icon-direction'\n  }, {\n    name: 'Visualizations',\n    url: '/visual',\n    icon: 'icon-pie-chart'\n  }]\n});\n\n/***/ }),\n\n/***/ 1093:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Aside_vue__ = __webpack_require__(1094);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Breadcrumb_vue__ = __webpack_require__(1096);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Callout_vue__ = __webpack_require__(1098);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Footer_vue__ = __webpack_require__(1100);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Header_Header_vue__ = __webpack_require__(1102);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Sidebar_Sidebar_vue__ = __webpack_require__(1106);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Switch_vue__ = __webpack_require__(1131);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return __WEBPACK_IMPORTED_MODULE_0__Aside_vue__[\"a\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return __WEBPACK_IMPORTED_MODULE_1__Breadcrumb_vue__[\"a\"]; });\n/* unused harmony reexport Callout */\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return __WEBPACK_IMPORTED_MODULE_3__Footer_vue__[\"a\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return __WEBPACK_IMPORTED_MODULE_4__Header_Header_vue__[\"a\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return __WEBPACK_IMPORTED_MODULE_5__Sidebar_Sidebar_vue__[\"a\"]; });\n/* unused harmony reexport Switch */\n\n\n\n\n\n\n\n\n\n\n/***/ }),\n\n/***/ 1094:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Aside_vue__ = __webpack_require__(514);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_441e579c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Aside_vue__ = __webpack_require__(1095);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Aside_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_441e579c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Aside_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_441e579c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Aside_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1095:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('aside',{staticClass:\"aside-menu\"})}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1096:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Breadcrumb_vue__ = __webpack_require__(515);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_9c62087c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Breadcrumb_vue__ = __webpack_require__(1097);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Breadcrumb_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_9c62087c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Breadcrumb_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_9c62087c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Breadcrumb_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1097:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ol',{staticClass:\"breadcrumb\"},_vm._l((_vm.list),function(item,index){return _c('li',{staticClass:\"breadcrumb-item\"},[(_vm.isLast(index))?_c('span',{staticClass:\"active\"},[_vm._v(_vm._s(_vm.showName(item)))]):_c('router-link',{attrs:{\"to\":item}},[_vm._v(_vm._s(_vm.showName(item)))])],1)}))}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1098:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Callout_vue__ = __webpack_require__(516);\n/* unused harmony reexport namespace */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_46ade4be_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Callout_vue__ = __webpack_require__(1099);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Callout_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_46ade4be_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Callout_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_46ade4be_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Callout_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* unused harmony default export */ var _unused_webpack_default_export = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1099:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:_vm.classList},[_vm._t(\"default\")],2)}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1100:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Footer_vue__ = __webpack_require__(517);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6db2f18b_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Footer_vue__ = __webpack_require__(1101);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Footer_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6db2f18b_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Footer_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6db2f18b_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Footer_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1101:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('footer',{staticClass:\"app-footer\"})}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1102:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Header_vue__ = __webpack_require__(518);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_54f5a076_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Header_vue__ = __webpack_require__(1105);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Header_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_54f5a076_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Header_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_54f5a076_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Header_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1103:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_HeaderDropdown_vue__ = __webpack_require__(519);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_39a26b66_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_HeaderDropdown_vue__ = __webpack_require__(1104);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_HeaderDropdown_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_39a26b66_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_HeaderDropdown_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_39a26b66_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_HeaderDropdown_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1104:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-nav-item-dropdown',{attrs:{\"right\":\"\",\"no-caret\":\"\"}},[_c('template',{slot:\"button-content\"},[_c('i',{staticClass:\"fa fa-user-circle fa-lg\"})]),_vm._v(\" \"),_c('b-dropdown-item',[_c('i',{staticClass:\"fa fa-lock\"}),_vm._v(\" \"),_c('router-link',{attrs:{\"to\":\"/logout\"}},[_vm._v(\"logout\")])],1)],2)}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1105:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('header',{staticClass:\"app-header navbar\"},[_c('button',{staticClass:\"navbar-toggler mobile-sidebar-toggler d-lg-none\",attrs:{\"type\":\"button\"},on:{\"click\":_vm.mobileSidebarToggle}},[_c('span',{staticClass:\"navbar-toggler-icon\"})]),_vm._v(\" \"),_c('b-link',{staticClass:\"navbar-brand\",attrs:{\"to\":\"#\"}}),_vm._v(\" \"),_c('button',{staticClass:\"navbar-toggler sidebar-toggler d-md-down-none mr-auto\",attrs:{\"type\":\"button\"},on:{\"click\":_vm.sidebarToggle}},[_c('span',{staticClass:\"navbar-toggler-icon\"})]),_vm._v(\" \"),_c('b-navbar-nav',{staticClass:\"ml-auto\"},[_c('HeaderDropdown')],1)],1)}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1106:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Sidebar_vue__ = __webpack_require__(520);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1b899e65_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Sidebar_vue__ = __webpack_require__(1130);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\nfunction injectStyle (context) {\n  __webpack_require__(1107)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Sidebar_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1b899e65_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Sidebar_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1b899e65_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Sidebar_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1107:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 1108:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarFooter_vue__ = __webpack_require__(521);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_419727a5_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarFooter_vue__ = __webpack_require__(1109);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarFooter_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_419727a5_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarFooter_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_419727a5_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarFooter_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1109:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\"div\")}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1110:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarForm_vue__ = __webpack_require__(522);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6bed3424_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarForm_vue__ = __webpack_require__(1111);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarForm_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6bed3424_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarForm_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6bed3424_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarForm_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1111:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\"div\")}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1112:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarHeader_vue__ = __webpack_require__(523);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_a0777a52_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarHeader_vue__ = __webpack_require__(1113);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarHeader_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_a0777a52_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarHeader_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_a0777a52_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarHeader_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1113:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\"div\")}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1114:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarMinimizer_vue__ = __webpack_require__(524);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_a5c6b7ae_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarMinimizer_vue__ = __webpack_require__(1115);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarMinimizer_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_a5c6b7ae_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarMinimizer_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_a5c6b7ae_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarMinimizer_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1115:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('button',{staticClass:\"sidebar-minimizer\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){_vm.sidebarMinimize();_vm.brandMinimize()}}})}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1116:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavDivider_vue__ = __webpack_require__(525);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6d1c2ccd_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavDivider_vue__ = __webpack_require__(1121);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavDivider_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6d1c2ccd_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavDivider_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6d1c2ccd_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavDivider_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1121:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',{class:_vm.classList})}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1122:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavDropdown_vue__ = __webpack_require__(526);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_536afe98_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavDropdown_vue__ = __webpack_require__(1123);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavDropdown_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_536afe98_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavDropdown_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_536afe98_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavDropdown_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1123:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('router-link',{staticClass:\"nav-item nav-dropdown\",attrs:{\"tag\":\"li\",\"to\":_vm.url,\"disabled\":\"\"}},[_c('div',{staticClass:\"nav-link nav-dropdown-toggle\",on:{\"click\":_vm.handleClick}},[_c('i',{class:_vm.icon}),_vm._v(\" \"+_vm._s(_vm.name))]),_vm._v(\" \"),_c('ul',{staticClass:\"nav-dropdown-items\"},[_vm._t(\"default\")],2)])}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1124:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.isExternalLink)?_c('div',[_c('a',{class:_vm.classList,attrs:{\"href\":_vm.url}},[_c('i',{class:_vm.icon}),_vm._v(\" \"+_vm._s(_vm.name)+\"\\n    \"),(_vm.badge && _vm.badge.text)?_c('b-badge',{attrs:{\"variant\":_vm.badge.variant}},[_vm._v(_vm._s(_vm.badge.text))]):_vm._e()],1)]):_c('div',[_c('router-link',{class:_vm.classList,attrs:{\"to\":_vm.url}},[_c('i',{class:_vm.icon}),_vm._v(\" \"+_vm._s(_vm.name)+\"\\n    \"),(_vm.badge && _vm.badge.text)?_c('b-badge',{attrs:{\"variant\":_vm.badge.variant}},[_vm._v(_vm._s(_vm.badge.text))]):_vm._e()],1)],1)}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1125:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavTitle_vue__ = __webpack_require__(529);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5f92ee61_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavTitle_vue__ = __webpack_require__(1126);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavTitle_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5f92ee61_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavTitle_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5f92ee61_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavTitle_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1126:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',{class:_vm.classList},[(_vm.wrapper && _vm.wrapper.element)?[_c(_vm.wrapper.element,_vm._b({tag:\"component\"},'component',_vm.wrapper.attributes,false),[_vm._v(\"\\n      \"+_vm._s(_vm.name)+\"\\n    \")])]:[_vm._v(\"\\n    \"+_vm._s(_vm.name)+\"\\n  \")]],2)}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1127:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',{class:_vm.classList,on:{\"click\":_vm.hideMobile}},[_vm._t(\"default\")],2)}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1128:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavLabel_vue__ = __webpack_require__(532);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_52cff4be_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavLabel_vue__ = __webpack_require__(1129);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavLabel_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_52cff4be_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavLabel_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_52cff4be_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavLabel_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1129:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('SidebarNavItem',{attrs:{\"classes\":_vm.classList.navItem}},[_c('a',{class:_vm.classList.navLink,attrs:{\"href\":_vm.url}},[_c('i',{class:_vm.classList.icon}),_vm._v(\" \"+_vm._s(_vm.name))])])}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1130:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"sidebar\"},[_c('SidebarHeader'),_vm._v(\" \"),_c('SidebarForm'),_vm._v(\" \"),_c('nav',{staticClass:\"sidebar-nav\"},[_c('div',{attrs:{\"slot\":\"header\"},slot:\"header\"}),_vm._v(\" \"),_c('ul',{staticClass:\"nav\"},[_vm._l((_vm.navItems),function(item,index){return [(item.title)?[_c('SidebarNavTitle',{attrs:{\"name\":item.name,\"classes\":item.class,\"wrapper\":item.wrapper}})]:(item.divider)?[_c('SidebarNavDivider',{attrs:{\"classes\":item.class}})]:(item.label)?[_c('SidebarNavLabel',{attrs:{\"name\":item.name,\"url\":item.url,\"icon\":item.icon,\"label\":item.label,\"classes\":item.class}})]:[(item.children)?[_c('SidebarNavDropdown',{attrs:{\"name\":item.name,\"url\":item.url,\"icon\":item.icon}},[_vm._l((item.children),function(childL1,index){return [(childL1.children)?[_c('SidebarNavDropdown',{attrs:{\"name\":childL1.name,\"url\":childL1.url,\"icon\":childL1.icon}},_vm._l((childL1.children),function(childL2,index){return _c('li',{staticClass:\"nav-item\"},[_c('SidebarNavLink',{attrs:{\"name\":childL2.name,\"url\":childL2.url,\"icon\":childL2.icon,\"badge\":childL2.badge,\"variant\":item.variant}})],1)}))]:[_c('SidebarNavItem',{attrs:{\"classes\":item.class}},[_c('SidebarNavLink',{attrs:{\"name\":childL1.name,\"url\":childL1.url,\"icon\":childL1.icon,\"badge\":childL1.badge,\"variant\":item.variant}})],1)]]})],2)]:[_c('SidebarNavItem',{attrs:{\"classes\":item.class}},[_c('SidebarNavLink',{attrs:{\"name\":item.name,\"url\":item.url,\"icon\":item.icon,\"badge\":item.badge,\"variant\":item.variant}})],1)]]]})],2),_vm._v(\" \"),_vm._t(\"default\")],2),_vm._v(\" \"),_c('SidebarFooter'),_vm._v(\" \"),_c('SidebarMinimizer')],1)}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1131:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Switch_vue__ = __webpack_require__(533);\n/* unused harmony reexport namespace */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_39197026_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Switch_vue__ = __webpack_require__(1132);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Switch_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_39197026_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Switch_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_39197026_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Switch_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* unused harmony default export */ var _unused_webpack_default_export = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1132:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',{class:_vm.classList},[_c('input',{staticClass:\"switch-input\",attrs:{\"type\":\"checkbox\"},domProps:{\"value\":_vm.value,\"checked\":_vm.isChecked},on:{\"change\":_vm.handleChange}}),_vm._v(\" \"),(_vm.isOn)?[_c('span',{staticClass:\"switch-label\",attrs:{\"data-on\":_vm.on,\"data-off\":_vm.off}})]:[_c('span',{staticClass:\"switch-label\"})],_vm._v(\" \"),_c('span',{staticClass:\"switch-handle\"})],2)}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1133:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"app\"},[_c('AppHeader'),_vm._v(\" \"),_c('div',{staticClass:\"app-body\"},[_c('Sidebar',{attrs:{\"navItems\":_vm.nav}}),_vm._v(\" \"),_c('main',{staticClass:\"main\"},[_c('breadcrumb',{attrs:{\"list\":_vm.list}}),_vm._v(\" \"),_c('div',{staticClass:\"container-fluid\"},[_c('router-view')],1)],1),_vm._v(\" \"),_c('AppAside')],1),_vm._v(\" \"),_c('AppFooter')],1)}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1134:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__node_modules_vue_loader_lib_template_compiler_index_id_data_v_38d7b71b_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Landing_vue__ = __webpack_require__(1135);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\nvar __vue_script__ = null\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __vue_script__,\n  __WEBPACK_IMPORTED_MODULE_0__node_modules_vue_loader_lib_template_compiler_index_id_data_v_38d7b71b_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Landing_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_0__node_modules_vue_loader_lib_template_compiler_index_id_data_v_38d7b71b_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Landing_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1135:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"animated fadeIn\"},[_c('b-row',[_c('b-col',{attrs:{\"lg\":\"12\"}},[_c('h1',[_vm._v(\"MaDE@UB Machine Learning Toolkit\")]),_vm._v(\" \"),_c('h3',[_vm._v(\"A toolkit to train and test statistical models from user defined data flows with a focus on data and methods from chemical and materials sciences.\")]),_vm._v(\" \"),_c('b-row',[_c('b-col',{attrs:{\"sm\":\"4\"}},[_c('b-img',{attrs:{\"height\":\"250\",\"src\":\"https://madeatub.buffalo.edu/mltk/static/img/banner.png\",\"rounded\":\"\",\"alt\":\"Banner\"}})],1)],1),_vm._v(\" \"),_c('p',[_vm._v(\"Welcome! Our ML Toolkit provides an online web application for desigining Machine Learning (ML) models without needing to have in-depth knowledge of programming.\")]),_vm._v(\" \"),_c('p',[_vm._v(\"The app just needs a user to provide input data and define data processing operations via nodes and edges on a graph. Each node corresponds to a module that takes in data as input, performs an operation and emits processed data as output. Connections between modules (edges) enable transfer of data.\")]),_vm._v(\" \"),_c('p',[_vm._v(\"Modules are taken from popular third-party machine learning packages such as \"),_c('a',{attrs:{\"href\":\"https://scikit-learn.org/stable/\"}},[_vm._v(\"scikit-learn\")]),_vm._v(\", \"),_c('a',{attrs:{\"href\":\"https://keras.io/\"}},[_vm._v(\"keras\")]),_vm._v(\" and \"),_c('a',{attrs:{\"href\":\"https://www.tensorflow.org/\"}},[_vm._v(\"tensorflow\")]),_vm._v(\". Modules for organic/inorganic data come from RDKit, Dragon and Magpie. We use \"),_c('a',{attrs:{\"href\":\"https://github.com/hachmannlab/chemml\"}},[_vm._v(\"ChemML\")]),_vm._v(\" in the background to handle running the ML tasks.\")]),_vm._v(\" \"),_c('p',[_vm._v(\"After completing a graph, the user can hit \\\"run\\\" and sit back while the results are computed. We provide resources to handle multiple experiments, so you can choose and compare from different ML models with a few clicks and see what works best for your data!\")]),_vm._v(\" \"),_c('p',[_vm._v(\"To get started:\")]),_vm._v(\" \"),_c('ol',[_c('li',[_vm._v(\"Go to \"),_c('a',{attrs:{\"href\":\"https://madeatub.buffalo.edu/mltoolkit/#/dashboard\"}},[_vm._v(\"Dashboard\")]),_vm._v(\" by clicking the link on the left pane.\")]),_vm._v(\" \"),_c('li',[_vm._v(\"We recommend starting from a pre-defined template where common data-flow operations have been set up, for example, splitting a training set into train and test, preprocessing by standard scaling. You can access the list of available templates using the button on the top right of your dashboard.\")]),_vm._v(\" \"),_c('li',[_vm._v(\"Make changes to the templates to suit your data. You can right click on any node to alter its properties. If you wish to use a new module right click on an empty part of the canvas to choose a node. Drawing an edge between nodes connects them and enables data transfer between the two modules - the edge UI wizard will help you transfer the data matrices in the right way.\")]),_vm._v(\" \"),_c('li',[_vm._v(\"Advanced users can also start from a blank canvas, create custom data flow graphs and save it for future use!\")]),_vm._v(\" \"),_c('li',[_vm._v(\"After creating a graph and setting up all node properties click on red button to run graph (top right of the dashboard). Multiple graphs can be run asynchronously in the background. Look in the \"),_c('a',{attrs:{\"href\":\"https://madeatub.buffalo.edu/mltoolkit/#/results\"}},[_vm._v(\"Results\")]),_vm._v(\" page (see left pane) to download any output files, plots or intermediate data.\")])]),_vm._v(\" \"),_c('p')],1)],1)],1)}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1136:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Dashboard_vue__ = __webpack_require__(534);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_03879230_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Dashboard_vue__ = __webpack_require__(1224);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Dashboard_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_03879230_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Dashboard_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_03879230_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Dashboard_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1142:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_CytoscapeGraph_vue__ = __webpack_require__(536);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_15ab8855_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_CytoscapeGraph_vue__ = __webpack_require__(1191);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\nfunction injectStyle (context) {\n  __webpack_require__(1143)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_CytoscapeGraph_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_15ab8855_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_CytoscapeGraph_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_15ab8855_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_CytoscapeGraph_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1143:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 1191:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"cy\"}})}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1192:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_index_vue__ = __webpack_require__(543);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_243b6ee4_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_index_vue__ = __webpack_require__(1223);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_index_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_243b6ee4_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_index_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_243b6ee4_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_index_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1193:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_AddNode_vue__ = __webpack_require__(544);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6768a484_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_AddNode_vue__ = __webpack_require__(1196);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\nfunction injectStyle (context) {\n  __webpack_require__(1194)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-6768a484\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_AddNode_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6768a484_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_AddNode_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6768a484_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_AddNode_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1194:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 1195:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nfunction s4() {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n}\n\nfunction guid() {\n  return this.s4() + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + this.s4() + this.s4();\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  s4: s4,\n  guid: guid\n});\n\n/***/ }),\n\n/***/ 1196:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-modal',{attrs:{\"title\":\"Add Node\",\"hide-header-close\":\"\"},on:{\"ok\":function($event){_vm.handleOk()},\"cancel\":function($event){_vm.hide()}},model:{value:(_vm.myModal),callback:function ($$v) {_vm.myModal=$$v},expression:\"myModal\"}},[_c('div',[_vm._l((_vm.libHierarchy),function(stage,key1){return [_c('b-form-group',{attrs:{\"label\":key1,\"label-for\":\"radios\",\"label-cols\":3,\"horizontal\":true}},[_c('b-form-radio-group',{attrs:{\"id\":\"radios\",\"name\":\"radiosInline\"}},_vm._l((stage),function(element,key2){return _c('div',{staticClass:\"custom-control custom-radio custom-control-inline\"},[_vm._v(\"\\n            \"+_vm._s(stage[\"name\"])+\"\\n            \"),_c('input',{staticClass:\"custom-control-input\",attrs:{\"type\":\"radio\",\"id\":key2,\"name\":\"radiosInline\",\"key1\":key1,\"key2\":key2},domProps:{\"value\":JSON.stringify(element)}}),_vm._v(\" \"),_c('label',{staticClass:\"custom-control-label\",attrs:{\"for\":\"radiosInline\"}},[_vm._v(_vm._s(key2))])])}))],1)]})],2)])}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1197:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_EditNode_vue__ = __webpack_require__(545);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_41b23607_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_EditNode_vue__ = __webpack_require__(1199);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\nfunction injectStyle (context) {\n  __webpack_require__(1198)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-41b23607\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_EditNode_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_41b23607_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_EditNode_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_41b23607_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_EditNode_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1198:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 1199:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-modal',{attrs:{\"title\":\"Edit Node\"},on:{\"ok\":_vm.handleOk,\"cancel\":_vm.handleCancel},model:{value:(_vm.myModal),callback:function ($$v) {_vm.myModal=$$v},expression:\"myModal\"}},[(_vm.selectedNode.hasOwnProperty('elem'))?_c('div',[_c('strong',[_vm._v(\"Node Type\")]),_vm._v(\" \"),_vm._l((_vm.selectedNode.elem.data.info),function(lib,key1){return [_c('b-form-group',{attrs:{\"label\":key1,\"label-for\":\"radios\",\"label-cols\":3,\"horizontal\":true}},[_c('b-form-radio-group',{attrs:{\"id\":\"radios\",\"name\":\"funcRadios\"}},_vm._l((lib.name),function(func){return _c('div',{staticClass:\"custom-control custom-radio custom-control-inline\"},[_c('input',{staticClass:\"custom-control-input\",attrs:{\"type\":\"radio\",\"id\":func,\"name\":\"funcRadios\"},domProps:{\"value\":func},on:{\"click\":function($event){_vm.handleFuncChange(key1,func, lib.functions[lib.name.indexOf(func)])}}}),_vm._v(\" \"),_c('label',{staticClass:\"custom-control-label\",attrs:{\"for\":\"radiosInline\"}},[_vm._v(_vm._s(func))])])}))],1)]}),_vm._v(\" \"),(_vm.meths !==undefined)?_c('strong',[_vm._v(\"Select Class Method\")]):_vm._e(),_vm._v(\" \"),_vm._l((_vm.meths),function(param){return [_c('b-form-radio-group',{attrs:{\"id\":\"radiosmeths\",\"name\":\"methRadios\"}},[_c('input',{attrs:{\"type\":\"radio\",\"id\":param,\"name\":\"methRadios\"},domProps:{\"value\":param},on:{\"click\":function($event){_vm.handleMethChange(param)}}}),_vm._v(\" \"),_c('label',{staticClass:\"custom-control-label\",attrs:{\"for\":\"radiosInline\"}},[_vm._v(_vm._s(param))])])]}),_vm._v(\" \"),_c('br'),_vm._v(\" \"),(_vm.fparams.length>0)?_c('div',[_c('button',{staticClass:\"btn btn-success\",on:{\"click\":function($event){_vm.isHidden = !_vm.isHidden}}},[_vm._v(\"Click to Set Base Parameter Values\")]),_vm._v(\" \"),_c('b-button',{staticClass:\"btn btn-outline-info\",on:{\"click\":function($event){_vm.isHidden2 = !_vm.isHidden2}}},[_c('i',{staticClass:\"fa fa-question\"})])],1):_vm._e(),_vm._v(\" \"),_vm._l((_vm.fparams),function(param){return (!_vm.isHidden)?[_c('b-form-group',[_c('dl',{staticClass:\"row\"},[_c('dt',{staticClass:\"col-sm-4 \"},[(!param.is_optional)?_c('div',{staticClass:\"form-group required\"},[_c('label',{staticClass:\"control-label\",attrs:{\"for\":param.name}},[_vm._v(_vm._s(param.name))])]):_c('div',[_c('label',{attrs:{\"for\":param.name}},[_vm._v(_vm._s(param.name))])])]),_vm._v(\" \"),_c('dd',{staticClass:\"col-sm-7\"},[(!_vm.isHidden2)?_c('div',{staticClass:\"alert alert-light\"},[_vm._v(\"\\n                  \"+_vm._s(param.desc)+\"\\n                \")]):_vm._e()]),_vm._v(\" \"),_c('dd',{staticClass:\"col-sm-12\"},[(param.name === 'filepath_or_buffer')?_c('b-form-file',{attrs:{\"id\":param.name,\"placeholder\":\"Enter Value\"},model:{value:(param.value),callback:function ($$v) {_vm.$set(param, \"value\", $$v)},expression:\"param.value\"}}):_c('b-form-input',{attrs:{\"type\":\"text\",\"id\":param.name,\"placeholder\":\"Enter Value\"},model:{value:(param.value),callback:function ($$v) {_vm.$set(param, \"value\", $$v)},expression:\"param.value\"}})],1)])])]:_vm._e()})],2):_vm._e()])}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1200:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_EditEdge_vue__ = __webpack_require__(546);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_ae382620_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_EditEdge_vue__ = __webpack_require__(1201);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_EditEdge_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_ae382620_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_EditEdge_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_ae382620_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_EditEdge_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1201:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-modal',{attrs:{\"title\":\"Edit Edge\",\"hide-header-close\":\"\"},on:{\"ok\":function($event){_vm.handleOk()},\"cancel\":function($event){_vm.hide()}},model:{value:(_vm.myModal),callback:function ($$v) {_vm.myModal=$$v},expression:\"myModal\"}},[(_vm.inputs.length>0)?_c('strong',[_vm._v(\"Source Node Outputs\")]):_vm._e(),_vm._v(\" \"),_vm._l((_vm.inputs),function(input){return [_c('b-form-group',[_c('label',{attrs:{\"for\":input.name}},[_vm._v(_vm._s(input.name))]),_vm._v(\" \"),(!_vm.isHidden2)?_c('div',{staticClass:\"alert alert-light\"},[_vm._v(\"\\n                  \"+_vm._s(input.docstring)+\"\\n                \")]):_vm._e(),_vm._v(\" \"),_c('b-form-checkbox',{attrs:{\"type\":\"\",\"id\":input.name,\"placeholder\":\"Enter Value\",\"value\":\"true\",\"unchecked-value\":\"false\"},model:{value:(input.value),callback:function ($$v) {_vm.$set(input, \"value\", $$v)},expression:\"input.value\"}})],1)]}),_vm._v(\" \"),_c('br'),_vm._v(\" \"),(_vm.outputs.length>0)?_c('strong',[_vm._v(\"Target Node Inputs\")]):_vm._e(),_c('b-button',{staticClass:\"btn-xs btn-outline-info\",on:{\"click\":function($event){_vm.isHidden2 = !_vm.isHidden2}}},[_c('i',{staticClass:\"fa fa-question\"})]),_vm._v(\" \"),_c('br'),_vm._v(\" \"),(_vm.outputs.length>0)?_c('small',[_vm._v(\" Select unique values for each from dropdown output of previous node\")]):_vm._e(),_vm._v(\" \"),_vm._l((_vm.outputs),function(output){return [_c('b-form-group',[_c('label',{attrs:{\"for\":output.name}},[_vm._v(_vm._s(output.name))]),_vm._v(\" \"),(!_vm.isHidden2)?_c('div',{staticClass:\"alert alert-light\"},[_vm._v(\"\\n                  \"+_vm._s(output.docstring)+\"\\n                \")]):_vm._e(),_vm._v(\" \"),_c('b-form-select',{attrs:{\"id\":output.name},model:{value:(output.value),callback:function ($$v) {_vm.$set(output, \"value\", $$v)},expression:\"output.value\"}},_vm._l((_vm.inputs),function(input){return _c('option',{domProps:{\"value\":input.name}},[_vm._v(\"\\n          \"+_vm._s(input.name)+\"\\n        \")])}))],1)]})],2)}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1202:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_LoadGraph_vue__ = __webpack_require__(547);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_dd0c9334_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_LoadGraph_vue__ = __webpack_require__(1204);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\nfunction injectStyle (context) {\n  __webpack_require__(1203)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-dd0c9334\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_LoadGraph_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_dd0c9334_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_LoadGraph_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_dd0c9334_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_LoadGraph_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1203:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 1204:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-modal',{attrs:{\"title\":\"Load Graph\",\"size\":\"lg\",\"hide-header-close\":\"\"},on:{\"ok\":function($event){_vm.handleOk()},\"cancel\":function($event){_vm.hide()}},model:{value:(_vm.myModal),callback:function ($$v) {_vm.myModal=$$v},expression:\"myModal\"}},[_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-sm-2\",staticStyle:{\"border-right\":\"1px solid #a4b7c1\"}},[_c('b-list-group',[_c('b-list-group-item',{staticClass:\"sections btn-secondary btn-sm active\",attrs:{\"id\":\"root\",\"href\":\"#\",\"view\":\"rootgraphs\"},on:{\"click\":function($event){_vm.openView('rootgraphs')}}},[_vm._v(\"Templates\")]),_vm._v(\" \"),_c('b-list-group-item',{staticClass:\"sections btn-secondary btn-sm\",attrs:{\"id\":\"user\",\"href\":\"#\",\"view\":\"usergraphs\"},on:{\"click\":function($event){_vm.openView('usergraphs')}}},[_vm._v(\"Saved\")])],1)],1),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-10 graphviews\",attrs:{\"id\":\"rootgraphs\"}},[_c('div',{staticClass:\"col-sm-6\"},[_c('select',{staticClass:\"form-control\",attrs:{\"name\":\"user\",\"size\":\"8\"}},[_vm._l((_vm.rootgraphs),function(graph){return [_c('option',{domProps:{\"value\":graph.graph_id}},[_vm._v(_vm._s(graph.title))])]})],2)])]),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-10 graphviews hiddenView\",attrs:{\"id\":\"usergraphs\"}},[_c('div',{staticClass:\"col-sm-6\"},[_c('select',{staticClass:\"form-control\",attrs:{\"name\":\"user\",\"size\":\"8\"}},[_vm._l((_vm.usergraphs),function(graph){return [_c('option',{domProps:{\"value\":graph.graph_id}},[_vm._v(_vm._s(graph.title))])]})],2)])])])])}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1205:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SaveGraph_vue__ = __webpack_require__(548);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_7ab72377_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SaveGraph_vue__ = __webpack_require__(1208);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\nfunction injectStyle (context) {\n  __webpack_require__(1206)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-7ab72377\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SaveGraph_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_7ab72377_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SaveGraph_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_7ab72377_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SaveGraph_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1206:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 1208:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-modal',{attrs:{\"title\":\"Save Graph\",\"hide-header-close\":\"\"},on:{\"ok\":function($event){_vm.handleOk()},\"cancel\":function($event){_vm.hide()}},model:{value:(_vm.myModal),callback:function ($$v) {_vm.myModal=$$v},expression:\"myModal\"}},[_c('div',[_c('label',{attrs:{\"for\":\"name\"}},[_vm._v(\"Name\")]),_vm._v(\" \"),_c('b-form-input',{attrs:{\"type\":\"text\",\"id\":\"name\"},model:{value:(_vm.newGraphTitle),callback:function ($$v) {_vm.newGraphTitle=$$v},expression:\"newGraphTitle\"}})],1)])}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1209:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_UpdateGraph_vue__ = __webpack_require__(549);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6af6e162_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_UpdateGraph_vue__ = __webpack_require__(1211);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\nfunction injectStyle (context) {\n  __webpack_require__(1210)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-6af6e162\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_UpdateGraph_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6af6e162_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_UpdateGraph_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_6af6e162_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_UpdateGraph_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1210:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 1211:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-modal',{attrs:{\"title\":\"Update Graph\",\"ok-title\":\"Yes\",\"cancel-title\":\"No\",\"no-close-on-esc\":\"\",\"no-close-on-backdrop\":\"\",\"hide-header-close\":\"\"},on:{\"ok\":function($event){_vm.handleOk()},\"cancel\":function($event){_vm.handleCancel()}},model:{value:(_vm.myModal),callback:function ($$v) {_vm.myModal=$$v},expression:\"myModal\"}},[_c('div',[_c('h5',[_vm._v(\"Do you want update/overwrite the current graph?\")])])])}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1212:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Wizard_vue__ = __webpack_require__(550);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_12646eb7_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Wizard_vue__ = __webpack_require__(1219);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\nfunction injectStyle (context) {\n  __webpack_require__(1213)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-12646eb7\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Wizard_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_12646eb7_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Wizard_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_12646eb7_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Wizard_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1213:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 1215:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 1216:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_FileReader_vue__ = __webpack_require__(551);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1faa7a9c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_FileReader_vue__ = __webpack_require__(1218);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\nfunction injectStyle (context) {\n  __webpack_require__(1217)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_FileReader_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1faa7a9c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_FileReader_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_1faa7a9c_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_FileReader_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1217:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 1218:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',{staticClass:\"text-reader\"},[_c('input',{attrs:{\"type\":\"file\"},on:{\"change\":_vm.loadTextFromFile}}),_vm._v(\" \"),_vm._v(\"\\n  filereader\\n\")])}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1219:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-modal',{attrs:{\"title\":\"Wizard\",\"size\":\"lg\",\"hide-header\":\"\",\"hide-footer\":\"\",\"ok-title\":\"Yes\",\"cancel-title\":\"No\",\"hide-header-close\":\"\"},on:{\"ok\":_vm.handleOk,\"cancel\":_vm.handleCancel},model:{value:(_vm.myModal),callback:function ($$v) {_vm.myModal=$$v},expression:\"myModal\"}},[_c('div',[_c('form-wizard',{ref:\"formWizard\",attrs:{\"step-size\":\"sm\",\"title\":\"Startup Wizard\",\"color\":\"#184da3\"},on:{\"on-complete\":_vm.handleOk,\"on-change\":_vm.setActiveIndex}},[_vm._l((_vm.wizHierarchy),function(stage,key1){return [(key1!='Mix')?_c('tab-content',{attrs:{\"icon\":_vm.icon[key1],\"title\":key1}},[(key1!='Finish')?_c('div',[_c('div',{staticStyle:{\"border\":\"solid rgb(164, 183, 193)\",\"border-width\":\"1px 0px\",\"padding\":\"0px 5px 10px 5px\"}},[_vm._l((1),function(index){return _c('div',{staticClass:\"row\",staticStyle:{\"margin-top\":\"10px\"}},[_c('div',{staticClass:\"col-sm-6\"},[_c('select',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.selectedFunction[key1]),expression:\"selectedFunction[key1]\"}],staticClass:\"form-control\",attrs:{\"name\":\"user\",\"size\":\"5\"},on:{\"change\":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = \"_value\" in o ? o._value : o.value;return val}); _vm.$set(_vm.selectedFunction, key1, $event.target.multiple ? $$selectedVal : $$selectedVal[0])}}},[_vm._l((stage),function(info,key2){return [_c('option',{domProps:{\"value\":key2}},[_vm._v(_vm._s(_vm.libUINames[key2]))])]}),_vm._v(\" \"),_c('option',{attrs:{\"value\":\"NA\"}},[_vm._v(\" -- \")])],2)]),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-6\"},[_c('div',{staticClass:\"col-sm-12\",staticStyle:{\"border\":\"1px solid rgb(164, 183, 193)\",\"padding\":\"15px 15px\",\"height\":\"100%\"}},[_vm._v(\"\\n                  \"+_vm._s(_vm.selectedFunction[key1])+\"\\n                  \")])])])}),_vm._v(\" \"),_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-12\",staticStyle:{\"margin-top\":\"5px\"}},[_c('b-button',{staticClass:\"float-right\",staticStyle:{\"margin-left\":\"3px\"},attrs:{\"type\":\"button\",\"variant\":\"secondary\"}},[_c('i',{staticClass:\"fa fa-plus\"})])],1)])],2)]):_c('div',{staticStyle:{\"border\":\"solid rgb(164, 183, 193)\",\"border-width\":\"1px 0px\",\"padding\":\"15px 0px\"}},[_vm._v(\"\\n          This Wizard helps you get started on the workflow\\n          \"),_c('ul',[_c('li',[_vm._v(\"\\n              To select the functions used in each step and to configure the parameters for\\n              the same right click on the node and select the 'Edit' option from the context menu.\\n            \")]),_vm._v(\" \"),_c('li',[_vm._v(\"\\n              To configure the data is passed from one step to another, right click on the edge and\\n              select the 'Edit' option from the context menu\\n            \")]),_vm._v(\" \"),_c('li',[_vm._v(\"\\n              To create a new edge, hover over the source node, click and drag the edge-handle\\n              (red circle) to the destination node. Configure the parameters in the pop-up window.\\n            \")]),_vm._v(\" \"),_c('li',[_vm._v(\"\\n              To remove a node or a edge, right click on the same and select the 'Remove' option\\n              from the context menu.\\n            \")])])])]):_vm._e()]})],2),_vm._v(\" \"),_c('span')],1),_vm._v(\" \"),_c('textarea',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.text),expression:\"text\"}],attrs:{\"rows\":\"10\"},domProps:{\"value\":(_vm.text)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.text=$event.target.value}}}),_vm._v(\" \"),_c('br'),_vm._v(\" \"),_c('file-reader',{on:{\"load\":function($event){_vm.text = $event}}})],1)}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1220:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Help_vue__ = __webpack_require__(552);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5e885dd4_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Help_vue__ = __webpack_require__(1222);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\nfunction injectStyle (context) {\n  __webpack_require__(1221)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-5e885dd4\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Help_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5e885dd4_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Help_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5e885dd4_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Help_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1221:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 1222:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-modal',{attrs:{\"title\":\"Help\",\"size\":\"lg\",\"hide-header-close\":\"\"},on:{\"ok\":function($event){_vm.handleOk()},\"cancel\":function($event){_vm.hide()}},model:{value:(_vm.myModal),callback:function ($$v) {_vm.myModal=$$v},expression:\"myModal\"}},[_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-lg-12\"},[_c('h2',[_vm._v(\"How To Do Stuff Goes here\")])])])])}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1223:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"wrapper\"},[_c('add-node'),_vm._v(\" \"),_c('edit-node'),_vm._v(\" \"),_c('edit-edge'),_vm._v(\" \"),_c('load-graph'),_vm._v(\" \"),_c('save-graph'),_vm._v(\" \"),_c('update-graph'),_vm._v(\" \"),_c('help'),_vm._v(\" \"),_c('wizard')],1)}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1224:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"animated fadeIn\"},[_c('b-card',[_c('b-row',[_c('b-col',{attrs:{\"sm\":\"5\"}},[_c('h4',{staticClass:\"card-title mb-0\",attrs:{\"id\":\"graph\"}},[_vm._v(\"Model Graph\")])]),_vm._v(\" \"),_c('b-col',{staticClass:\"d-md-block\",attrs:{\"sm\":\"7\"}},[_c('b-button',{staticClass:\"float-right\",staticStyle:{\"margin-left\":\"3px\"},attrs:{\"type\":\"button\",\"variant\":\"danger\",\"title\":\"Run Graph\"},on:{\"click\":function($event){_vm.handleRun()}}},[_c('i',{staticClass:\"fa fa-play\"})]),_vm._v(\" \"),_c('b-button',{staticClass:\"float-right\",staticStyle:{\"margin-left\":\"3px\"},attrs:{\"type\":\"button\",\"variant\":\"primary\",\"title\":\"Save Graph\"},on:{\"click\":function($event){_vm.handleSave()}}},[_c('i',{staticClass:\"fa fa-save\"})]),_vm._v(\" \"),_c('b-dropdown',{staticClass:\"float-right\",staticStyle:{\"margin-left\":\"3px\"},attrs:{\"right\":\"\",\"split\":\"\",\"variant\":\"primary\",\"title\":\"Set Layout\"},on:{\"click\":function($event){_vm.handleResetLayout('dagre')}}},[_c('template',{slot:\"button-content\"},[_c('i',{staticClass:\"fa fa-sitemap\",attrs:{\"title\":\"DAG Layout\"}})]),_vm._v(\" \"),_c('b-dropdown-item',{on:{\"click\":function($event){_vm.handleResetLayout('dagre')}}},[_vm._v(\"DAG Layout\")]),_vm._v(\" \"),_c('b-dropdown-item',{on:{\"click\":function($event){_vm.handleResetLayout('circle')}}},[_vm._v(\"Circle Layout\")]),_vm._v(\" \"),_c('b-dropdown-item',{on:{\"click\":function($event){_vm.handleResetLayout('breadthfirst')}}},[_vm._v(\"Breadth First Layout\")]),_vm._v(\" \"),_c('b-dropdown-item',{on:{\"click\":function($event){_vm.handleResetLayout('grid')}}},[_vm._v(\"Grid Layout\")]),_vm._v(\" \"),_c('b-dropdown-item',{on:{\"click\":function($event){_vm.handleResetLayout('concentric')}}},[_vm._v(\"Concentric Layout\")]),_vm._v(\" \"),_c('b-dropdown-item',{on:{\"click\":function($event){_vm.handleResetLayout('cose')}}},[_vm._v(\"CoSE Layout\")]),_vm._v(\" \"),_c('b-dropdown-item',{on:{\"click\":function($event){_vm.handleResetLayout('random')}}},[_vm._v(\"Random Layout\")])],2),_vm._v(\" \"),_c('b-button',{staticClass:\"float-right\",staticStyle:{\"margin-left\":\"3px\"},attrs:{\"type\":\"button\",\"variant\":\"success\",\"title\":\"Load Template\"},on:{\"click\":function($event){_vm.handleLoad()}}},[_c('i',{staticClass:\"fa fa-folder-open\"})])],1)],1),_vm._v(\" \"),_c('cytoscape-graph',{staticClass:\"chart-wrapper\",staticStyle:{\"height\":\"600px\",\"margin-top\":\"40px\"},attrs:{\"height\":\"600\"}}),_vm._v(\" \"),_c('div',{attrs:{\"slot\":\"footer\"},slot:\"footer\"})],1),_vm._v(\" \"),_c('modals')],1)}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1225:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Results_vue__ = __webpack_require__(553);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_18f4d491_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Results_vue__ = __webpack_require__(1228);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Results_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_18f4d491_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Results_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_18f4d491_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Results_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1226:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Table_vue__ = __webpack_require__(554);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_02df20c5_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Table_vue__ = __webpack_require__(1227);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Table_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_02df20c5_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Table_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_02df20c5_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Table_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1227:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-card',{attrs:{\"header\":_vm.caption}},[_c('b-table',{attrs:{\"hover\":_vm.hover,\"striped\":_vm.striped,\"bordered\":_vm.bordered,\"small\":_vm.small,\"fixed\":_vm.fixed,\"responsive\":\"sm\",\"items\":_vm.graphruns,\"fields\":_vm.graphruns_fields,\"current-page\":_vm.currentPage,\"per-page\":_vm.perPage},scopedSlots:_vm._u([{key:\"status\",fn:function(data){return [_c('b-badge',{attrs:{\"variant\":_vm.getBadge(data.item.status)}},[_vm._v(_vm._s(data.item.status))])]}}])}),_vm._v(\" \"),_c('nav',[_c('b-pagination',{attrs:{\"total-rows\":_vm.getRowCount(_vm.items),\"per-page\":_vm.perPage,\"prev-text\":\"Prev\",\"next-text\":\"Next\",\"hide-goto-end-buttons\":\"\"},model:{value:(_vm.currentPage),callback:function ($$v) {_vm.currentPage=$$v},expression:\"currentPage\"}})],1)],1)}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1228:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"animated fadeIn\"},[_c('b-row',[_c('b-col',{attrs:{\"lg\":\"12\"}},[_c('c-table',{attrs:{\"striped\":\"\",\"caption\":\"<i class='fa fa-align-justify'></i> Executions\"}})],1)],1)],1)}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 1229:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Visual_vue__ = __webpack_require__(555);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_d6d95310_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Visual_vue__ = __webpack_require__(2368);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\nfunction injectStyle (context) {\n  __webpack_require__(1230)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-d6d95310\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Visual_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_d6d95310_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Visual_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_d6d95310_hasScoped_true_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Visual_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 1230:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 1239:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 1523:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 1832:\n/***/ (function(module, exports) {\n\nmodule.exports = [\"xx-small\",\"x-small\",\"small\",\"medium\",\"large\",\"x-large\",\"xx-large\",\"larger\",\"smaller\"]\n\n/***/ }),\n\n/***/ 220:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios__ = __webpack_require__(1063);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_axios__);\n\n\nvar CSRF_COOKIE_NAME = 'csrftoken';\nvar CSRF_HEADER_NAME = 'X-CSRFToken';\n\nvar session = __WEBPACK_IMPORTED_MODULE_0_axios___default.a.create({\n  xsrfCookieName: CSRF_COOKIE_NAME,\n  xsrfHeaderName: CSRF_HEADER_NAME\n});\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (session);\n\n/***/ }),\n\n/***/ 2354:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 2356:\n/***/ (function(module, exports) {\n\n/* (ignored) */\n\n/***/ }),\n\n/***/ 2367:\n/***/ (function(module, exports) {\n\nmodule.exports = {\"200\":\"healthy endpoint disconnect\",\"308\":\"stream had ended\",\"400\":\"invalid or malformed request syntax\",\"403\":\"stream token no longer associated with this plot\",\"404\":\"streamtoken not registered or valid\",\"405\":\"bad request method: use POST for streaming\",\"406\":\"bad request header: missing 'plotly-streamtoken'\",\"408\":\"timeout on active data\",\"422\":\"json parse error: please stream newline seperated JSON\",\"423\":\"connection limit associated with this token has been reached\",\"449\":\"stream content has changed, reloading clients\",\"500\":\"internal server error\",\"503\":\"internal database error\",\"520\":\"error in request stream\"}\n\n/***/ }),\n\n/***/ 2368:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"panel panel-sm\"},[_vm._m(0),_vm._v(\" \"),_c('div',{staticClass:\"panel-body\"},[_c('div',{staticClass:\"form-group\"},[_c('label',{staticClass:\"control-label col-sm-3 text-right\",attrs:{\"for\":\"csv_file\"}},[_vm._v(\"CSV file to import\")]),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-9\"},[_c('input',{staticClass:\"form-control\",attrs:{\"type\":\"file\",\"id\":\"csv_file\",\"name\":\"csv_file\"},on:{\"change\":function($event){_vm.loadCSV($event)}}})])]),_vm._v(\" \"),_vm._m(1),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-12\"},[_c('button',{staticClass:\"btn btn-primary\",on:{\"click\":function($event){_vm.selecTion(1)}}},[_vm._v(\"Parse CSV\")]),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-primary\",on:{\"click\":function($event){_vm.selecTion(2)}}},[_vm._v(\"Get EDA\")]),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-primary\",on:{\"click\":function($event){_vm.selecTion(3)}}},[_vm._v(\"Line Plot\")]),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-primary\",on:{\"click\":function($event){_vm.selecTion(4)}}},[_vm._v(\"Bar Plot\")]),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-primary\",on:{\"click\":function($event){_vm.selecTion(5)}}},[_vm._v(\"Scatter Plot\")])]),_vm._v(\" \"),(!_vm.selec1ted)?_c('div',[(_vm.parse_csv)?_c('table',[_c('thead',[_c('tr',_vm._l((_vm.parse_header),function(key){return _c('th',{class:{ active: _vm.sortKey == key },on:{\"click\":function($event){_vm.sortBy(key)}}},[_vm._v(\"\\n                  \"+_vm._s(_vm._f(\"capitalize\")(key))+\"\\n                  \\n                \")])}))]),_vm._v(\" \"),_vm._l((_vm.parse_csv),function(csv){return _c('tr',_vm._l((_vm.parse_header),function(key){return _c('td',[_vm._v(\"\\n                \"+_vm._s(csv[key])+\"\\n              \")])}))})],2):_vm._e()]):_vm._e(),_vm._v(\" \"),(!_vm.selec2ted)?_c('div',[_c('div',{staticClass:\"panel\"},[_c('table',[_c('th',[_vm._v(\" Column\\n            \")]),_vm._v(\" \"),_c('th',[_vm._v(\"  Min - Max\\n            \")]),_vm._v(\" \"),_c('th',[_vm._v(\" Average\\n            \")]),_vm._v(\" \"),_c('th',[_vm._v(\" Median\\n            \")]),_vm._v(\" \"),_c('th',[_vm._v(\"  Standard Deviation\\n            \")]),_vm._v(\" \"),_vm._l((_vm.eda),function(col){return _c('tr',_vm._l((col),function(c){return _c('td',[_vm._v(\"\\n                \"+_vm._s(c)+\"\\n              \")])}))})],2)])]):_vm._e(),_vm._v(\" \"),(!_vm.selec3ted)?_c('div',[_c('span',{staticClass:\"Strong\"},[_vm._v(\" Select axis to plot \")]),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-3\"},[_vm._v(\"\\n            X Axis\"),_c('b-form-select',{attrs:{\"options\":_vm.parse_header},on:{\"change\":function($event){_vm.Plot($event, null)}},model:{value:(_vm.s1selected),callback:function ($$v) {_vm.s1selected=$$v},expression:\"s1selected\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-3\"},[_vm._v(\"\\n            Y Axis\"),_c('b-form-select',{attrs:{\"options\":_vm.parse_header},on:{\"change\":function($event){_vm.Plot(null, $event)}},model:{value:(_vm.s2selected),callback:function ($$v) {_vm.s2selected=$$v},expression:\"s2selected\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"panel\"},[_c('vue-plotly',{attrs:{\"data\":_vm.ata,\"layout\":_vm.layout,\"options\":_vm.options}})],1)]):_vm._e(),_vm._v(\" \"),(!_vm.selec4ted)?_c('div',[_c('span',{staticClass:\"Strong\"},[_vm._v(\" Select axis to plot \")]),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-3\"},[_vm._v(\"\\n            X Axis\"),_c('b-form-select',{attrs:{\"options\":_vm.parse_header},on:{\"change\":function($event){_vm.Plot($event, null)}},model:{value:(_vm.s1selected),callback:function ($$v) {_vm.s1selected=$$v},expression:\"s1selected\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-3\"},[_vm._v(\"\\n            Y Axis\"),_c('b-form-select',{attrs:{\"options\":_vm.parse_header},on:{\"change\":function($event){_vm.Plot(null, $event)}},model:{value:(_vm.s2selected),callback:function ($$v) {_vm.s2selected=$$v},expression:\"s2selected\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"panel\"},[_c('vue-plotly',{attrs:{\"data\":_vm.ata,\"layout\":_vm.layout,\"options\":_vm.options}})],1)]):_vm._e(),_vm._v(\" \"),(!_vm.selec5ted)?_c('div',[_c('span',{staticClass:\"Strong\"},[_vm._v(\" Select axis to plot \")]),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-3\"},[_vm._v(\"\\n            X Axis\"),_c('b-form-select',{attrs:{\"options\":_vm.parse_header},on:{\"change\":function($event){_vm.Plot($event, null)}},model:{value:(_vm.s1selected),callback:function ($$v) {_vm.s1selected=$$v},expression:\"s1selected\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-3\"},[_vm._v(\"\\n            Y Axis\"),_c('b-form-select',{attrs:{\"options\":_vm.parse_header},on:{\"change\":function($event){_vm.Plot(null, $event)}},model:{value:(_vm.s2selected),callback:function ($$v) {_vm.s2selected=$$v},expression:\"s2selected\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"panel\"},[_c('vue-plotly',{attrs:{\"data\":_vm.ata,\"layout\":_vm.layout,\"options\":_vm.options}})],1)]):_vm._e()])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"panel-heading\"},[_c('h4',[_vm._v(\"CSV Import\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"col-sm-offset-3 col-sm-9\"},[_c('div',{staticClass:\"checkbox-inline\"},[_c('label',{attrs:{\"for\":\"header_rows\"}},[_c('input',{attrs:{\"type\":\"checkbox\",\"id\":\"header_rows\"}}),_vm._v(\" File contains header row?\")])])])}]\n\n\n/***/ }),\n\n/***/ 2369:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Page404_vue__ = __webpack_require__(901);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_49e064e2_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Page404_vue__ = __webpack_require__(2370);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Page404_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_49e064e2_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Page404_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_49e064e2_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Page404_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 2370:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"app flex-row align-items-center\"},[_c('div',{staticClass:\"container\"},[_c('b-row',{staticClass:\"justify-content-center\"},[_c('b-col',{attrs:{\"md\":\"6\"}},[_c('div',{staticClass:\"clearfix\"},[_c('h1',{staticClass:\"float-left display-3 mr-4\"},[_vm._v(\"404\")]),_vm._v(\" \"),_c('h4',{staticClass:\"pt-3\"},[_vm._v(\"Oops! You're lost.\")]),_vm._v(\" \"),_c('p',{staticClass:\"text-muted\"},[_vm._v(\"The page you are looking for was not found.\")])]),_vm._v(\" \"),_c('b-input-group',[_c('b-input-group-prepend',[_c('b-input-group-text',[_c('i',{staticClass:\"fa fa-search\"})])],1),_vm._v(\" \"),_c('input',{staticClass:\"form-control\",attrs:{\"id\":\"prependedInput\",\"size\":\"16\",\"type\":\"text\",\"placeholder\":\"What are you looking for?\"}}),_vm._v(\" \"),_c('b-input-group-append',[_c('b-button',{attrs:{\"variant\":\"info\"}},[_vm._v(\"Search\")])],1)],1)],1)],1)],1)])}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 2371:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Page500_vue__ = __webpack_require__(902);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5b5c6502_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Page500_vue__ = __webpack_require__(2372);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Page500_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5b5c6502_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Page500_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_5b5c6502_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Page500_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 2372:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"app flex-row align-items-center\"},[_c('div',{staticClass:\"container\"},[_c('b-row',{staticClass:\"justify-content-center\"},[_c('b-col',{attrs:{\"md\":\"6\"}},[_c('div',{staticClass:\"clearfix\"},[_c('h1',{staticClass:\"float-left display-3 mr-4\"},[_vm._v(\"500\")]),_vm._v(\" \"),_c('h4',{staticClass:\"pt-3\"},[_vm._v(\"Houston, we have a problem!\")]),_vm._v(\" \"),_c('p',{staticClass:\"text-muted\"},[_vm._v(\"The page you are looking for is temporarily unavailable.\")])]),_vm._v(\" \"),_c('b-input-group',[_c('b-input-group-prepend',[_c('b-input-group-text',[_c('i',{staticClass:\"fa fa-search\"})])],1),_vm._v(\" \"),_c('input',{staticClass:\"form-control\",attrs:{\"id\":\"prependedInput\",\"size\":\"16\",\"type\":\"text\",\"placeholder\":\"What are you looking for?\"}}),_vm._v(\" \"),_c('b-input-group-append',[_c('b-button',{attrs:{\"variant\":\"info\"}},[_vm._v(\"Search\")])],1)],1)],1)],1)],1)])}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 2373:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Login_vue__ = __webpack_require__(903);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_33b7a6f7_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Login_vue__ = __webpack_require__(2374);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Login_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_33b7a6f7_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Login_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_33b7a6f7_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Login_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 2374:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"app flex-row align-items-center\"},[_c('div',{staticClass:\"container\"},[_c('b-row',{staticClass:\"justify-content-center\"},[_c('b-col',{attrs:{\"md\":\"8\"}},[_c('b-card-group',[_c('b-card',{staticClass:\"p-4\",attrs:{\"no-body\":\"\"}},[_c('b-card-body',[_c('h1',[_vm._v(\"Login\")]),_vm._v(\" \"),_c('p',{staticClass:\"text-muted\"},[_vm._v(\"Sign In to your account\")]),_vm._v(\" \"),_c('b-input-group',{staticClass:\"mb-3\"},[_c('b-input-group-prepend',[_c('b-input-group-text',[_c('i',{staticClass:\"icon-user\"})])],1),_vm._v(\" \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.user),expression:\"user\"}],staticClass:\"form-control\",attrs:{\"type\":\"text\",\"placeholder\":\"Username\"},domProps:{\"value\":(_vm.user)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.user=$event.target.value}}})],1),_vm._v(\" \"),_c('b-input-group',{staticClass:\"mb-4\"},[_c('b-input-group-prepend',[_c('b-input-group-text',[_c('i',{staticClass:\"icon-lock\"})])],1),_vm._v(\" \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.pass),expression:\"pass\"}],staticClass:\"form-control\",attrs:{\"type\":\"password\",\"placeholder\":\"Password\"},domProps:{\"value\":(_vm.pass)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.pass=$event.target.value}}})],1),_vm._v(\" \"),_c('b-row',[_c('b-col',{attrs:{\"cols\":\"6\"}},[_c('b-button',{staticClass:\"px-4\",attrs:{\"variant\":\"primary\"},on:{\"click\":function($event){_vm.login(_vm.user, _vm.pass)}}},[_vm._v(\"Login\")])],1),_vm._v(\" \"),(_vm.loginFailed)?_c('b-col',{staticClass:\"text-right\",attrs:{\"cols\":\"6\"}},[_c('span',{staticStyle:{\"color\":\"red\"}},[_vm._v(\"Login Failed\")])]):_vm._e()],1)],1)],1),_vm._v(\" \"),_c('b-card',{staticClass:\"text-white bg-primary py-5 d-md-down-none\",staticStyle:{\"width\":\"44%\"},attrs:{\"no-body\":\"\"}},[_c('b-card-body',{staticClass:\"text-center\"},[_c('div',[_c('h2',[_vm._v(\"Sign up\")]),_vm._v(\" \"),_c('p',[_vm._v(\" Register now to use the MaDE@UB Machine Learning Toolkit with interactive graphical user interface to perform machine learning tasks on your datasets.\")]),_vm._v(\" \"),_c('p',[_vm._v(\" click below to send mail to our system administerators to create account\")]),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"mailto:sahmed9@buffalo.edu\"}},[_c('b-button',{staticClass:\"active mt-3\",attrs:{\"variant\":\"primary\"}},[_vm._v(\"Register Now!\")])],1)])])],1)],1)],1)],1)],1)])}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 2375:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Register_vue__ = __webpack_require__(904);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_9b2385e2_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Register_vue__ = __webpack_require__(2376);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_Register_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_9b2385e2_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Register_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_9b2385e2_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_Register_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 2376:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return staticRenderFns; });\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"app flex-row align-items-center\"},[_c('div',{staticClass:\"container\"},[_c('b-row',{staticClass:\"justify-content-center\"},[_c('b-col',{attrs:{\"md\":\"6\",\"sm\":\"8\"}},[_c('b-card',{staticClass:\"mx-4\",attrs:{\"no-body\":\"\"}},[_c('b-card-body',{staticClass:\"p-4\"},[_c('h1',[_vm._v(\"Register\")]),_vm._v(\" \"),_c('p',{staticClass:\"text-muted\"},[_vm._v(\"Create your account\")]),_vm._v(\" \"),_c('b-input-group',{staticClass:\"mb-3\"},[_c('b-input-group-prepend',[_c('b-input-group-text',[_c('i',{staticClass:\"icon-user\"})])],1),_vm._v(\" \"),_c('input',{staticClass:\"form-control\",attrs:{\"type\":\"text\",\"placeholder\":\"Username\"}})],1),_vm._v(\" \"),_c('b-input-group',{staticClass:\"mb-3\"},[_c('b-input-group-prepend',[_c('b-input-group-text',[_vm._v(\"@\")])],1),_vm._v(\" \"),_c('input',{staticClass:\"form-control\",attrs:{\"type\":\"text\",\"placeholder\":\"Email\"}})],1),_vm._v(\" \"),_c('b-input-group',{staticClass:\"mb-3\"},[_c('b-input-group-prepend',[_c('b-input-group-text',[_c('i',{staticClass:\"icon-lock\"})])],1),_vm._v(\" \"),_c('input',{staticClass:\"form-control\",attrs:{\"type\":\"password\",\"placeholder\":\"Password\"}})],1),_vm._v(\" \"),_c('b-input-group',{staticClass:\"mb-4\"},[_c('b-input-group-prepend',[_c('b-input-group-text',[_c('i',{staticClass:\"icon-lock\"})])],1),_vm._v(\" \"),_c('input',{staticClass:\"form-control\",attrs:{\"type\":\"password\",\"placeholder\":\"Repeat password\"}})],1),_vm._v(\" \"),_c('b-button',{attrs:{\"variant\":\"success\",\"block\":\"\"}},[_vm._v(\"Create Account\")])],1),_vm._v(\" \"),_c('b-card-footer',{staticClass:\"p-4\"},[_c('b-row',[_c('b-col',{attrs:{\"cols\":\"6\"}},[_c('b-button',{staticClass:\"btn btn-facebook\",attrs:{\"block\":\"\"}},[_c('span',[_vm._v(\"facebook\")])])],1),_vm._v(\" \"),_c('b-col',{attrs:{\"cols\":\"6\"}},[_c('b-button',{staticClass:\"btn btn-twitter\",attrs:{\"block\":\"\",\"type\":\"button\"}},[_c('span',[_vm._v(\"twitter\")])])],1)],1)],1)],1)],1)],1)],1)])}\nvar staticRenderFns = []\n\n\n/***/ }),\n\n/***/ 306:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__session__ = __webpack_require__(220);\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  login: function login(username, password) {\n    return __WEBPACK_IMPORTED_MODULE_0__session__[\"a\" /* default */].post('https://madeatub.buffalo.edu/mltoolkit/auth/login/', { username: username, password: password });\n  },\n  logout: function logout() {\n    return __WEBPACK_IMPORTED_MODULE_0__session__[\"a\" /* default */].post('https://madeatub.buffalo.edu/mltoolkit/auth/logout/', {});\n  },\n  createAccount: function createAccount(username, password1, password2, email) {\n    return __WEBPACK_IMPORTED_MODULE_0__session__[\"a\" /* default */].post('https://madeatub.buffalo.edu/mltoolkit/registration/', { username: username, password1: password1, password2: password2, email: email });\n  },\n  changeAccountPassword: function changeAccountPassword(password1, password2) {\n    return __WEBPACK_IMPORTED_MODULE_0__session__[\"a\" /* default */].post('https://madeatub.buffalo.edu/mltoolkit/auth/password/change/', { password1: password1, password2: password2 });\n  },\n  sendAccountPasswordResetEmail: function sendAccountPasswordResetEmail(email) {\n    return __WEBPACK_IMPORTED_MODULE_0__session__[\"a\" /* default */].post('https://madeatub.buffalo.edu/mltoolkit/auth/password/reset/', { email: email });\n  },\n  resetAccountPassword: function resetAccountPassword(uid, token, new_password1, new_password2) {\n    return __WEBPACK_IMPORTED_MODULE_0__session__[\"a\" /* default */].post('https://madeatub.buffalo.edu/mltoolkit/auth/password/reset/confirm/', { uid: uid, token: token, new_password1: new_password1, new_password2: new_password2 });\n  },\n  getAccountDetails: function getAccountDetails() {\n    return __WEBPACK_IMPORTED_MODULE_0__session__[\"a\" /* default */].get('https://madeatub.buffalo.edu/mltoolkit/auth/user/');\n  },\n  updateAccountDetails: function updateAccountDetails(data) {\n    return __WEBPACK_IMPORTED_MODULE_0__session__[\"a\" /* default */].patch('https://madeatub.buffalo.edu/mltoolkit/auth/user/', data);\n  },\n  verifyAccountEmail: function verifyAccountEmail(key) {\n    return __WEBPACK_IMPORTED_MODULE_0__session__[\"a\" /* default */].post('https://madeatub.buffalo.edu/mltoolkit/registration/verify-email/', { key: key });\n  }\n});\n\n/***/ }),\n\n/***/ 307:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ACTIVATION_BEGIN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return ACTIVATION_CLEAR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return ACTIVATION_FAILURE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return ACTIVATION_SUCCESS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return LOGIN_BEGIN; });\n/* unused harmony export LOGIN_CLEAR */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return LOGIN_FAILURE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return LOGIN_SUCCESS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return LOGOUT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return PASSWORD_EMAIL_BEGIN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return PASSWORD_EMAIL_CLEAR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return PASSWORD_EMAIL_FAILURE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return PASSWORD_EMAIL_SUCCESS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return PASSWORD_RESET_BEGIN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return PASSWORD_RESET_CLEAR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return PASSWORD_RESET_FAILURE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return PASSWORD_RESET_SUCCESS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"q\", function() { return REGISTRATION_BEGIN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"r\", function() { return REGISTRATION_CLEAR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"s\", function() { return REGISTRATION_FAILURE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"t\", function() { return REGISTRATION_SUCCESS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"v\", function() { return SET_TOKEN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"u\", function() { return REMOVE_TOKEN; });\nvar ACTIVATION_BEGIN = 'ACTIVATION_BEGIN';\nvar ACTIVATION_CLEAR = 'ACTIVATION_CLEAR';\nvar ACTIVATION_FAILURE = 'ACTIVATION_FAILURE';\nvar ACTIVATION_SUCCESS = 'ACTIVATION_SUCCESS';\nvar LOGIN_BEGIN = 'LOGIN_BEGIN';\nvar LOGIN_CLEAR = 'LOGIN_CLEAR';\nvar LOGIN_FAILURE = 'LOGIN_FAILURE';\nvar LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nvar LOGOUT = 'LOGOUT';\nvar PASSWORD_EMAIL_BEGIN = 'PASSWORD_EMAIL_BEGIN';\nvar PASSWORD_EMAIL_CLEAR = 'PASSWORD_EMAIL_CLEAR';\nvar PASSWORD_EMAIL_FAILURE = 'PASSWORD_EMAIL_FAILURE';\nvar PASSWORD_EMAIL_SUCCESS = 'PASSWORD_EMAIL_SUCCESS';\nvar PASSWORD_RESET_BEGIN = 'PASSWORD_RESET_BEGIN';\nvar PASSWORD_RESET_CLEAR = 'PASSWORD_RESET_CLEAR';\nvar PASSWORD_RESET_FAILURE = 'PASSWORD_RESET_FAILURE';\nvar PASSWORD_RESET_SUCCESS = 'PASSWORD_RESET_SUCCESS';\nvar REGISTRATION_BEGIN = 'REGISTRATION_BEGIN';\nvar REGISTRATION_CLEAR = 'REGISTRATION_CLEAR';\nvar REGISTRATION_FAILURE = 'REGISTRATION_FAILURE';\nvar REGISTRATION_SUCCESS = 'REGISTRATION_SUCCESS';\nvar SET_TOKEN = 'SET_TOKEN';\nvar REMOVE_TOKEN = 'REMOVE_TOKEN';\n\n/***/ }),\n\n/***/ 487:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'app'\n});\n\n/***/ }),\n\n/***/ 488:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(280);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuex__ = __webpack_require__(60);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__modules_cytoscape__ = __webpack_require__(1020);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__modules_modals__ = __webpack_require__(1082);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__modules_auth__ = __webpack_require__(1083);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__modules_password__ = __webpack_require__(1087);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__modules_signup__ = __webpack_require__(1088);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__modules_graph__ = __webpack_require__(1089);\n\n\n\n\n\n\n\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */].use(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (new __WEBPACK_IMPORTED_MODULE_1_vuex__[\"a\" /* default */].Store({\n  modules: {\n    cytoscape: __WEBPACK_IMPORTED_MODULE_2__modules_cytoscape__[\"a\" /* default */],\n    modals: __WEBPACK_IMPORTED_MODULE_3__modules_modals__[\"a\" /* default */],\n\n    auth: __WEBPACK_IMPORTED_MODULE_4__modules_auth__[\"a\" /* default */],\n    password: __WEBPACK_IMPORTED_MODULE_5__modules_password__[\"a\" /* default */],\n    signup: __WEBPACK_IMPORTED_MODULE_6__modules_signup__[\"a\" /* default */],\n    graph: __WEBPACK_IMPORTED_MODULE_7__modules_graph__[\"a\" /* default */]\n  }\n}));\n\n/***/ }),\n\n/***/ 513:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__nav__ = __webpack_require__(1092);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components___ = __webpack_require__(1093);\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'full',\n  components: {\n    AppHeader: __WEBPACK_IMPORTED_MODULE_1__components___[\"d\" /* Header */],\n    Sidebar: __WEBPACK_IMPORTED_MODULE_1__components___[\"e\" /* Sidebar */],\n    AppAside: __WEBPACK_IMPORTED_MODULE_1__components___[\"a\" /* Aside */],\n    AppFooter: __WEBPACK_IMPORTED_MODULE_1__components___[\"c\" /* Footer */],\n    Breadcrumb: __WEBPACK_IMPORTED_MODULE_1__components___[\"b\" /* Breadcrumb */]\n  },\n  data: function data() {\n    return {\n      nav: __WEBPACK_IMPORTED_MODULE_0__nav__[\"a\" /* default */].items\n    };\n  },\n\n  computed: {\n    name: function name() {\n      return this.$route.name;\n    },\n    list: function list() {\n      return this.$route.matched;\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 514:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'c-aside'\n});\n\n/***/ }),\n\n/***/ 515:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: {\n    list: {\n      type: Array,\n      required: true,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  methods: {\n    isLast: function isLast(index) {\n      return index === this.list.length - 1;\n    },\n    showName: function showName(item) {\n      if (item.meta && item.meta.label) {\n        item = item.meta && item.meta.label;\n      }\n      if (item.name) {\n        item = item.name;\n      }\n      return item;\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 516:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: {\n    variant: {\n      type: String\n    }\n  },\n  computed: {\n    classList: function classList() {\n      return ['callout', this.calloutVariant];\n    },\n    calloutVariant: function calloutVariant() {\n      return this.variant ? 'callout-' + this.variant : '';\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 517:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'c-footer'\n});\n\n/***/ }),\n\n/***/ 518:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__HeaderDropdown_vue__ = __webpack_require__(1103);\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'c-header',\n  components: {\n    HeaderDropdown: __WEBPACK_IMPORTED_MODULE_0__HeaderDropdown_vue__[\"a\" /* default */]\n  },\n  methods: {\n    sidebarToggle: function sidebarToggle(e) {\n      e.preventDefault();\n      document.body.classList.toggle('sidebar-hidden');\n    },\n    sidebarMinimize: function sidebarMinimize(e) {\n      e.preventDefault();\n      document.body.classList.toggle('sidebar-minimized');\n    },\n    mobileSidebarToggle: function mobileSidebarToggle(e) {\n      e.preventDefault();\n      document.body.classList.toggle('sidebar-mobile-show');\n    },\n    asideToggle: function asideToggle(e) {\n      e.preventDefault();\n      document.body.classList.toggle('aside-menu-hidden');\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 519:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'header-dropdown',\n  data: function data() {\n    return { itemsCount: 42 };\n  }\n});\n\n/***/ }),\n\n/***/ 520:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__SidebarFooter__ = __webpack_require__(1108);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SidebarForm__ = __webpack_require__(1110);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__SidebarHeader__ = __webpack_require__(1112);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__SidebarMinimizer__ = __webpack_require__(1114);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__SidebarNavDivider__ = __webpack_require__(1116);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__SidebarNavDropdown__ = __webpack_require__(1122);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__SidebarNavLink__ = __webpack_require__(527);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__SidebarNavTitle__ = __webpack_require__(1125);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__SidebarNavItem__ = __webpack_require__(530);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__SidebarNavLabel__ = __webpack_require__(1128);\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'sidebar',\n  props: {\n    navItems: {\n      type: Array,\n      required: true,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  components: {\n    SidebarFooter: __WEBPACK_IMPORTED_MODULE_0__SidebarFooter__[\"a\" /* default */],\n    SidebarForm: __WEBPACK_IMPORTED_MODULE_1__SidebarForm__[\"a\" /* default */],\n    SidebarHeader: __WEBPACK_IMPORTED_MODULE_2__SidebarHeader__[\"a\" /* default */],\n    SidebarMinimizer: __WEBPACK_IMPORTED_MODULE_3__SidebarMinimizer__[\"a\" /* default */],\n    SidebarNavDivider: __WEBPACK_IMPORTED_MODULE_4__SidebarNavDivider__[\"a\" /* default */],\n    SidebarNavDropdown: __WEBPACK_IMPORTED_MODULE_5__SidebarNavDropdown__[\"a\" /* default */],\n    SidebarNavLink: __WEBPACK_IMPORTED_MODULE_6__SidebarNavLink__[\"a\" /* default */],\n    SidebarNavTitle: __WEBPACK_IMPORTED_MODULE_7__SidebarNavTitle__[\"a\" /* default */],\n    SidebarNavItem: __WEBPACK_IMPORTED_MODULE_8__SidebarNavItem__[\"a\" /* default */],\n    SidebarNavLabel: __WEBPACK_IMPORTED_MODULE_9__SidebarNavLabel__[\"a\" /* default */]\n  },\n  methods: {\n    handleClick: function handleClick(e) {\n      e.preventDefault();\n      e.target.parentElement.classList.toggle('open');\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 521:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'sidebar-footer'\n});\n\n/***/ }),\n\n/***/ 522:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'sidebar-form'\n});\n\n/***/ }),\n\n/***/ 523:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'sidebar-header'\n});\n\n/***/ }),\n\n/***/ 524:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'sidebar-minimizer',\n  methods: {\n    sidebarMinimize: function sidebarMinimize() {\n      document.body.classList.toggle('sidebar-minimized');\n    },\n    brandMinimize: function brandMinimize() {\n      document.body.classList.toggle('brand-minimized');\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 525:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__ = __webpack_require__(174);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__);\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'sidebar-nav-divider',\n  props: {\n    classes: {\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    classList: function classList() {\n      return ['divider'].concat(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default()(this.itemClasses));\n    },\n    itemClasses: function itemClasses() {\n      return this.classes ? this.classes.split(' ') : '';\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 526:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: {\n    name: {\n      type: String,\n      default: ''\n    },\n    url: {\n      type: String,\n      default: ''\n    },\n    icon: {\n      type: String,\n      default: ''\n    }\n  },\n  methods: {\n    handleClick: function handleClick(e) {\n      e.preventDefault();\n      e.target.parentElement.classList.toggle('open');\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 527:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavLink_vue__ = __webpack_require__(528);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_67792580_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavLink_vue__ = __webpack_require__(1124);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavLink_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_67792580_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavLink_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_67792580_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavLink_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 528:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__ = __webpack_require__(174);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__);\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'sidebar-nav-link',\n  props: {\n    name: {\n      type: String,\n      default: ''\n    },\n    url: {\n      type: String,\n      default: ''\n    },\n    icon: {\n      type: String,\n      default: ''\n    },\n    badge: {\n      type: Object,\n      default: function _default() {}\n    },\n    variant: {\n      type: String,\n      default: ''\n    },\n    classes: {\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    classList: function classList() {\n      return ['nav-link', this.linkVariant].concat(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default()(this.itemClasses));\n    },\n    linkVariant: function linkVariant() {\n      return this.variant ? 'nav-link-' + this.variant : '';\n    },\n    itemClasses: function itemClasses() {\n      return this.classes ? this.classes.split(' ') : [];\n    },\n    isExternalLink: function isExternalLink() {\n      if (this.url.substring(0, 4) === 'http') {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 529:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__ = __webpack_require__(174);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__);\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  props: {\n    name: {\n      type: String,\n      default: ''\n    },\n    classes: {\n      type: String,\n      default: ''\n    },\n    wrapper: {\n      type: Object,\n      default: function _default() {}\n    }\n  },\n  computed: {\n    classList: function classList() {\n      return ['nav-title'].concat(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default()(this.itemClasses));\n    },\n    itemClasses: function itemClasses() {\n      return this.classes ? this.classes.split(' ') : '';\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 530:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavItem_vue__ = __webpack_require__(531);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_7ed4d885_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavItem_vue__ = __webpack_require__(1127);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__ = __webpack_require__(11);\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = Object(__WEBPACK_IMPORTED_MODULE_2__node_modules_vue_loader_lib_runtime_component_normalizer__[\"a\" /* default */])(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_SidebarNavItem_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_7ed4d885_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavItem_vue__[\"a\" /* render */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_lib_template_compiler_index_id_data_v_7ed4d885_hasScoped_false_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_SidebarNavItem_vue__[\"b\" /* staticRenderFns */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 531:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__ = __webpack_require__(174);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__);\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'sidebar-nav-item',\n  props: {\n    classes: {\n      type: String,\n      default: ''\n    }\n  },\n  computed: {\n    classList: function classList() {\n      return ['nav-item'].concat(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default()(this.itemClasses));\n    },\n    itemClasses: function itemClasses() {\n      return this.classes ? this.classes.split(' ') : '';\n    }\n  },\n  methods: {\n    hideMobile: function hideMobile() {\n      if (document.body.classList.contains('sidebar-mobile-show')) {\n        document.body.classList.toggle('sidebar-mobile-show');\n      }\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 532:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__ = __webpack_require__(174);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SidebarNavItem__ = __webpack_require__(530);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__SidebarNavLink__ = __webpack_require__(527);\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'sidebar-nav-label',\n  components: {\n    SidebarNavItem: __WEBPACK_IMPORTED_MODULE_1__SidebarNavItem__[\"a\" /* default */],\n    SidebarNavLink: __WEBPACK_IMPORTED_MODULE_2__SidebarNavLink__[\"a\" /* default */]\n  },\n  props: {\n    name: {\n      type: String,\n      default: ''\n    },\n    url: {\n      type: String,\n      default: '#'\n    },\n    icon: {\n      type: String,\n      default: 'fa fa-circle'\n    },\n    classes: {\n      type: String,\n      default: ''\n    },\n    label: {\n      type: Object,\n      required: true,\n      default: function _default() {}\n    }\n  },\n  computed: {\n    classList: function classList() {\n      var classes = {\n        navItem: ['hidden-cn'].concat(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default()(this.getClasses(this.classes))).join(' '),\n        navLink: 'nav-label',\n        icon: [this.icon ? this.icon : 'fa fa-circle', this.label.variant ? 'text-' + this.label.variant : '', this.label.class ? this.label.class : ''].join(' ')\n      };\n      return classes;\n    }\n  },\n  methods: {\n    getClasses: function getClasses(classes) {\n      return classes ? classes.split(' ') : [];\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 533:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  model: {\n    prop: 'checked',\n    event: 'change'\n  },\n  props: {\n    value: {\n      default: true\n    },\n    uncheckedValue: {\n      default: false\n    },\n    checked: {\n      default: false\n    },\n    type: {\n      type: String,\n      default: 'default'\n    },\n    variant: {\n      type: String,\n      default: ''\n    },\n    pill: {\n      type: Boolean,\n      default: false\n    },\n    on: {\n      type: String,\n      default: null\n    },\n    off: {\n      type: String,\n      default: null\n    },\n    size: {\n      type: String,\n      default: null\n    }\n  },\n  computed: {\n    classList: function classList() {\n      return ['switch', this.switchType, this.switchVariant, this.switchPill, this.switchSize];\n    },\n    switchType: function switchType() {\n      return this.type ? 'switch-' + this.type : 'switch-default';\n    },\n    switchVariant: function switchVariant() {\n      return this.variant ? 'switch-' + this.variant : 'switch-secondary';\n    },\n    switchPill: function switchPill() {\n      return !this.pill ? null : 'switch-pill';\n    },\n    switchSize: function switchSize() {\n      return this.size ? 'switch-' + this.size : '';\n    },\n    isChecked: function isChecked() {\n      return this.checked === this.value;\n    },\n    isOn: function isOn() {\n      return !this.on ? null : true;\n    }\n  },\n  methods: {\n    handleChange: function handleChange(_ref) {\n      var checked = _ref.target.checked;\n\n      this.$emit('change', checked ? this.value : this.uncheckedValue);\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 534:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__dashboard_CytoscapeGraph_vue__ = __webpack_require__(1142);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__dashboard_Modals_index_vue__ = __webpack_require__(1192);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vuex__ = __webpack_require__(60);\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'dashboard',\n  components: {\n    CytoscapeGraph: __WEBPACK_IMPORTED_MODULE_1__dashboard_CytoscapeGraph_vue__[\"a\" /* default */],\n    Modals: __WEBPACK_IMPORTED_MODULE_2__dashboard_Modals_index_vue__[\"a\" /* default */]\n  },\n  computed: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_3_vuex__[\"c\" /* mapGetters */])({\n    currentGraphType: 'graph/currentGraphType',\n    currentGraphId: 'graph/currentGraphId',\n    cy: 'cy'\n  })),\n  methods: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_3_vuex__[\"d\" /* mapMutations */])({\n    showLoad: 'showLoadGraph',\n    showSave: 'showSaveGraph',\n    showUpdate: 'showUpdateGraph',\n    showWizard: 'showWizard',\n    showHelp: 'showHelp'\n  }), Object(__WEBPACK_IMPORTED_MODULE_3_vuex__[\"b\" /* mapActions */])({\n    updateRootGraphs: 'graph/updateRootGraphs',\n    updateUserGraphs: 'graph/updateUserGraphs',\n    runCurrentGraph: 'graph/runCurrentGraph'\n  }), {\n    handleRun: function handleRun() {\n      this.runCurrentGraph();\n    },\n    handleHelp: function handleHelp() {\n      this.showHelp();\n    },\n    handleLoad: function handleLoad() {\n      this.updateRootGraphs();\n      this.updateUserGraphs();\n      this.showLoad();\n    },\n    handleSave: function handleSave() {\n      if (this.currentGraphType === 'root') {\n        this.showSave();\n      } else {\n        this.showUpdate();\n      }\n    },\n    handleResetLayout: function handleResetLayout(layoutName) {\n      var layout = this.cy.layout({ name: layoutName,\n        animate: true,\n        animationDuration: 500 });\n      layout.run();\n    },\n    handleShowWizard: function handleShowWizard() {\n      this.showWizard();\n    }\n  })\n});\n\n/***/ }),\n\n/***/ 536:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_assign__ = __webpack_require__(535);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_assign___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_assign__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_cytoscape__ = __webpack_require__(1144);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_cytoscape___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_cytoscape__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_cytoscape_dagre__ = __webpack_require__(1148);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_cytoscape_dagre___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_cytoscape_dagre__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_cytoscape_context_menus__ = __webpack_require__(1189);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_cytoscape_context_menus___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_cytoscape_context_menus__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_cytoscape_edgehandles__ = __webpack_require__(1190);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_cytoscape_edgehandles___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_cytoscape_edgehandles__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_jquery__ = __webpack_require__(222);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_jquery__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_vuex__ = __webpack_require__(60);\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'CytoscapeGraph',\n\n  computed: __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_7_vuex__[\"c\" /* mapGetters */])({\n    cytoscapeConfig: 'cytoscapeConfig',\n    edgehandlesConfig: 'edgehandlesConfig',\n    contextMenusConfig: 'contextMenusConfig',\n    cy: 'cy',\n    funcMeta: 'funcMeta',\n    initGraph: 'initGraph'\n  })),\n  methods: __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_7_vuex__[\"b\" /* mapActions */])({\n    setCytoscapeInitConfig: 'setCytoscapeInitConfig',\n    setEdgehandlesConfig: 'setEdgehandlesConfig',\n    setContextMenusConfig: 'setContextMenusConfig',\n    setCy: 'setCy',\n    setLibHierarchy: 'setLibHierarchy',\n    setFuncMeta: 'setFuncMeta',\n    setLibMeta: 'setLibMeta',\n    setLibUINames: 'setLibUINames',\n    setInitGraph: 'setInitGraph'\n  })),\n\n  mounted: function mounted() {\n    var _this = this;\n\n    var container = __WEBPACK_IMPORTED_MODULE_6_jquery___default()('#cy');\n\n    this.setLibHierarchy().then(function () {\n      console.log('updated lib hierarchy');\n    });\n    this.setLibMeta();\n    this.setLibUINames();\n    this.setFuncMeta().then(function () {\n      _this.setCytoscapeInitConfig(container).then(function () {\n        __WEBPACK_IMPORTED_MODULE_2_cytoscape___default.a.use(__WEBPACK_IMPORTED_MODULE_3_cytoscape_dagre___default.a);\n        __WEBPACK_IMPORTED_MODULE_2_cytoscape___default.a.use(__WEBPACK_IMPORTED_MODULE_5_cytoscape_edgehandles___default.a);\n        __WEBPACK_IMPORTED_MODULE_4_cytoscape_context_menus___default()(__WEBPACK_IMPORTED_MODULE_2_cytoscape___default.a, __WEBPACK_IMPORTED_MODULE_6_jquery___default.a);\n\n        _this.setCy(__WEBPACK_IMPORTED_MODULE_2_cytoscape___default()(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_assign___default()(_this.cytoscapeConfig)));\n\n        _this.setEdgehandlesConfig(_this).then(function () {\n          _this.cy.edgehandles(_this.edgehandlesConfig);\n        });\n\n        _this.setContextMenusConfig(_this).then(function () {\n          _this.cy.contextMenus(_this.contextMenusConfig);\n        });\n      }).then(function () {\n        _this.setInitGraph(_this).then(function () {\n          _this.cy.json(JSON.parse(_this.initGraph.content));\n        });\n      });\n    });\n  }\n});\n\n/***/ }),\n\n/***/ 543:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__AddNode_vue__ = __webpack_require__(1193);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__EditNode_vue__ = __webpack_require__(1197);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__EditEdge_vue__ = __webpack_require__(1200);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__LoadGraph_vue__ = __webpack_require__(1202);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__SaveGraph_vue__ = __webpack_require__(1205);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__UpdateGraph_vue__ = __webpack_require__(1209);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Wizard_vue__ = __webpack_require__(1212);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Help_vue__ = __webpack_require__(1220);\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'modals',\n  components: {\n    AddNode: __WEBPACK_IMPORTED_MODULE_0__AddNode_vue__[\"a\" /* default */],\n    EditNode: __WEBPACK_IMPORTED_MODULE_1__EditNode_vue__[\"a\" /* default */],\n    EditEdge: __WEBPACK_IMPORTED_MODULE_2__EditEdge_vue__[\"a\" /* default */],\n    LoadGraph: __WEBPACK_IMPORTED_MODULE_3__LoadGraph_vue__[\"a\" /* default */],\n    Help: __WEBPACK_IMPORTED_MODULE_7__Help_vue__[\"a\" /* default */],\n    SaveGraph: __WEBPACK_IMPORTED_MODULE_4__SaveGraph_vue__[\"a\" /* default */],\n    UpdateGraph: __WEBPACK_IMPORTED_MODULE_5__UpdateGraph_vue__[\"a\" /* default */],\n    Wizard: __WEBPACK_IMPORTED_MODULE_6__Wizard_vue__[\"a\" /* default */]\n  },\n  data: function data() {\n    return {};\n  }\n});\n\n/***/ }),\n\n/***/ 544:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuex__ = __webpack_require__(60);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery__ = __webpack_require__(222);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_jquery__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils__ = __webpack_require__(1195);\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'addNode',\n  data: function data() {\n    return {\n      info: 'Asdf'\n    };\n  },\n\n  computed: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"c\" /* mapGetters */])({\n    visible: 'addNodeVisible',\n    clickPos: 'cyClickPos',\n    libHierarchy: 'libHierarchy',\n    cy: 'cy'\n  }), {\n    myModal: {\n      get: function get() {\n        return this.visible;\n      },\n      set: function set(value) {\n        if (value === true) {\n          this.show();\n        } else {\n          this.hide();\n        }\n      }\n    }\n  }),\n  methods: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"d\" /* mapMutations */])({\n    show: 'showAddNode',\n    hide: 'hideAddNode',\n    shownext: 'showEditNode',\n    setSelectedNodeId: 'setSelectedNodeId',\n    setSelectedNodeElem: 'setSelectedNodeElem'\n  }), {\n    handleOk: function handleOk() {\n      var $selected = __WEBPACK_IMPORTED_MODULE_2_jquery___default()('input[name=radiosInline]:checked');\n      this.addNode(JSON.parse($selected.val()), $selected.attr('key1'), $selected.attr('key2'));\n\n      var ele = document.getElementsByName('radiosInline');\n      for (var i = 0; i < ele.length; i++) {\n        ele[i].checked = false;\n      }\n\n      this.hide();\n      this.shownext();\n    },\n    addNode: function addNode(elem, key1, key2) {\n      console.log('addnode', elem, key1, key2);\n      var name = key1 + ' : ' + key2;\n      var newNode = {};\n      if (key2 === 'CSV' || key2 === 'Chemical') {\n        newNode = {\n          group: 'nodes',\n          data: { id: __WEBPACK_IMPORTED_MODULE_3__utils__[\"a\" /* default */].guid(), name: name, info: elem },\n          style: {\n            'content': 'data(name)',\n            'text-opacity': 0.5,\n            'text-valign': 'center',\n            'text-halign': 'right',\n            'background-color': '#000000'\n          },\n          position: { x: this.clickPos.x, y: this.clickPos.y }\n\n        };\n      }\n      if (key2 === 'Dimensionality Reduction') {\n        newNode = {\n          group: 'nodes',\n          data: { id: __WEBPACK_IMPORTED_MODULE_3__utils__[\"a\" /* default */].guid(), name: name, info: elem },\n          style: {\n            'content': 'data(name)',\n            'text-opacity': 0.5,\n            'text-valign': 'center',\n            'text-halign': 'right',\n            'background-color': '#aa0000'\n          },\n          position: { x: this.clickPos.x, y: this.clickPos.y }\n\n        };\n      }\n      if (key2 === 'Preprocessing' || key2 === 'Data Splitting') {\n        newNode = {\n          group: 'nodes',\n          data: { id: __WEBPACK_IMPORTED_MODULE_3__utils__[\"a\" /* default */].guid(), name: name, info: elem },\n          style: {\n            'content': 'data(name)',\n            'text-opacity': 0.5,\n            'text-valign': 'center',\n            'text-halign': 'right',\n            'background-color': '#0000aa'\n          },\n          position: { x: this.clickPos.x, y: this.clickPos.y }\n\n        };\n      }\n      if (key2 === 'Linear' || key2 === 'Neural Network' || key2 === 'Support Vector Machines') {\n        newNode = {\n          group: 'nodes',\n          data: { id: __WEBPACK_IMPORTED_MODULE_3__utils__[\"a\" /* default */].guid(), name: name, info: elem },\n          style: {\n            'content': 'data(name)',\n            'text-opacity': 0.5,\n            'text-valign': 'center',\n            'text-halign': 'right',\n            'background-color': '#aaaa00'\n          },\n          position: { x: this.clickPos.x, y: this.clickPos.y }\n\n        };\n      }\n      if (key2 === 'Selection' || key2 === 'Metrics') {\n        newNode = {\n          group: 'nodes',\n          data: { id: __WEBPACK_IMPORTED_MODULE_3__utils__[\"a\" /* default */].guid(), name: name, info: elem },\n          style: {\n            'content': 'data(name)',\n            'text-opacity': 0.5,\n            'text-valign': 'center',\n            'text-halign': 'right',\n            'background-color': '#00aa00'\n          },\n          position: { x: this.clickPos.x, y: this.clickPos.y }\n\n        };\n      }\n      if (key2 === 'Store Plot' || key2 === 'Store Data') {\n        newNode = {\n          group: 'nodes',\n          data: { id: __WEBPACK_IMPORTED_MODULE_3__utils__[\"a\" /* default */].guid(), name: name, info: elem },\n          style: {\n            'content': 'data(name)',\n            'text-opacity': 0.5,\n            'text-valign': 'center',\n            'text-halign': 'right',\n            'background-color': '#aa00aa'\n          },\n          position: { x: this.clickPos.x, y: this.clickPos.y }\n\n        };\n      }\n\n      this.setSelectedNodeId(newNode.data.id);\n      this.setSelectedNodeElem(newNode);\n      this.cy.add(newNode);\n    }\n  }),\n  mounted: function mounted() {}\n});\n\n/***/ }),\n\n/***/ 545:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuex__ = __webpack_require__(60);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash__ = __webpack_require__(304);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash__);\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'editNode',\n  data: function data() {\n    return {\n      host: '',\n      func: '',\n      funcm: '',\n      funcminputs: [],\n      funcmoutputs: [],\n      meths: [],\n      wparams: [],\n      isHidden: true,\n      isHidden2: true,\n      selec2ted: true,\n      btnclass1: 'btn btn-outline-primary',\n      btnclass2: 'btn btn-outline-primary',\n      fparams: []\n    };\n  },\n\n  computed: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"c\" /* mapGetters */])({\n    visible: 'editNodeVisible',\n    selectedNode: 'selectedNode',\n    funcMeta: 'funcMeta',\n    cy: 'cy'\n  }), {\n    myModal: {\n      get: function get() {\n        return this.visible;\n      },\n      set: function set(value) {\n        if (value === true) {\n          this.show();\n        } else {\n          this.hide();\n        }\n      }\n    }\n  }),\n  methods: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"d\" /* mapMutations */])({\n    show: 'showEditNode',\n    hide: 'hideEditNode',\n    resetSelectedNode: 'resetSelectedNode'\n  }), {\n    handleFuncChange: function handleFuncChange(host, func, meths) {\n      this.host = host;\n      this.func = func;\n      this.meths = meths;\n      this.isHidden = true;\n      this.isHidden2 = true;\n      this.wparams = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.cloneDeep(this.funcMeta[func].WParameters);\n      this.fparams = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.cloneDeep(this.funcMeta[func].FParameters);\n      if (this.meths === undefined) {\n        this.meths = ['data', 'obj'];\n      }\n      console.log('funchange', host, func, meths);\n      console.log('funchange', this.host, this.func, this.meths);\n      console.log('funchange', this.funcMeta[func]);\n    },\n\n    handleMethChange: function handleMethChange(param) {\n      console.log('In methchange', param, this.func);\n      console.log(this.funcMeta[this.func]['Methods'][param]);\n      if (param === 'obj') {\n        this.funcm = 'obj';\n        this.funcmoutputs = [{ 'name': 'obj' }];\n        this.funcminputs = [{ 'name': 'obj' }];\n      } else {\n        this.funcm = param;\n        this.funcmoutputs = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.cloneDeep(this.funcMeta[this.func]['Methods'][param]['outputs']);\n        this.funcminputs = __WEBPACK_IMPORTED_MODULE_2_lodash___default.a.cloneDeep(this.funcMeta[this.func]['Methods'][param]['inputs']);\n      }\n      console.log(this.funcminputs, this.funcmoutputs);\n    },\n    handleOk: function handleOk() {\n      var node = this.selectedNode;\n      node.elem.data.params = { wparams: this.wparams, fparams: this.fparams, meths: this.meths, funcm: this.funcm, inp: this.funcminputs, op: this.funcmoutputs };\n      node.elem.data.func = this.func;\n      node.elem.data.host = this.host;\n      this.cy.add(node.elem);\n\n      this.hide();\n      this.resetSelectedNode();\n    },\n    handleCancel: function handleCancel() {\n      this.hide();\n      this.resetSelectedNode();\n    }\n  }),\n  watch: {\n    selectedNode: function selectedNode(newVal, oldVal) {\n      if (this.selectedNode.hasOwnProperty('elem')) {\n        if (this.selectedNode.elem.data.hasOwnProperty('params')) {\n          this.func = this.selectedNode.elem.data.func;\n          this.funcm = this.selectedNode.elem.data.params.funcm;\n          console.log('selected node data', this.selectedNode.elem.data);\n          setTimeout(function () {\n            var ele = document.getElementById(this.func);\n            ele.checked = true;\n            var ele2 = document.getElementById(this.funcm);\n            ele2.checked = true;\n          }.bind(this), 500);\n          this.wparams = this.selectedNode.elem.data.params.wparams;\n          this.fparams = this.selectedNode.elem.data.params.fparams;\n          this.meths = this.selectedNode.elem.data.params.meths;\n        }\n      } else {\n        this.func = '';\n        this.funcm = '';\n        this.wparams = [];\n        this.fparams = [];\n        this.meths = [];\n      }\n    }\n  },\n  mounted: function mounted() {}\n});\n\n/***/ }),\n\n/***/ 546:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuex__ = __webpack_require__(60);\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'editEdge',\n  data: function data() {\n    return {\n      inputs: [],\n      outputs: [],\n      isHidden2: true\n    };\n  },\n\n  computed: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"c\" /* mapGetters */])({\n    visible: 'editEdgeVisible',\n    selectedEdge: 'selectedEdge',\n    funcMeta: 'funcMeta',\n    cy: 'cy'\n  }), {\n    myModal: {\n      get: function get() {\n        return this.visible;\n      },\n      set: function set(value) {\n        if (value === true) {\n          this.show();\n        } else {\n          this.hide();\n        }\n      }\n    }\n  }),\n  methods: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"d\" /* mapMutations */])({\n    show: 'showEditEdge',\n    hide: 'hideEditEdge'\n  }), {\n    handleOk: function handleOk() {\n      var edge = this.selectedEdge;\n      edge.data.inputs = this.inputs;\n      edge.data.outputs = this.outputs;\n      this.cy.add(edge);\n\n      this.hide();\n    }\n  }),\n  watch: {\n    selectedEdge: function selectedEdge(newVal, oldVal) {\n\n      if (newVal.data.hasOwnProperty('inputs')) {\n        this.inputs = newVal.data.inputs;\n        this.outputs = newVal.data.outputs;\n      } else {\n        this.inputs = [];\n        this.outputs = [];\n      }\n    }\n  },\n  mounted: function mounted() {\n    console.log('selectedEdge mounted');\n    console.log(this.selectedEdge);\n  }\n});\n\n/***/ }),\n\n/***/ 547:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuex__ = __webpack_require__(60);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery__ = __webpack_require__(222);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_jquery__);\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'loadGraph',\n  data: function data() {\n    return {\n      graphId: ''\n    };\n  },\n\n  computed: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"c\" /* mapGetters */])({\n    visible: 'loadGraphVisible',\n    rootgraphs: 'graph/rootgraphs',\n    usergraphs: 'graph/usergraphs',\n    cy: 'cy'\n  }), {\n    myModal: {\n      get: function get() {\n        return this.visible;\n      },\n      set: function set(value) {\n        if (value === true) {\n          this.show();\n        } else {\n          this.hide();\n        }\n      }\n    }\n  }),\n  methods: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"d\" /* mapMutations */])({\n    show: 'showLoadGraph',\n    hide: 'hideLoadGraph'\n  }), Object(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"b\" /* mapActions */])({\n    updateRootGraphs: 'graph/updateRootGraphs',\n    updateUserGraphs: 'graph/updateUserGraphs',\n    setCurrentGraphType: 'graph/setCurrentGraphType',\n    setCurrentGraphId: 'graph/setCurrentGraphId',\n    setCurrentGraphTitle: 'graph/setCurrentGraphTitle'\n  }), {\n    handleOk: function handleOk() {\n      var val = __WEBPACK_IMPORTED_MODULE_2_jquery___default()('.sections.active').first().attr('id');\n      var graphId = __WEBPACK_IMPORTED_MODULE_2_jquery___default()('#' + val + 'graphs option:selected').val();\n      if (graphId !== undefined) {\n        this.loadGraph(val, graphId);\n      }\n      this.hide();\n    },\n    openView: function openView(view) {\n      __WEBPACK_IMPORTED_MODULE_2_jquery___default()('.graphviews').addClass('hiddenView');\n      __WEBPACK_IMPORTED_MODULE_2_jquery___default()('#' + view).removeClass('hiddenView');\n    },\n    FindGraphById: function FindGraphById(graph) {\n      if (String(graph.graph_id) === String(this.graphId)) {\n        return graph;\n      }\n    },\n    loadGraph: function loadGraph(type, graphId) {\n      console.log(graphId);\n      this.graphId = graphId;\n      var graph = '';\n      if (type === 'root') {\n        graph = this.rootgraphs.find(this.FindGraphById, graphId);\n      } else if (type === 'user') {\n        graph = this.usergraphs.find(this.FindGraphById, graphId);\n      }\n      var graphData = JSON.parse(graph.content);\n      for (var nodekey in graphData.elements.nodes) {\n        if (graphData.elements.nodes[nodekey]['data']['name']) {\n          var key2 = graphData.elements.nodes[nodekey]['data']['name'].split(':')[1];\n          console.log('sskey2', key2);\n          if (key2 === ' CSV' || key2 === ' Chemical') {\n            graphData.elements.nodes[nodekey]['style'] = { 'background-color': '#000' };\n          }\n          if (key2 === ' Dimensionality Reduction') {\n            graphData.elements.nodes[nodekey]['style'] = { 'background-color': '#a00' };\n          }\n          if (key2 === ' Preprocessing' || key2 === ' Data Splitting') {\n            graphData.elements.nodes[nodekey]['style'] = { 'background-color': '#00a' };\n          }\n          if (key2 === ' Linear' || key2 === ' Neural Network' || key2 === ' Support Vector Machines') {\n            graphData.elements.nodes[nodekey]['style'] = { 'background-color': '#aa0' };\n          }\n          if (key2 === ' Selection' || key2 === ' Metrics') {\n            graphData.elements.nodes[nodekey]['style'] = { 'background-color': '#0a0' };\n          }\n          if (key2 === ' Store Data' || key2 === ' Store Plot') {\n            graphData.elements.nodes[nodekey]['style'] = { 'background-color': '#a0a' };\n          }\n        } else {\n          continue;\n        }\n      }\n      this.cy.json(graphData);\n      console.log('frm load', graphData);\n      this.setCurrentGraphId(graphId);\n      this.setCurrentGraphType(type);\n      this.setCurrentGraphTitle(graph.title);\n    }\n  }),\n  mounted: function mounted() {\n    __WEBPACK_IMPORTED_MODULE_2_jquery___default()('.sections').click(function () {\n      __WEBPACK_IMPORTED_MODULE_2_jquery___default()('.active').removeClass('active');\n      __WEBPACK_IMPORTED_MODULE_2_jquery___default()(this).addClass('active');\n    });\n\n    this.updateRootGraphs();\n    this.updateUserGraphs();\n  }\n});\n\n/***/ }),\n\n/***/ 548:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__ = __webpack_require__(309);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vuex__ = __webpack_require__(60);\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'saveGraph',\n  data: function data() {\n    return {\n      newGraphTitle: 'Untitled'\n    };\n  },\n\n  computed: __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_2_vuex__[\"c\" /* mapGetters */])({\n    visible: 'saveGraphVisible',\n    clickPos: 'cyClickPos',\n    libHierarchy: 'libHierarchy',\n    cy: 'cy',\n    currentGraphId: 'graph/currentGraphId',\n    currentGraphType: 'graph/currentGraphType',\n    currentGraphTitle: 'graph/currentGraphTitle'\n  }), {\n    myModal: {\n      get: function get() {\n        return this.visible;\n      },\n      set: function set(value) {\n        if (value === true) {\n          this.show();\n        } else {\n          this.hide();\n        }\n      }\n    }\n  }),\n  methods: __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_2_vuex__[\"d\" /* mapMutations */])({\n    show: 'showSaveGraph',\n    hide: 'hideSaveGraph'\n  }), Object(__WEBPACK_IMPORTED_MODULE_2_vuex__[\"b\" /* mapActions */])({\n    saveCurrentUserGraph: 'graph/saveCurrentUserGraph'\n  }), {\n    handleOk: function handleOk() {\n      var data = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(this.cy.json());\n\n      this.saveCurrentUserGraph({ 'title': this.newGraphTitle, 'content': data });\n      this.hide();\n    },\n    printCyJson: function printCyJson() {\n      console.log(this.currentGraphId);\n      console.log(this.currentGraphType);\n    }\n  }),\n  mounted: function mounted() {}\n});\n\n/***/ }),\n\n/***/ 549:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__ = __webpack_require__(309);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vuex__ = __webpack_require__(60);\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'updateGraph',\n  data: function data() {\n    return {\n      info: 'Asdf'\n    };\n  },\n\n  computed: __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_2_vuex__[\"c\" /* mapGetters */])({\n    visible: 'updateGraphVisible',\n    clickPos: 'cyClickPos',\n    libHierarchy: 'libHierarchy',\n    cy: 'cy',\n    currentGraphId: 'graph/currentGraphId',\n    currentGraphType: 'graph/currentGraphType'\n  }), {\n    myModal: {\n      get: function get() {\n        return this.visible;\n      },\n      set: function set(value) {\n        if (value === true) {\n          this.show();\n        } else {\n          this.hide();\n        }\n      }\n    }\n  }),\n  methods: __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_2_vuex__[\"d\" /* mapMutations */])({\n    show: 'showUpdateGraph',\n    hide: 'hideUpdateGraph',\n    showSave: 'showSaveGraph'\n  }), Object(__WEBPACK_IMPORTED_MODULE_2_vuex__[\"b\" /* mapActions */])({\n    updateCurrentUserGraph: 'graph/updateCurrentUserGraph'\n  }), {\n    handleCancel: function handleCancel() {\n      this.hide();\n      this.showSave();\n    },\n    handleOk: function handleOk() {\n      if (this.currentGraphType === 'user') {\n        var data = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(this.cy.json());\n        this.updateCurrentUserGraph({ 'id': this.currentGraphId, 'content': data });\n      }\n      this.hide();\n    },\n    printCyJson: function printCyJson() {\n      console.log(this.currentGraphId);\n      console.log(this.currentGraphType);\n    }\n  }),\n  mounted: function mounted() {}\n});\n\n/***/ }),\n\n/***/ 550:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__ = __webpack_require__(309);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_vuex__ = __webpack_require__(60);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_form_wizard__ = __webpack_require__(1214);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_vue_form_wizard___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_vue_form_wizard__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_vue_form_wizard_dist_vue_form_wizard_min_css__ = __webpack_require__(1215);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_vue_form_wizard_dist_vue_form_wizard_min_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_vue_form_wizard_dist_vue_form_wizard_min_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_FileReader_vue__ = __webpack_require__(1216);\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'wizard',\n  components: {\n    FormWizard: __WEBPACK_IMPORTED_MODULE_3_vue_form_wizard__[\"FormWizard\"],\n    TabContent: __WEBPACK_IMPORTED_MODULE_3_vue_form_wizard__[\"TabContent\"],\n    FileReader: __WEBPACK_IMPORTED_MODULE_5__components_FileReader_vue__[\"a\" /* default */]\n  },\n  data: function data() {\n    return {\n      text: '',\n      info: 'Startup Wizard',\n      icon: {\n        'Enter': 'fa fa-database',\n        'Represent': 'fa fa-cubes',\n        'Prepare': 'fa fa-magic',\n        'Model': 'fa fa-dashboard',\n        'Search': 'fa fa-search',\n        'Visualize': 'fa fa-bar-chart',\n        'Store': 'fa fa-file',\n        'Finish': 'fa fa-check'\n      },\n      selectedFunction: {},\n      activeIndex: 0,\n      moduleCount: [],\n      selected: ''\n    };\n  },\n\n  computed: __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_2_vuex__[\"c\" /* mapGetters */])({\n    visible: 'wizardVisible',\n    clickPos: 'cyClickPos',\n    libHierarchy: 'libHierarchy',\n    wizHierarchy: 'wizHierarchy',\n    libMeta: 'libMeta',\n    libUINames: 'libUINames',\n    cy: 'cy',\n    currentGraphId: 'graph/currentGraphId',\n    currentGraphType: 'graph/currentGraphType'\n  }), {\n    myModal: {\n      get: function get() {\n        return this.visible;\n      },\n      set: function set(value) {\n        if (value === true) {\n          this.show();\n        } else {\n          this.hide();\n        }\n      }\n    }\n  }),\n  methods: __WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_2_vuex__[\"d\" /* mapMutations */])({\n    showWizard: 'showWizard',\n    hideWizard: 'hideWizard'\n  }), {\n    show: function show() {\n      this.showWizard();\n    },\n    hide: function hide() {\n      this.$refs.formWizard.reset();\n      this.hideWizard();\n    },\n    handleCancel: function handleCancel() {\n      this.hide();\n    },\n    handleOk: function handleOk() {\n      this.hide();\n    },\n    clearDesc: function clearDesc() {\n      this.selectedFunction = '';\n      return true;\n    },\n    setActiveIndex: function setActiveIndex(prevIndex, nextIndex) {\n      this.activeIndex = nextIndex;\n    }\n  }),\n  beforeCreate: function beforeCreate() {\n    console.log('beforeCreate start');\n    console.log(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(this.libHierarchy));\n    console.log('beforeCreate end');\n  },\n  mounted: function mounted() {\n    console.log('mounted start');\n    console.log(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(this.libHierarchy));\n    console.log('mounted end');\n  }\n});\n\n/***/ }),\n\n/***/ 551:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'fileReader',\n  methods: {\n    loadTextFromFile: function loadTextFromFile(ev) {\n      var _this = this;\n\n      var file = ev.target.files[0];\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        return _this.$emit('load', e.target.result);\n      };\n      reader.readAsText(file);\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 552:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuex__ = __webpack_require__(60);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery__ = __webpack_require__(222);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_jquery__);\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'help',\n  data: function data() {\n    return {\n      graphId: ''\n    };\n  },\n\n  computed: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"c\" /* mapGetters */])({\n    visible: 'helpVisible',\n    rootgraphs: 'graph/rootgraphs',\n    usergraphs: 'graph/usergraphs',\n    cy: 'cy'\n  }), {\n    myModal: {\n      get: function get() {\n        return this.visible;\n      },\n      set: function set(value) {\n        if (value === true) {\n          this.show();\n        } else {\n          this.hide();\n        }\n      }\n    }\n  }),\n  methods: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"d\" /* mapMutations */])({\n    show: 'showHelp',\n    hide: 'hideHelp'\n  }), Object(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"b\" /* mapActions */])({\n    updateRootGraphs: 'graph/updateRootGraphs',\n    updateUserGraphs: 'graph/updateUserGraphs',\n    setCurrentGraphType: 'graph/setCurrentGraphType',\n    setCurrentGraphId: 'graph/setCurrentGraphId',\n    setCurrentGraphTitle: 'graph/setCurrentGraphTitle'\n  }), {\n    handleOk: function handleOk() {\n      var val = __WEBPACK_IMPORTED_MODULE_2_jquery___default()('.sections.active').first().attr('id');\n      var graphId = __WEBPACK_IMPORTED_MODULE_2_jquery___default()('#' + val + 'graphs option:selected').val();\n      if (graphId !== undefined) {\n        this.help(val, graphId);\n      }\n      this.hide();\n    },\n    openView: function openView(view) {\n      __WEBPACK_IMPORTED_MODULE_2_jquery___default()('.graphviews').addClass('hiddenView');\n      __WEBPACK_IMPORTED_MODULE_2_jquery___default()('#' + view).removeClass('hiddenView');\n    }\n  }),\n  mounted: function mounted() {\n    __WEBPACK_IMPORTED_MODULE_2_jquery___default()('.sections').click(function () {\n      __WEBPACK_IMPORTED_MODULE_2_jquery___default()('.active').removeClass('active');\n      __WEBPACK_IMPORTED_MODULE_2_jquery___default()(this).addClass('active');\n    });\n\n    this.updateRootGraphs();\n    this.updateUserGraphs();\n  }\n});\n\n/***/ }),\n\n/***/ 553:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Table_vue__ = __webpack_require__(1226);\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'tables',\n  components: { cTable: __WEBPACK_IMPORTED_MODULE_0__Table_vue__[\"a\" /* default */] }\n});\n\n/***/ }),\n\n/***/ 554:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuex__ = __webpack_require__(60);\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'c-table',\n  props: {\n    caption: {\n      type: String,\n      default: 'Table'\n    },\n    hover: {\n      type: Boolean,\n      default: false\n    },\n    striped: {\n      type: Boolean,\n      default: false\n    },\n    bordered: {\n      type: Boolean,\n      default: false\n    },\n    small: {\n      type: Boolean,\n      default: false\n    },\n    fixed: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      items: [{ username: 'Samppa Nori', registered: '2012/01/01', role: 'Member', status: 'Active' }, { username: 'Estavan Lykos', registered: '2012/02/01', role: 'Staff', status: 'Banned' }, { username: 'Chetan Mohamed', registered: '2012/02/01', role: 'Admin', status: 'Inactive' }, { username: 'Derick Maximinus', registered: '2012/03/01', role: 'Member', status: 'Pending' }, { username: 'Friderik Dávid', registered: '2012/01/21', role: 'Staff', status: 'Active' }, { username: 'Yiorgos Avraamu', registered: '2012/01/01', role: 'Member', status: 'Active' }, { username: 'Avram Tarasios', registered: '2012/02/01', role: 'Staff', status: 'Banned' }, { username: 'Quintin Ed', registered: '2012/02/01', role: 'Admin', status: 'Inactive' }, { username: 'Enéas Kwadwo', registered: '2012/03/01', role: 'Member', status: 'Pending' }, { username: 'Agapetus Tadeáš', registered: '2012/01/21', role: 'Staff', status: 'Active' }, { username: 'Carwyn Fachtna', registered: '2012/01/01', role: 'Member', status: 'Active' }, { username: 'Nehemiah Tatius', registered: '2012/02/01', role: 'Staff', status: 'Banned' }, { username: 'Ebbe Gemariah', registered: '2012/02/01', role: 'Admin', status: 'Inactive' }, { username: 'Eustorgios Amulius', registered: '2012/03/01', role: 'Member', status: 'Pending' }, { username: 'Leopold Gáspár', registered: '2012/01/21', role: 'Staff', status: 'Active' }, { username: 'Pompeius René', registered: '2012/01/01', role: 'Member', status: 'Active' }, { username: 'Paĉjo Jadon', registered: '2012/02/01', role: 'Staff', status: 'Banned' }, { username: 'Micheal Mercurius', registered: '2012/02/01', role: 'Admin', status: 'Inactive' }, { username: 'Ganesha Dubhghall', registered: '2012/03/01', role: 'Member', status: 'Pending' }, { username: 'Hiroto Šimun', registered: '2012/01/21', role: 'Staff', status: 'Active' }, { username: 'Vishnu Serghei', registered: '2012/01/01', role: 'Member', status: 'Active' }, { username: 'Zbyněk Phoibos', registered: '2012/02/01', role: 'Staff', status: 'Banned' }, { username: 'Einar Randall', registered: '2012/02/01', role: 'Admin', status: 'Inactive' }, { username: 'Félix Troels', registered: '2012/03/21', role: 'Staff', status: 'Active' }, { username: 'Aulus Agmundr', registered: '2012/01/01', role: 'Member', status: 'Pending' }],\n      fields: [{ key: 'username' }, { key: 'registered' }, { key: 'role' }, { key: 'status' }],\n      graphruns_fields: [{ key: 'id' }, { key: 'graph' }, { key: 'start_time' }, { key: 'status' }, { key: 'actions' }],\n      currentPage: 1,\n      perPage: 10,\n      totalRows: 0\n    };\n  },\n  computed: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"c\" /* mapGetters */])({\n    graphruns: 'graph/graphruns'\n  })),\n  methods: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"b\" /* mapActions */])({\n    setGraphRuns: 'graph/setGraphRuns'\n  }), {\n    working: function working(msg) {\n      alert(msg);\n    },\n    getBadge: function getBadge(status) {\n      return status === 'Started' ? 'secondary' : status === 'Success' ? 'success' : status === 'NA' ? 'warning' : status === 'Error' ? 'danger' : 'primary';\n    },\n    getRowCount: function getRowCount(items) {\n      return items.length;\n    }\n  }),\n  mounted: function mounted() {\n    this.setGraphRuns();\n  }\n});\n\n/***/ }),\n\n/***/ 555:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_is_nan__ = __webpack_require__(1231);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_is_nan___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_is_nan__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__statnett_vue_plotly__ = __webpack_require__(1234);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__statnett_vue_plotly___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__statnett_vue_plotly__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_d3__ = __webpack_require__(2119);\n\n\n\n\n\nvar plotly = __webpack_require__(2351);\nconsole.log(plotly);\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'visual',\n  components: {\n    VuePlotly: __WEBPACK_IMPORTED_MODULE_1__statnett_vue_plotly___default.a\n  },\n  data: function data() {\n    return {\n      ata: [{ 'x': [1, 3], 'y': [2, 4] }],\n      layout: { 'mode': 'markers' },\n      options: { 'type': 'scatter' },\n      s1selected: null,\n      s2selected: null,\n      channel_name: '',\n      channel_fields: [],\n      channel_entries: [],\n      parse_header: [],\n      parse_csv: [],\n      eda: [],\n      rawData: [],\n      sortOrders: {},\n      sortKey: '',\n      selec1ted: false,\n      selec2ted: true,\n      selec3ted: true,\n      selec4ted: true,\n      selec5ted: true\n    };\n  },\n\n  filters: {\n    capitalize: function capitalize(str) {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n  },\n  methods: {\n    sortBy: function sortBy(key) {\n      var vm = this;\n      vm.sortKey = key;\n      vm.sortOrders[key] = vm.sortOrders[key] * -1;\n    },\n    csvJSON: function csvJSON(csv) {\n      var vm = this;\n      var lines = csv.split('\\n');\n      var result = [];\n      var headers = lines[0].split(',');\n      vm.parse_header = lines[0].split(',');\n      lines[0].split(',').forEach(function (key) {\n        vm.sortOrders[key] = 1;\n      });\n      lines.map(function (line, indexLine) {\n        if (indexLine < 1) return;\n        var obj = {};\n        var currentline = line.split(',');\n        headers.map(function (header, indexHeader) {\n          obj[header] = currentline[indexHeader];\n        });\n        result.push(obj);\n      });\n      result.pop();\n      return result;\n    },\n    doEDA: function doEDA(csv) {\n      var lines = csv.split('\\n');\n      var totalRec = lines.length - 2;\n      var headers = lines[0].split(',');\n      var totalCol = headers.length - 1;\n      var data = [];\n      for (var i = 1; i < totalRec; i++) {\n        var currentline = lines[i].split(',');\n        var dataObj = {};\n        for (var j = 0; j < totalCol; j++) {\n          if (__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_is_nan___default()(parseInt(currentline[j]))) {\n            dataObj[headers[j]] = currentline[j];\n          } else {\n            dataObj[headers[j]] = parseFloat(currentline[j]);\n          }\n        }\n        data.push(dataObj);\n      }\n      var eda = [];\n      for (j = 0; j < totalCol; j++) {\n        var extent = __WEBPACK_IMPORTED_MODULE_2_d3__[\"b\" /* extent */](data, function (d) {\n          return d[headers[j]];\n        });\n        var avg = __WEBPACK_IMPORTED_MODULE_2_d3__[\"c\" /* mean */](data, function (d) {\n          return d[headers[j]];\n        });\n        var med = __WEBPACK_IMPORTED_MODULE_2_d3__[\"d\" /* median */](data, function (d) {\n          return d[headers[j]];\n        });\n        var sD = __WEBPACK_IMPORTED_MODULE_2_d3__[\"a\" /* deviation */](data, function (d) {\n          return d[headers[j]];\n        });\n        eda.push({\n          'Column': headers[j],\n          'Min Max': extent,\n          'Average': avg,\n          'Median': med,\n          'Standard Deviation': sD\n        });\n      }\n      console.log('data', data);\n      console.log('eda', eda);\n      this.rawData.push(data);\n      return eda;\n    },\n    loadCSV: function loadCSV(e) {\n      var vm = this;\n      if (window.FileReader) {\n        var reader = new FileReader();\n        reader.readAsText(e.target.files[0]);\n\n        reader.onload = function (event) {\n          var csv = event.target.result;\n          vm.parse_csv = vm.csvJSON(csv);\n          vm.eda = vm.doEDA(csv);\n          console.log(vm.parse_csv[0]);\n        };\n        reader.onerror = function (evt) {\n          if (evt.target.error.name === 'NotReadableError') {\n            alert('Can not read file !');\n          }\n        };\n      } else {\n        alert('FileReader are not supported in this browser.');\n      }\n    },\n    selecTion: function selecTion(e) {\n      this.selec1ted = true;\n      this.selec2ted = true;\n      this.selec3ted = true;\n      this.selec4ted = true;\n      this.selec5ted = true;\n      var chng = 'selec' + e + 'ted';\n      this[chng] = false;\n    },\n    Plot: function Plot(x, y, type) {\n      var rdd = this.rawData[0];\n      if (x) {\n        var xx = [];\n        for (var l = 0; l < rdd.length; l++) {\n          xx.push(rdd[l][x]);\n        }\n        this.ata[0]['x'] = xx;\n      }\n      if (y) {\n        var yy = [];\n        for (var k = 0; k < rdd.length; k++) {\n          yy.push(rdd[k][y]);\n        }\n        this.ata[0]['y'] = yy;\n      }\n    }\n  }\n\n});\n\n/***/ }),\n\n/***/ 749:\n/***/ (function(module, exports) {\n\nmodule.exports = [\"inherit\",\"initial\",\"unset\"]\n\n/***/ }),\n\n/***/ 750:\n/***/ (function(module, exports) {\n\nmodule.exports = [\"caption\",\"icon\",\"menu\",\"message-box\",\"small-caption\",\"status-bar\"]\n\n/***/ }),\n\n/***/ 751:\n/***/ (function(module, exports) {\n\nmodule.exports = [\"normal\",\"bold\",\"bolder\",\"lighter\",\"100\",\"200\",\"300\",\"400\",\"500\",\"600\",\"700\",\"800\",\"900\"]\n\n/***/ }),\n\n/***/ 752:\n/***/ (function(module, exports) {\n\nmodule.exports = [\"normal\",\"italic\",\"oblique\"]\n\n/***/ }),\n\n/***/ 753:\n/***/ (function(module, exports) {\n\nmodule.exports = [\"normal\",\"condensed\",\"semi-condensed\",\"extra-condensed\",\"ultra-condensed\",\"expanded\",\"semi-expanded\",\"extra-expanded\",\"ultra-expanded\"]\n\n/***/ }),\n\n/***/ 901:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'Page404'\n});\n\n/***/ }),\n\n/***/ 902:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'Page500'\n});\n\n/***/ }),\n\n/***/ 903:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vuex__ = __webpack_require__(60);\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'Login',\n  data: function data() {\n    return {\n      user: '',\n      pass: ''\n    };\n  },\n\n  computed: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"c\" /* mapGetters */])({\n    loginFailed: 'auth/loginFailed'\n  })),\n  methods: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, Object(__WEBPACK_IMPORTED_MODULE_1_vuex__[\"b\" /* mapActions */])({\n    authLogin: 'auth/login'\n  }), {\n    login: function login(username, password) {\n      var _this = this;\n\n      this.authLogin({ username: username, password: password }).then(function () {\n        return _this.$router.push('/');\n      });\n    }\n  })\n});\n\n/***/ }),\n\n/***/ 904:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'Register'\n});\n\n/***/ }),\n\n/***/ 905:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(280);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_bootstrap_vue__ = __webpack_require__(907);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__App__ = __webpack_require__(1014);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__router__ = __webpack_require__(1018);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__store__ = __webpack_require__(488);\n\n\n\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */].use(__WEBPACK_IMPORTED_MODULE_1_bootstrap_vue__[\"a\" /* default */]);\n\nnew __WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */]({\n  el: '#app',\n  router: __WEBPACK_IMPORTED_MODULE_3__router__[\"a\" /* default */],\n  store: __WEBPACK_IMPORTED_MODULE_4__store__[\"a\" /* default */],\n  template: '<App/>',\n  components: {\n    App: __WEBPACK_IMPORTED_MODULE_2__App__[\"a\" /* default */]\n  }\n});\n\n/***/ }),\n\n/***/ 939:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 957:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n\n},[905]);\n\n\n// WEBPACK FOOTER //\n// static/js/app.49794645c0bdc1ce3ce8.js","function injectStyle (context) {\n  require(\"!!../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true,\\\"alias\\\":{\\\"../img\\\":\\\"../static/img\\\"}}!../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-5b045a7c\\\",\\\"scoped\\\":false,\\\"sourceMap\\\":false}!../node_modules/vue-loader/lib/selector?type=styles&index=0!./App.vue\")\n  require(\"!!../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true,\\\"alias\\\":{\\\"../img\\\":\\\"../static/img\\\"}}!../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-5b045a7c\\\",\\\"scoped\\\":false,\\\"sourceMap\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../node_modules/vue-loader/lib/selector?type=styles&index=1!./App.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\nimport __vue_script__ from \"!!babel-loader!../node_modules/vue-loader/lib/selector?type=script&index=0!./App.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-5b045a7c\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../node_modules/vue-loader/lib/selector?type=template&index=0!./App.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/App.vue\n// module id = 1014\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('router-view')}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-5b045a7c\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\n// module id = 1017\n// module chunks = 1","import Vue from 'vue'\nimport Router from 'vue-router'\n\n// Store\nimport store from '../store'\n\n// Containers\nimport Full from '@/containers/Full'\n\n// Views\nimport Landing from '@/views/Landing'\nimport Dashboard from '@/views/Dashboard'\nimport Results from '@/views/Results'\nimport Visual from '@/views/Visual'\n// Views - Pages\nimport Page404 from '@/views/pages/Page404'\nimport Page500 from '@/views/pages/Page500'\nimport Login from '@/views/pages/Login'\nimport Register from '@/views/pages/Register'\n\nVue.use(Router)\n\nconst redirectLogout = (to, from, next) => {\n  store.dispatch('auth/logout')\n    .then(() => next('/pages/login'))\n}\n\nconst router = new Router({\n  mode: 'hash',\n  base: __dirname,\n  linkActiveClass: 'open active',\n  scrollBehavior: () => ({ y: 0 }),\n  routes: [\n    {\n      path: '/',\n      redirect: '/Landing',\n      name: 'Home',\n      component: Full,\n      children: [\n        {\n          path: 'landing',\n          name: 'Toolkit',\n          component: Landing,\n          meta: {\n            requiresAuth: true\n          }\n        },\n        {\n          path: 'dashboard',\n          name: 'Dashboard',\n          component: Dashboard,\n          meta: {\n            requiresAuth: true\n          }\n        },\n        {\n          path: 'results',\n          name: 'Results',\n          component: Results,\n          meta: {\n            requiresAuth: true\n          }\n        },\n        {\n          path: 'visual',\n          name: 'Visual',\n          component: Visual,\n          meta: {\n            requiresAuth: true\n          }\n        }\n      ]\n    },\n    {\n      path: '/pages',\n      redirect: '/pages/404',\n      name: 'Pages',\n      component: {\n        render (c) { return c('router-view') }\n      },\n      children: [\n        {\n          path: '404',\n          name: 'Page404',\n          component: Page404\n        },\n        {\n          path: '500',\n          name: 'Page500',\n          component: Page500\n        },\n        {\n          path: 'login',\n          name: 'Login',\n          component: Login,\n          meta: {\n            requiresUnauth: true\n          }\n        },\n        {\n          path: 'register',\n          name: 'Register',\n          component: Register\n        }\n      ]\n    },\n    {\n      path: '/logout',\n      beforeEnter: redirectLogout\n    }\n  ]\n})\n\nrouter.beforeEach((to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    store.dispatch('auth/initialize')\n      .then(() => {\n        if (!store.getters['auth/isAuthenticated']) {\n          next('/pages/login')\n        } else {\n          next()\n        }\n      })\n  } else if (to.matched.some(record => record.meta.requiresUnauth)) {\n    store.dispatch('auth/initialize')\n      .then(() => {\n        if (store.getters['auth/isAuthenticated']) {\n          next('/pages/dashboard')\n        } else {\n          next()\n        }\n      })\n  } else {\n    next() // make sure to always call next()!\n  }\n})\n\nexport default router\n\n\n\n// WEBPACK FOOTER //\n// ./src/router/index.js","import cytoscape from '../../api/cytoscape'\nimport session from '../../api/session'\nimport _utils from './_utils'\nimport _ from 'lodash'\n// import get_sklearn_linear from '../../api/jsons/sklearn_linear_model'\n// import sklearnModelSelection from '../../api/jsons/sklearnModelSelection'\n\n// initial state\nconst state = {\n  cytoscapeConfig: {},\n  edgehandlesConfig: {},\n  contextMenusConfig: {},\n  funcMeta: {},\n  libMeta: {},\n  libUINames: {},\n  cy: {},\n  cyClickPos: {\n    x: 20,\n    y: 20\n  },\n  libHierarchy: {},\n  wizHierarchy: {},\n  selectedNode: {},\n  selectedEdge: {},\n  initGraph: {}\n}\n\n// getters\nconst getters = {\n  cytoscapeConfig: state => state.cytoscapeConfig,\n  edgehandlesConfig: state => state.edgehandlesConfig,\n  contextMenusConfig: state => state.contextMenusConfig,\n  libHierarchy: state => state.libHierarchy,\n  wizHierarchy: state => state.wizHierarchy,\n  funcMeta: state => state.funcMeta,\n  libMeta: state => state.libMeta,\n  libUINames: state => state.libUINames,\n  elements: state => state.cy.elements,\n  cy: state => state.cy,\n  cyClickPos: state => state.cyClickPos,\n  selectedNode: state => state.selectedNode,\n  selectedEdge: state => state.selectedEdge,\n  initGraph: state => state.initGraph\n}\n\n// actions\nconst actions = {\n  setCytoscapeInitConfig ({ commit }, container) {\n    return new Promise((resolve, reject) => {\n      cytoscape.getCytoscapeInitConfig(cytoscapeConfig => {\n        cytoscapeConfig.container = container\n        commit('setCytoscapeConfig', cytoscapeConfig)\n        resolve()\n      })\n    })\n  },\n\n  setEdgehandlesConfig ({ commit }, self) {\n    return new Promise((resolve, reject) => {\n      cytoscape.getEdgehandlesConfig(edgehandlesConfig => {\n        edgehandlesConfig.complete = _utils.getEdgeDropFunction(self)\n        commit('setEdgehandlesConfig', edgehandlesConfig)\n        resolve()\n      })\n    })\n  },\n\n  setLibHierarchy ({ commit }) {\n    return new Promise((resolve, reject) => {\n      // sklearnModelSelection.getSklearnModelSelection(libHierarchy => {\n      //   commit('setLibHierarchy', libHierarchy)\n      //   commit('setWizHierarchy', libHierarchy)\n      //   resolve()\n      // })\n      cytoscape.getLibHierarchy(libHierarchy => {\n        commit('setLibHierarchy', libHierarchy)\n        commit('setWizHierarchy', libHierarchy)\n        resolve()\n      })\n    })\n  },\n\n  setFuncMeta ({ commit }) {\n    return new Promise((resolve, reject) => {\n      cytoscape.getFuncMeta(funcMeta => {\n        commit('setFuncMeta', funcMeta)\n        resolve()\n      })\n    })\n  },\n\n  setLibMeta ({ commit }) {\n    return new Promise((resolve, reject) => {\n      cytoscape.getLibMeta(libMeta => {\n        commit('setLibMeta', libMeta)\n        resolve()\n      })\n    })\n  },\n\n  setLibUINames ({ commit }) {\n    return new Promise((resolve, reject) => {\n      cytoscape.getlibUINames(libUINames => {\n        commit('setLibUINames', libUINames)\n        resolve()\n      })\n    })\n  },\n\n  setContextMenusConfig ({ commit }, self) {\n    return new Promise((resolve, reject) => {\n      cytoscape.getContextMenusConfig(contextMenusConfig => {\n        contextMenusConfig.menuItems[0].onClickFunction = _utils.getEditNodeOnClickFunction(self)\n        contextMenusConfig.menuItems[1].onClickFunction = _utils.getEditEdgeOnClickFunction(self)\n        contextMenusConfig.menuItems[2].onClickFunction = _utils.getRemoveNodeOnClickFunction(self)\n        contextMenusConfig.menuItems[3].onClickFunction = _utils.getRemoveEdgeOnClickFunction(self)\n        contextMenusConfig.menuItems[4].onClickFunction = _utils.getAddNodeOnClickFunction(self)\n        commit('setContextMenusConfig', contextMenusConfig)\n        resolve()\n      })\n    })\n  },\n\n  setCy ({ commit }, cyObj) {\n    return new Promise((resolve, reject) => {\n      commit('setCy', cyObj)\n      resolve()\n    })\n  },\n\n  setInitGraph ({ commit }) {\n    return new Promise((resolve, reject) => {\n      session.get('/api/graphs/49')\n        .then(result => {\n          commit('setInitGraph', result.data)\n          resolve()\n        }, error => {\n          console.error(error)\n          reject(error)\n        })\n    })\n  }\n\n}\n\n// mutations\nconst mutations = {\n  setCytoscapeConfig (state, cytoscapeConfig) {\n    state.cytoscapeConfig = cytoscapeConfig\n  },\n  setEdgehandlesConfig (state, edgehandlesConfig) {\n    state.edgehandlesConfig = edgehandlesConfig\n  },\n  setLibHierarchy (state, libHierarchy) {\n    state.libHierarchy = libHierarchy\n  },\n  setWizHierarchy (state, libHierarchy) {\n    let wizHierarchy = _.cloneDeep(libHierarchy)\n    wizHierarchy['Finish'] = 'finish'\n    state.wizHierarchy = wizHierarchy\n  },\n  setFuncMeta (state, funcMeta) {\n    state.funcMeta = funcMeta\n  },\n  setLibMeta (state, libMeta) {\n    state.libMeta = libMeta\n  },\n  setLibUINames (state, libUINames) {\n    state.libUINames = libUINames\n  },\n  setContextMenusConfig (state, contextMenusConfig) {\n    state.contextMenusConfig = contextMenusConfig\n  },\n  setCy (state, cyObj) {\n    state.cy = cyObj\n  },\n  setCyClickPos (state, cyPos) {\n    console.log(cyPos)\n    state.cyClickPos.x = cyPos.x\n    state.cyClickPos.y = cyPos.y\n  },\n  setSelectedNodeId (state, id) {\n    state.selectedNode = {id: id}\n  },\n  setSelectedNodeElem (state, elem) {\n    state.selectedNode.elem = elem\n  },\n  resetSelectedNode (state) {\n    state.selectedNode = {}\n  },\n  setSelectedEdge (state, elem) {\n    state.selectedEdge = elem\n  },\n  setInitGraph (state, initGraph) {\n    state.initGraph = initGraph\n  }\n}\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/store/modules/cytoscape.js","// import axios from 'axios'\n// import session from './session'\n\n/**\n * Mocking client-server processing\n */\nimport json from './json'\n\nconst _cytoscapeInitConfig = {\n  container: null, // document.getElementById('cy'),\n  boxSelectionEnabled: false,\n  autounselectify: true,\n  minZoom: 0.2,\n  maxZoom: 2,\n  layout: {\n    name: 'dagre'\n  },\n  style: [\n    {\n      selector: 'node',\n      style: {\n        'content': 'data(name)',\n        'text-opacity': 0.5,\n        'text-valign': 'center',\n        'text-halign': 'right',\n        'background-color': '#11479e'\n      }\n    },\n    {\n      selector: 'edge',\n      style: {\n        // 'content': 'df',\n        'curve-style': 'bezier',\n        'width': 4,\n        'target-arrow-shape': 'triangle',\n        'line-color': '#9dbaea',\n        'target-arrow-color': '#9dbaea'\n      }\n    },\n    {\n      selector: '.eh-handle',\n      style: {\n        'background-color': 'red',\n        'width': 12,\n        'height': 12,\n        'shape': 'ellipse',\n        'overlay-opacity': 0,\n        'border-width': 12, // makes the handle easier to hit\n        'border-opacity': 0\n      }\n    },\n    {\n      selector: '.eh-hover',\n      style: {\n        'background-color': 'red'\n      }\n    },\n    {\n      selector: '.eh-source',\n      style: {\n        'border-width': 2,\n        'border-color': 'green'\n      }\n    },\n    {\n      selector: '.eh-target',\n      style: {\n        'border-width': 2,\n        'border-color': 'blue'\n      }\n    },\n    {\n      selector: '.eh-preview, .eh-ghost-edge',\n      style: {\n        'background-color': 'red',\n        'line-color': 'red',\n        'target-arrow-color': 'red',\n        'source-arrow-color': 'red'\n      }\n    }\n  ],\n  elements: null\n}\nconst _edgehandlesConfig = {\n  toggleOffOnLeave: true,\n  handleNodes: 'node',\n  handleSize: 10,\n  edgeType: function (sourceNode, targetNode) {\n    var compatible = true\n    if (compatible) {\n      return 'flat'\n    } else {\n      return null\n    }\n  }\n}\nconst _contextMenusConfig = {\n  menuItems: [\n    {\n      id: 'edit-node',\n      content: 'Edit Node',\n      tooltipText: 'Edit Node',\n      selector: 'node',\n      onClickFunction: function (event) {\n      }\n    },\n    {\n      id: 'edit-edge',\n      content: 'Edit Edge',\n      tooltipText: 'Edit Edge',\n      selector: 'edge',\n      onClickFunction: function (event) {\n      }\n    },\n    {\n      id: 'remove-node',\n      content: 'Remove Node',\n      tooltipText: 'Remove Node',\n      selector: 'node',\n      onClickFunction: function (event) {\n      }\n    },\n    {\n      id: 'remove-edge',\n      content: 'Remove Edge',\n      tooltipText: 'Remove Edge',\n      selector: 'edge',\n      onClickFunction: function (event) {\n      }\n    },\n    {\n      id: 'add-node',\n      content: 'Add Node',\n      tooltipText: 'Add Node',\n      coreAsWell: true,\n      onClickFunction: function (event) {\n      }\n    }\n  ],\n  menuItemClasses: ['custom-menu-item'],\n  contextMenuClasses: ['custom-context-menu']\n}\nconst _libMeta = {\n  'table': 'Input data in Table format from csv or excel file',\n  'Convert': 'Convert the input file from one format to another',\n  'datasets': 'Use one of the many standard datasets available',\n  'xyz': 'Input data in the XYZ format',\n  'python script': 'Use Python Script to get the input to the system',\n  'molecular descriptors': 'Select the representation format of molecules for the chemical datasets',\n  'inorganic input': 'Inorganic input details',\n  'distance matrix': 'distance matrix details',\n  'inorganic descriptors': 'inorganic descriptors details',\n  'data manipulation': 'Use this split or concatenate the dataset',\n  'feature transformation': 'Run KernalPCA or PCA on the data',\n  'data cleaning': 'Select from the different data cleaning methods',\n  'scaling': 'Feature Scaling',\n  'feature representation': 'Select on how to represent the features - binarized, one-hot encoded or as polynomial features',\n  'split': 'Select a method on how to split the data',\n  'regression': 'Select from the different regression methods available',\n  'evaluate': 'Use to to evaluate',\n  'validate': 'Select from the different validation methods',\n  'grid': 'Use grid search',\n  'genetic algorithm': 'Use GA_DEAP',\n  'plot': 'Use this to plot the data as histogram or scatterplot',\n  'artist': 'Lorem ipsum',\n  'figure': 'Use this to save the generated plot',\n  'file': 'Use this to save the data into a file',\n  'NA': 'Skip creating a node'\n}\nconst _libUINames = {\n  'table': 'Table',\n  'Convert': 'Convert',\n  'datasets': 'Datasets',\n  'xyz': 'XYZ',\n  'python script': 'Python Script',\n  'molecular descriptors': 'Molecular Descriptors',\n  'inorganic input': 'Inorganic Input',\n  'distance matrix': 'Distance Matrix',\n  'inorganic descriptors': 'Inorganic Descriptors',\n  'data manipulation': 'Data Manipulation',\n  'feature transformation': 'Feature Transformation',\n  'data cleaning': 'Data Cleaning',\n  'scaling': 'Feature Scaling',\n  'feature representation': 'Feature Representation',\n  'split': 'Split',\n  'regression': 'Regression',\n  'evaluate': 'Evaluate',\n  'validate': 'Validate',\n  'grid': 'Grid',\n  'genetic algorithm': 'Genetic Algorithm',\n  'plot': 'Plot',\n  'artist': 'Artist',\n  'figure': 'Figure',\n  'file': 'File'\n}\nexport default {\n  getCytoscapeInitConfig (cb) {\n    let temp = _cytoscapeInitConfig\n    setTimeout(() => cb(temp), 5)\n  },\n  getEdgehandlesConfig (cb) {\n    setTimeout(() => cb(_edgehandlesConfig), 5)\n  },\n  getContextMenusConfig (cb) {\n    setTimeout(() => cb(_contextMenusConfig), 5)\n  },\n  getLibHierarchy (cb) {\n    setTimeout(() => cb(json['lh']), 5)\n  },\n  getFuncMeta (cb) {\n    setTimeout(() => cb(json['fp']), 5)\n  },\n  getLibMeta (cb) {\n    setTimeout(() => cb(_libMeta), 5)\n  },\n  getlibUINames (cb) {\n    setTimeout(() => cb(_libUINames), 5)\n  },\n\n  buyProducts (products, cb, errorCb) {\n    setTimeout(() => {\n      // simulate random checkout failure.\n      (Math.random() > 0.5 || navigator.userAgent.indexOf('PhantomJS') > -1)\n        ? cb()\n        : errorCb()\n    }, 100)\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/cytoscape.js","import sklearnModelSelection from './jsons/sklearnModelSelection'\nimport sklearnDec from './jsons/sklearnDecomposition'\nimport sklearnPrep from './jsons/sklearnPreprocessing'\nimport sklearnSvm from './jsons/sklearnSvm'\nimport sklearnLinear from './jsons/sklearnLinearModel'\nimport sklearnMetrics from './jsons/sklearnMetrics'\nimport pands from './jsons/pandasAbbrv'\nimport chem from './jsons/chemmlChemUi'\nimport chemModel from './jsons/chemmlModelsUi'\nimport chemData from './jsons/chemmlDatasetsUi'\nimport chemmlwrapper from './jsons/chemmlWrapperPreprocessing_ui_prepare'\nimport chemmlwrapperprep from './jsons/chemmlWrapperPreprocessing_ui'\nimport lh from './jsons/menu'\n\nlet fp = {}\n\n// SKLEARN SVM\nfor (let i = 0; i < sklearnSvm['nodes'].length; i++) {\n  let node = sklearnSvm['nodes'][i]\n  lh['Model']['Support Vector Machines']['sklearn']['name'].push(node['name'])\n  fp[node['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  }\n\n  var nf = ['obj']\n  for (let i = 0; i < node['inputs'].length; i++) {\n    let inp = node['inputs'][i]\n    fp[node['name']]['FParameters'].push({\n      'param_type': inp['param_type'],\n      'display_name': inp['name'],\n      'name': inp['name'],\n      'value': inp['default_value'],\n      'desc': inp['docstring'],\n      'is_optional': inp['is_optional']\n    })\n  }\n\n  for (let f = 0; f < node['node_functions'].length; f++) {\n    var lf = []\n    var mf = []\n    let func = node['node_functions'][f]\n    let n = func['name'].split('')[0]\n    if (n !== '_') {\n      fp[node['name']]['Methods'][func['name']] = {}\n      nf.push(func['name'])\n      for (let m = 0; m < func['inputs'].length; m++) {\n        let methinp = func['inputs'][m]\n        mf.push({\n          'name': methinp['name'],\n          'docstring': methinp['docstring'],\n          'param_type': methinp['param_type'],\n          'is_optional': methinp['is_optional']\n        })\n      }\n      for (let m = 0; m < func['outputs'].length; m++) {\n        let methop = func['outputs'][m]\n        lf.push({\n          'name': methop['name'],\n          'docstring': methop['docstring'],\n          'param_type': methop['param_type'],\n          'is_optional': methop['is_optional']\n        })\n      }\n      fp[node['name']]['Methods'][func['name']]['inputs'] = mf\n      fp[node['name']]['Methods'][func['name']]['outputs'] = lf\n    }\n  }\n  lh['Model']['Support Vector Machines']['sklearn']['functions'].push(nf)\n}\n// console.log('-=-=-=-=--=-=-=-=-=-=-', lh, fp)\n\n// CHEMML MODEL\nfor (let i = 0; i < chemModel['nodes'].length; i++) {\n  let node = chemModel['nodes'][i]\n  lh['Model']['Neural Network']['keras']['name'].push(node['name'])\n  nf = ['obj']\n  fp[node['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  }\n  for (let i = 0; i < node['inputs'].length; i++) {\n    let inp = node['inputs'][i]\n    fp[node['name']]['FParameters'].push({\n      'param_type': inp['param_type'],\n      'display_name': inp['name'],\n      'name': inp['name'],\n      'value': inp['default_value'],\n      'desc': inp['docstring'],\n      'is_optional': inp['is_optional']\n    })\n  }\n  for (let f = 0; f < node['node_functions'].length; f++) {\n    let func = node['node_functions'][f]\n    let n = func['name'].split('')[0]\n    lf = []\n    mf = []\n    if (n !== '_') {\n      fp[node['name']]['Methods'][func['name']] = {}\n      nf.push(func['name'])\n      for (let m = 0; m < func['inputs'].length; m++) {\n        let methinp = func['inputs'][m]\n        mf.push({\n          'name': methinp['name'],\n          'docstring': methinp['docstring'],\n          'param_type': methinp['param_type'],\n          'is_optional': methinp['is_optional']\n        })\n      }\n      for (let m = 0; m < func['outputs'].length; m++) {\n        let methop = func['outputs'][m]\n        lf.push({\n          'name': methop['name'],\n          'docstring': methop['docstring'],\n          'param_type': methop['param_type'],\n          'is_optional': methop['is_optional']\n        })\n      }\n      fp[node['name']]['Methods'][func['name']]['inputs'] = mf\n      fp[node['name']]['Methods'][func['name']]['outputs'] = lf\n    }\n  }\n  lh['Model']['Neural Network']['keras']['functions'].push(nf)\n}\n\n// PANDADADADNANDANDNADNADN\nfor (let i = 0; i < pands['node_functions'].length; i++) {\n  let node = pands['node_functions'][i]\n  // console.log('\"*****\"', node)/\n  lh['Input']['CSV']['pandas']['name'].push(node['name'])\n  // nf = ['obj']\n  fp[node['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  }\n  for (let i = 0; i < node['inputs'].length; i++) {\n    let inp = node['inputs'][i]\n    fp[node['name']]['FParameters'].push({\n      // 'param_type': inp['param_type'],\n      // 'display_name': inp['name'],\n      'name': inp['name'],\n      'value': inp['default_value'],\n      // 'desc': inp['docstring'],\n      'is_optional': inp['is_optional']\n    })\n  }\n  // for (let i = 0; i < node['outputs'].length; i++) {\n  let op0 = node['outputs'][0]\n  let op1 = node['outputs'][1]\n  fp[node['name']]['Methods'][op0['name']] = {}\n  fp[node['name']]['Methods'][op0['name']]['outputs'] = [{\n    // 'display_name': op['name'],\n    // 'desc': op['docstring'],\n    'name': op0['name']\n  }, {'name': op1['name']}]\n  // }\n}\n// cheml datasets\nfor (let i = 0; i < chemData['node_functions'].length; i++) {\n  let node = chemData['node_functions'][i]\n  // console.log('\"*****\"', node)/\n  lh['Input']['Chemical']['chemml']['name'].push(node['name'])\n  // nf = ['obj']\n  fp[node['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  }\n  for (let i = 0; i < node['inputs'].length; i++) {\n    let inp = node['inputs'][i]\n    fp[node['name']]['FParameters'].push({\n      // 'param_type': inp['param_type'],\n      // 'display_name': inp['name'],\n      'name': inp['name'],\n      'value': inp['default_value'],\n      'desc': inp['docstring'],\n      'is_optional': inp['is_optional']\n    })\n  }\n  for (let i = 0; i < node['outputs'].length; i++) {\n    let op = node['outputs'][i]\n    fp[node['name']]['Methods'][op['name']] = {}\n    fp[node['name']]['Methods'][op['name']]['outputs'] = [{\n      // 'display_name': op['name'],\n      'desc': op['docstring'],\n      'name': op['name']\n    }]\n  }\n}\n\n// SKLEARN DECOMPOSITION\nfor (let i = 0; i < sklearnDec['nodes'].length; i++) {\n  let node = sklearnDec['nodes'][i]\n  lh['Represent']['Dimensionality Reduction']['sklearn']['name'].push(node['name'])\n  nf = ['obj']\n  fp[node['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  }\n  for (let i = 0; i < node['inputs'].length; i++) {\n    let inp = node['inputs'][i]\n    fp[node['name']]['FParameters'].push({\n      'param_type': inp['param_type'],\n      'display_name': inp['name'],\n      'name': inp['name'],\n      'value': inp['default_value'],\n      'desc': inp['docstring'],\n      'is_optional': inp['is_optional']\n    })\n  }\n  for (let f = 0; f < node['node_functions'].length; f++) {\n    let func = node['node_functions'][f]\n    let n = func['name'].split('')[0]\n    lf = []\n    mf = []\n    if (n !== '_') {\n      fp[node['name']]['Methods'][func['name']] = {}\n      nf.push(func['name'])\n      for (let m = 0; m < func['inputs'].length; m++) {\n        let methinp = func['inputs'][m]\n        mf.push({\n          'name': methinp['name'],\n          'docstring': methinp['docstring'],\n          'param_type': methinp['param_type'],\n          'is_optional': methinp['is_optional']\n        })\n      }\n      for (let m = 0; m < func['outputs'].length; m++) {\n        let methop = func['outputs'][m]\n        lf.push({\n          'name': methop['name'],\n          'docstring': methop['docstring'],\n          'param_type': methop['param_type'],\n          'is_optional': methop['is_optional']\n        })\n      }\n      fp[node['name']]['Methods'][func['name']]['inputs'] = mf\n      fp[node['name']]['Methods'][func['name']]['outputs'] = lf\n    }\n  }\n  lh['Represent']['Dimensionality Reduction']['sklearn']['functions'].push(nf)\n}\n\n// CHEMML chem\nfor (let i = 0; i < chem['nodes'].length; i++) {\n  let node = chem['nodes'][i]\n  lh['Represent']['Chemical']['chemml']['name'].push(node['name'])\n  nf = ['obj']\n  fp[node['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  }\n  for (let i = 0; i < node['inputs'].length; i++) {\n    let inp = node['inputs'][i]\n    fp[node['name']]['FParameters'].push({\n      'param_type': inp['param_type'],\n      'display_name': inp['name'],\n      'name': inp['name'],\n      'value': inp['default_value'],\n      'desc': inp['docstring'],\n      'is_optional': inp['is_optional']\n    })\n  }\n  for (let f = 0; f < node['node_functions'].length; f++) {\n    let func = node['node_functions'][f]\n    let n = func['name'].split('')[0]\n    lf = []\n    mf = []\n    if (n !== '_') {\n      fp[node['name']]['Methods'][func['name']] = {}\n      nf.push(func['name'])\n      for (let m = 0; m < func['inputs'].length; m++) {\n        let methinp = func['inputs'][m]\n        mf.push({\n          'name': methinp['name'],\n          'docstring': methinp['docstring'],\n          'param_type': methinp['param_type'],\n          'is_optional': methinp['is_optional']\n        })\n      }\n      for (let m = 0; m < func['outputs'].length; m++) {\n        let methop = func['outputs'][m]\n        lf.push({\n          'name': methop['name'],\n          'docstring': methop['docstring'],\n          'param_type': methop['param_type'],\n          'is_optional': methop['is_optional']\n        })\n      }\n      fp[node['name']]['Methods'][func['name']]['inputs'] = mf\n      fp[node['name']]['Methods'][func['name']]['outputs'] = lf\n    }\n  }\n  lh['Represent']['Chemical']['chemml']['functions'].push(nf)\n}\n\n// SKLEARN PREPROCESSING\nfor (let i = 0; i < sklearnPrep['nodes'].length; i++) {\n  let node = sklearnPrep['nodes'][i]\n  lh['Prepare']['Preprocessing']['sklearn']['name'].push(node['name'])\n  nf = ['obj']\n  fp[node['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  }\n  for (let i = 0; i < node['inputs'].length; i++) {\n    let inp = node['inputs'][i]\n    fp[node['name']]['FParameters'].push({\n      // 'param_type': inp['param_type'],\n      // 'display_name': inp['name'],\n      'name': inp['name'],\n      'value': inp['default_value'],\n      // 'desc': inp['docstring'],\n      'is_optional': inp['is_optional']\n    })\n  }\n  for (let f = 0; f < node['node_functions'].length; f++) {\n    let func = node['node_functions'][f]\n    let n = func['name'].split('')[0]\n    lf = []\n    mf = []\n    if (n !== '_') {\n      nf.push(func['name'])\n      fp[node['name']]['Methods'][func['name']] = {}\n      for (let m = 0; m < func['inputs'].length; m++) {\n        let methinp = func['inputs'][m]\n        mf.push({\n          'name': methinp['name'],\n          // 'docstring': methinp['docstring'],\n          // 'param_type': methinp['param_type'],\n          'is_optional': methinp['is_optional']\n        })\n      }\n      for (let m = 0; m < func['outputs'].length; m++) {\n        let methop = func['outputs'][m]\n        lf.push({\n          'name': methop['name'],\n          // 'docstring': methop['docstring'],\n          // 'param_type': methop['param_type'],\n          'is_optional': methop['is_optional']\n        })\n      }\n      fp[node['name']]['Methods'][func['name']]['inputs'] = mf\n      fp[node['name']]['Methods'][func['name']]['outputs'] = lf\n    }\n  }\n  lh['Prepare']['Preprocessing']['sklearn']['functions'].push(nf)\n}\n\n// chemml.wrapper.preprocessing_ui_prepare PREPROCESSING\nfor (let i = 0; i < chemmlwrapper['nodes'].length; i++) {\n  let node = chemmlwrapper['nodes'][i]\n  lh['Prepare']['Data Splitting']['chemml']['name'].push(node['name'])\n  nf = ['obj']\n  fp[node['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  }\n  for (let i = 0; i < node['inputs'].length; i++) {\n    let inp = node['inputs'][i]\n    fp[node['name']]['FParameters'].push({\n      // 'param_type': inp['param_type'],\n      // 'display_name': inp['name'],\n      'name': inp['name'],\n      'value': inp['default_value'],\n      // 'desc': inp['docstring'],\n      'is_optional': inp['is_optional']\n    })\n  }\n  for (let f = 0; f < node['node_functions'].length; f++) {\n    let func = node['node_functions'][f]\n    let n = func['name'].split('')[0]\n    lf = []\n    mf = []\n    if (n !== '_') {\n      nf.push(func['name'])\n      fp[node['name']]['Methods'][func['name']] = {}\n      for (let m = 0; m < func['inputs'].length; m++) {\n        let methinp = func['inputs'][m]\n        mf.push({\n          'name': methinp['name'],\n          // 'docstring': methinp['docstring'],\n          // 'param_type': methinp['param_type'],\n          'is_optional': methinp['is_optional']\n        })\n      }\n      for (let m = 0; m < func['outputs'].length; m++) {\n        let methop = func['outputs'][m]\n        lf.push({\n          'name': methop['name'],\n          // 'docstring': methop['docstring'],\n          // 'param_type': methop['param_type'],\n          'is_optional': methop['is_optional']\n        })\n      }\n      fp[node['name']]['Methods'][func['name']]['inputs'] = mf\n      fp[node['name']]['Methods'][func['name']]['outputs'] = lf\n    }\n  }\n  lh['Prepare']['Data Splitting']['chemml']['functions'].push(nf)\n}\n\n// Chemml Wrapper PREPROCESSING\nfor (let i = 0; i < chemmlwrapperprep['nodes'].length; i++) {\n  let node = chemmlwrapperprep['nodes'][i]\n  lh['Output']['Store Data']['chemml']['name'].push(node['name'])\n  nf = ['obj']\n  fp[node['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  }\n  for (let i = 0; i < node['inputs'].length; i++) {\n    let inp = node['inputs'][i]\n    fp[node['name']]['FParameters'].push({\n      // 'param_type': inp['param_type'],\n      // 'display_name': inp['name'],\n      'name': inp['name'],\n      'value': inp['default_value'],\n      // 'desc': inp['docstring'],\n      'is_optional': inp['is_optional']\n    })\n  }\n  for (let f = 0; f < node['node_functions'].length; f++) {\n    let func = node['node_functions'][f]\n    let n = func['name'].split('')[0]\n    lf = []\n    mf = []\n    if (n !== '_') {\n      nf.push(func['name'])\n      fp[node['name']]['Methods'][func['name']] = {}\n      for (let m = 0; m < func['inputs'].length; m++) {\n        let methinp = func['inputs'][m]\n        mf.push({\n          'name': methinp['name'],\n          // 'docstring': methinp['docstring'],\n          // 'param_type': methinp['param_type'],\n          'is_optional': methinp['is_optional']\n        })\n      }\n      for (let m = 0; m < func['outputs'].length; m++) {\n        let methop = func['outputs'][m]\n        lf.push({\n          'name': methop['name'],\n          // 'docstring': methop['docstring'],\n          // 'param_type': methop['param_type'],\n          'is_optional': methop['is_optional']\n        })\n      }\n      fp[node['name']]['Methods'][func['name']]['inputs'] = mf\n      fp[node['name']]['Methods'][func['name']]['outputs'] = lf\n    }\n  }\n  lh['Output']['Store Data']['chemml']['functions'].push(nf)\n}\n\n// SKLEARN LINEAR MODEL\nfor (let i = 0; i < sklearnLinear['nodes'].length; i++) {\n  let node = sklearnLinear['nodes'][i]\n  lh['Model']['Linear']['sklearn']['name'].push(node['name'])\n  nf = ['obj']\n  fp[node['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  }\n  for (let i = 0; i < node['inputs'].length; i++) {\n    let inp = node['inputs'][i]\n    fp[node['name']]['FParameters'].push({\n      'param_type': inp['param_type'],\n      'display_name': inp['name'],\n      'name': inp['name'],\n      'value': inp['default_value'],\n      'desc': inp['docstring'],\n      'is_optional': inp['is_optional']\n    })\n  }\n  for (let f = 0; f < node['node_functions'].length; f++) {\n    let func = node['node_functions'][f]\n    let n = func['name'].split('')[0]\n    mf = []\n    lf = []\n    if (n !== '_') {\n      fp[node['name']]['Methods'][func['name']] = {}\n      nf.push(func['name'])\n      for (let m = 0; m < func['inputs'].length; m++) {\n        let methinp = func['inputs'][m]\n        mf.push({\n          'name': methinp['name'],\n          'docstring': methinp['docstring'],\n          'param_type': methinp['param_type'],\n          'is_optional': methinp['is_optional']\n        })\n      }\n      for (let m = 0; m < func['outputs'].length; m++) {\n        let methop = func['outputs'][m]\n        lf.push({\n          'name': methop['name'],\n          'docstring': methop['docstring'],\n          'param_type': methop['param_type'],\n          'is_optional': methop['is_optional']\n        })\n      }\n      fp[node['name']]['Methods'][func['name']]['inputs'] = mf\n      fp[node['name']]['Methods'][func['name']]['outputs'] = lf\n    }\n  }\n  lh['Model']['Linear']['sklearn']['functions'].push(nf)\n}\n\n// sklearn metrics\n\nfor (let i = 0; i < sklearnMetrics['nodes'].length; i++) {\n  let node = sklearnMetrics['nodes'][i]\n  lh['Optimize']['Metrics']['sklearn']['name'].push(node['name'])\n  nf = ['obj']\n  fp[node['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  }\n  for (let i = 0; i < node['inputs'].length; i++) {\n    let inp = node['inputs'][i]\n    fp[node['name']]['FParameters'].push({\n      'param_type': inp['param_type'],\n      'display_name': inp['name'],\n      'name': inp['name'],\n      'value': inp['default_value'],\n      'desc': inp['docstring'],\n      'is_optional': inp['is_optional']\n    })\n  }\n  for (let f = 0; f < node['node_functions'].length; f++) {\n    let func = node['node_functions'][f]\n    let n = func['name'].split('')[0]\n    mf = []\n    lf = []\n    if (n !== '_') {\n      fp[node['name']]['Methods'][func['name']] = {}\n      nf.push(func['name'])\n      for (let m = 0; m < func['inputs'].length; m++) {\n        let methinp = func['inputs'][m]\n        mf.push({\n          'name': methinp['name'],\n          'docstring': methinp['docstring'],\n          'param_type': methinp['param_type'],\n          'is_optional': methinp['is_optional']\n        })\n      }\n      for (let m = 0; m < func['outputs'].length; m++) {\n        let methop = func['outputs'][m]\n        lf.push({\n          'name': methop['name'],\n          'docstring': methop['docstring'],\n          'param_type': methop['param_type'],\n          'is_optional': methop['is_optional']\n        })\n      }\n      fp[node['name']]['Methods'][func['name']]['inputs'] = mf\n      fp[node['name']]['Methods'][func['name']]['outputs'] = lf\n    }\n  }\n  lh['Optimize']['Metrics']['sklearn']['functions'].push(nf)\n}\n\n// SKLEARN MODEL SELECTION\nfor (let i = 0; i < sklearnModelSelection['nodes'].length; i++) {\n  let node = sklearnModelSelection['nodes'][i]\n  lh['Optimize']['Selection']['sklearn']['name'].push(node['name'])\n  nf = ['obj']\n  fp[node['name']] = {\n    'FParameters': [],\n    'Methods': {}\n  }\n  for (let i = 0; i < node['inputs'].length; i++) {\n    let inp = node['inputs'][i]\n    fp[node['name']]['FParameters'].push({\n      'param_type': inp['param_type'],\n      'display_name': inp['name'],\n      'name': inp['name'],\n      'value': inp['default_value'],\n      'desc': inp['docstring'],\n      'is_optional': inp['is_optional']\n    })\n  }\n  for (let f = 0; f < node['node_functions'].length; f++) {\n    let func = node['node_functions'][f]\n    let n = func['name'].split('')[0]\n    lf = []\n    mf = []\n    if (n !== '_') {\n      fp[node['name']]['Methods'][func['name']] = {}\n      nf.push(func['name'])\n      for (let m = 0; m < func['inputs'].length; m++) {\n        let methinp = func['inputs'][m]\n        mf.push({\n          'name': methinp['name'],\n          'docstring': methinp['docstring'],\n          'param_type': methinp['param_type'],\n          'is_optional': methinp['is_optional']\n        })\n      }\n      for (let m = 0; m < func['outputs'].length; m++) {\n        let methop = func['outputs'][m]\n        lf.push({\n          'name': methop['name'],\n          'docstring': methop['docstring'],\n          'param_type': methop['param_type'],\n          'is_optional': methop['is_optional']\n        })\n      }\n      fp[node['name']]['Methods'][func['name']]['inputs'] = mf\n      fp[node['name']]['Methods'][func['name']]['outputs'] = lf\n    }\n  }\n  lh['Optimize']['Selection']['sklearn']['functions'].push(nf)\n}\nconsole.log('idhar', fp, lh)\nexport default {lh, fp}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/json.js","export default {\n  name: 'sklearn.model_selection',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [\n    {\n      name: 'train_test_split',\n      docstring:\n        'Split arrays or matrices into random train and test subsets\\n\\n    Quick utility that wraps input validation and\\n    ``next(ShuffleSplit().split(X, y))`` and application to input data\\n    into a single call for splitting (and optionally subsampling) data in a\\n    oneliner.',\n      inputs: [\n        {\n          name: '*arrays',\n          docstring:\n            'Allowed inputs are lists, numpy arrays, scipy-sparse matrices or pandas dataframes.',\n          param_type: ['list'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null\n        },\n        {\n          name: 'test_size',\n          docstring:\n            'If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If None, the value is set to the complement of the train size. If ``train_size`` is also None, it will be set to 0.25.',\n          param_type: ['int', 'float', null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'None'\n        },\n        {\n          name: 'train_size',\n          docstring:\n            'If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split. If int, represents the absolute number of train samples. If None, the value is automatically set to the complement of the test size.',\n          param_type: ['int', 'float', null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'None'\n        },\n        {\n          name: 'shuffle',\n          docstring:\n            'Whether or not to shuffle the data before splitting. If shuffle=False then stratify must be None.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True'\n        },\n        {\n          name: 'stratify',\n          docstring:\n            'If not None, data is split in a stratified fashion, using this as the class labels.',\n          param_type: ['array', null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'None'\n        }\n      ],\n      outputs: [\n        {\n          name: 'splitting',\n          docstring: 'List containing train-test split of inputs.',\n          param_type: ['array', 'list'],\n          returned: true\n        }\n      ]\n    }\n  ],\n  nodes: [\n    {\n      name: 'train_test_split',\n      docstring:\n        'Split arrays or matrices into random train and test subsets\\n\\n    Quick utility that wraps input validation and\\n    ``next(ShuffleSplit().split(X, y))`` and application to input data\\n    into a single call for splitting (and optionally subsampling) data in a\\n    oneliner.',\n      node_functions: [\n        {\n          name: 'split2',\n          docstring: 'None',\n          inputs: [\n            {\n              name: '*arrays',\n              docstring:\n                'Allowed inputs are lists, numpy arrays, scipy-sparse matrices or pandas dataframes.',\n              param_type: ['list'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            },\n            {\n              name: 'test_size',\n              docstring:\n                'If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If None, the value is set to the complement of the train size. If ``train_size`` is also None, it will be set to 0.25.',\n              param_type: ['int', 'float', null],\n              expected_shape: null,\n              is_optional: true,\n              default_value: 'None'\n            },\n            {\n              name: 'train_size',\n              docstring:\n                'If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split. If int, represents the absolute number of train samples. If None, the value is automatically set to the complement of the test size.',\n              param_type: ['int', 'float', null],\n              expected_shape: null,\n              is_optional: true,\n              default_value: 'None'\n            },\n            {\n              name: 'shuffle',\n              docstring:\n                'Whether or not to shuffle the data before splitting. If shuffle=False then stratify must be None.',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: 'True'\n            },\n            {\n              name: 'stratify',\n              docstring:\n                'If not None, data is split in a stratified fashion, using this as the class labels.',\n              param_type: ['array', null],\n              expected_shape: null,\n              is_optional: true,\n              default_value: 'None'\n            }\n          ],\n          outputs: [\n            {\n              name: 'splitting',\n              docstring: 'List containing train-test split of inputs.',\n              param_type: ['array', 'list'],\n              returned: true\n            }\n          ]\n        }\n      ],\n      inputs: [\n        {\n          name: '*arrays',\n          docstring:\n            'Allowed inputs are lists, numpy arrays, scipy-sparse matrices or pandas dataframes.',\n          param_type: ['list'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null\n        },\n        {\n          name: 'test_size',\n          docstring:\n            'If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split. If int, represents the absolute number of test samples. If None, the value is set to the complement of the train size. If ``train_size`` is also None, it will be set to 0.25.',\n          param_type: ['int', 'float', null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'None'\n        },\n        {\n          name: 'train_size',\n          docstring:\n            'If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split. If int, represents the absolute number of train samples. If None, the value is automatically set to the complement of the test size.',\n          param_type: ['int', 'float', null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'None'\n        },\n        {\n          name: 'shuffle',\n          docstring:\n            'Whether or not to shuffle the data before splitting. If shuffle=False then stratify must be None.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True'\n        },\n        {\n          name: 'stratify',\n          docstring:\n            'If not None, data is split in a stratified fashion, using this as the class labels.',\n          param_type: ['array', null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'None'\n        }\n      ],\n      outputs: [\n        {\n          name: 'splitting',\n          docstring: 'List containing train-test split of inputs.',\n          param_type: ['array', 'list'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'GridSearchCV',\n      docstring:\n        'Exhaustive search over specified parameter values for an estimator.\\n\\n    Important members are fit, predict.\\n\\n    GridSearchCV implements a \"fit\" and a \"score\" method.\\n    It also implements \"predict\", \"predict_proba\", \"decision_function\",\\n    \"transform\" and \"inverse_transform\" if they are implemented in the\\n    estimator used.\\n\\n    The parameters of the estimator used to apply these methods are optimized\\n    by cross-validated grid-search over a parameter grid.',\n      inputs: [\n        {\n          name: 'estimator',\n          docstring:\n            'This is assumed to implement the scikit-learn estimator interface. Either estimator needs to provide a ``score`` function, or ``scoring`` must be passed.',\n          param_type: ['object'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null\n        },\n        {\n          name: 'param_grid',\n          docstring:\n            'Dictionary with parameters names (string) as keys and lists of parameter settings to try as values, or a list of such dictionaries, in which case the grids spanned by each dictionary in the list are explored. This enables searching over any sequence of parameter settings.',\n          param_type: ['dict', 'list'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null\n        },\n        {\n          name: 'scoring',\n          docstring:\n            \"A single string (see :ref:`scoring_parameter`) or a callable (see :ref:`scoring`) to evaluate the predictions on the test set.  For evaluating multiple metrics, either give a list of (unique) strings or a dict with names as keys and callables as values.  NOTE that when using custom scorers, each scorer should return a single value. Metric functions returning a list/array of values can be wrapped into multiple scorers that return one value each.  See :ref:`multimetric_grid_search` for an example.  If None, the estimator's score method is used.\",\n          param_type: ['str', 'dict', 'list', 'tuple', 'callable', null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'None'\n        },\n        {\n          name: 'n_jobs',\n          docstring:\n            'Number of jobs to run in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.',\n          param_type: ['int', null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'None'\n        },\n        {\n          name: 'pre_dispatch',\n          docstring:\n            \"Controls the number of jobs that get dispatched during parallel execution. Reducing this number can be useful to avoid an explosion of memory consumption when more jobs get dispatched than CPUs can process. This parameter can be:      - None, in which case all the jobs are immediately       created and spawned. Use this for lightweight and       fast-running jobs, to avoid delays due to on-demand       spawning of the jobs      - An int, giving the exact number of total jobs that are       spawned      - A string, giving an expression as a function of n_jobs,       as in '2*n_jobs'\",\n          param_type: ['int', 'str'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null\n        },\n        {\n          name: 'iid',\n          docstring:\n            'If True, return the average score across folds, weighted by the number of samples in each test set. In this case, the data is assumed to be identically distributed across the folds, and the loss minimized is the total loss per sample, and not the mean loss across the folds. If False, return the average score across folds. Default is True, but will change to False in version 0.22, to correspond to the standard definition of cross-validation.  .. versionchanged:: 0.20     Parameter ``iid`` will change from True to False by default in     version 0.22, and will be removed in 0.24.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'warn'\n        },\n        {\n          name: 'cv',\n          docstring:\n            'Determines the cross-validation splitting strategy. Possible inputs for cv are:  - None, to use the default 3-fold cross validation, - integer, to specify the number of folds in a `(Stratified)KFold`, - :term:`CV splitter`, - An iterable yielding (train, test) splits as arrays of indices.  For integer/None inputs, if the estimator is a classifier and ``y`` is either binary or multiclass, :class:`StratifiedKFold` is used. In all other cases, :class:`KFold` is used.  Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here.  .. versionchanged:: 0.20     ``cv`` default value if None will change from 3-fold to 5-fold     in v0.22.',\n          param_type: ['int', 'iter'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null\n        },\n        {\n          name: 'refit',\n          docstring:\n            'Refit an estimator using the best found parameters on the whole dataset.  For multiple metric evaluation, this needs to be a string denoting the scorer that would be used to find the best parameters for refitting the estimator at the end.  Where there are considerations other than maximum score in choosing a best estimator, ``refit`` can be set to a function which returns the selected ``best_index_`` given ``cv_results_``.  The refitted estimator is made available at the ``best_estimator_`` attribute and permits using ``predict`` directly on this ``GridSearchCV`` instance.  Also for multiple metric evaluation, the attributes ``best_index_``, ``best_score_`` and ``best_params_`` will only be available if ``refit`` is set and all of them will be determined w.r.t this specific scorer. ``best_score_`` is not returned if refit is callable.  See ``scoring`` parameter to know more about multiple metric evaluation.  .. versionchanged:: 0.20     Support for callable added.',\n          param_type: ['bool', 'str', 'callable'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True'\n        },\n        {\n          name: 'verbose',\n          docstring: 'Controls the verbosity: the higher, the more messages.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null\n        },\n        {\n          name: 'error_score',\n          docstring:\n            \"Value to assign to the score if an error occurs in estimator fitting. If set to 'raise', the error is raised. If a numeric value is given, FitFailedWarning is raised. This parameter does not affect the refit step, which will always raise the error. Default is 'raise' but from version 0.22 it will change to np.nan.\",\n          param_type: [null],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null\n        },\n        {\n          name: 'return_train_score',\n          docstring:\n            'If ``False``, the ``cv_results_`` attribute will not include training scores. Computing training scores is used to get insights on how different parameter settings impact the overfitting/underfitting trade-off. However computing the scores on the training set can be computationally expensive and is not strictly required to select the parameters that yield the best generalization performance.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'False'\n        }\n      ],\n      outputs: [\n        {\n          name: 'cv_results_',\n          docstring:\n            \"A dict with keys as column headers and values as columns, that can be imported into a pandas ``DataFrame``.  For instance the below given table  +------------+-----------+------------+-----------------+---+---------+ |param_kernel|param_gamma|param_degree|split0_test_score|...|rank_t...| +============+===========+============+=================+===+=========+ |  'poly'    |     --    |      2     |       0.80      |...|    2    | +------------+-----------+------------+-----------------+---+---------+ |  'poly'    |     --    |      3     |       0.70      |...|    4    | +------------+-----------+------------+-----------------+---+---------+ |  'rbf'     |     0.1   |     --     |       0.80      |...|    3    | +------------+-----------+------------+-----------------+---+---------+ |  'rbf'     |     0.2   |     --     |       0.93      |...|    1    | +------------+-----------+------------+-----------------+---+---------+  will be represented by a ``cv_results_`` dict of::      {     'param_kernel': masked_array(data = ['poly', 'poly', 'rbf', 'rbf'],                                  mask = [False False False False]...)     'param_gamma': masked_array(data = [-- -- 0.1 0.2],                                 mask = [ True  True False False]...),     'param_degree': masked_array(data = [2.0 3.0 -- --],                                  mask = [False False  True  True]...),     'split0_test_score'  : [0.80, 0.70, 0.80, 0.93],     'split1_test_score'  : [0.82, 0.50, 0.70, 0.78],     'mean_test_score'    : [0.81, 0.60, 0.75, 0.85],     'std_test_score'     : [0.01, 0.10, 0.05, 0.08],     'rank_test_score'    : [2, 4, 3, 1],     'split0_train_score' : [0.80, 0.92, 0.70, 0.93],     'split1_train_score' : [0.82, 0.55, 0.70, 0.87],     'mean_train_score'   : [0.81, 0.74, 0.70, 0.90],     'std_train_score'    : [0.01, 0.19, 0.00, 0.03],     'mean_fit_time'      : [0.73, 0.63, 0.43, 0.49],     'std_fit_time'       : [0.01, 0.02, 0.01, 0.01],     'mean_score_time'    : [0.01, 0.06, 0.04, 0.04],     'std_score_time'     : [0.00, 0.00, 0.00, 0.01],     'params'             : [{'kernel': 'poly', 'degree': 2}, ...],     }  NOTE  The key ``'params'`` is used to store a list of parameter settings dicts for all the parameter candidates.  The ``mean_fit_time``, ``std_fit_time``, ``mean_score_time`` and ``std_score_time`` are all in seconds.  For multi-metric evaluation, the scores for all the scorers are available in the ``cv_results_`` dict at the keys ending with that scorer's name (``'_<scorer_name>'``) instead of ``'_score'`` shown above. ('split0_test_precision', 'mean_train_precision' etc.)\",\n          param_type: ['array', 'dict'],\n          returned: false\n        },\n        {\n          name: 'best_estimator_',\n          docstring:\n            'Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if ``refit=False``.  See ``refit`` parameter for more information on allowed values.',\n          param_type: ['dict'],\n          returned: false\n        },\n        {\n          name: 'best_score_',\n          docstring:\n            'Mean cross-validated score of the best_estimator  For multi-metric evaluation, this is present only if ``refit`` is specified.',\n          param_type: ['float'],\n          returned: false\n        },\n        {\n          name: 'best_params_',\n          docstring:\n            'Parameter setting that gave the best results on the hold out data.  For multi-metric evaluation, this is present only if ``refit`` is specified.',\n          param_type: ['dict'],\n          returned: false\n        },\n        {\n          name: 'best_index_',\n          docstring:\n            \"The index (of the ``cv_results_`` arrays) which corresponds to the best candidate parameter setting.  The dict at ``search.cv_results_['params'][search.best_index_]`` gives the parameter setting for the best model, that gives the highest mean score (``search.best_score_``).  For multi-metric evaluation, this is present only if ``refit`` is specified.\",\n          param_type: ['int'],\n          returned: false\n        },\n        {\n          name: 'scorer_',\n          docstring:\n            'Scorer function used on the held out data to choose the best parameters for the model.  For multi-metric evaluation, this attribute holds the validated ``scoring`` dict which maps the scorer key to the scorer callable.',\n          param_type: ['dict'],\n          returned: false\n        },\n        {\n          name: 'n_splits_',\n          docstring:\n            'The number of cross-validation splits (folds/iterations).',\n          param_type: ['int'],\n          returned: false\n        },\n        {\n          name: 'refit_time_',\n          docstring:\n            'Seconds used for refitting the best model on the whole dataset.  This is present only if ``refit`` is not False.',\n          param_type: ['float'],\n          returned: false\n        }\n      ],\n      node_functions: [\n        {\n          name: '__init__',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_check_is_fitted',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_format_results',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_param_names',\n          docstring: 'Get parameter names for the estimator',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_tags',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_run_search',\n          docstring: 'Search all candidates in param_grid',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'decision_function',\n          docstring:\n            'Call decision_function on the estimator with the best found parameters.\\n\\n        Only available if ``refit=True`` and the underlying estimator supports\\n        ``decision_function``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Must fulfill the input assumptions of the underlying estimator.',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'fit',\n          docstring:\n            'Run fit with all sets of parameters.\\n\\n        Parameters\\n        ----------\\n\\n        X : array-like, shape = [n_samples, n_features]\\n            Training vector, where n_samples is the number of samples and\\n            n_features is the number of features.\\n\\n        y : array-like, shape = [n_samples] or [n_samples, n_output], optional\\n            Target relative to X for classification or regression;\\n            None for unsupervised learning.\\n\\n        groups : array-like, with shape (n_samples,), optional\\n            Group labels for the samples used while splitting the dataset into\\n            train/test set. Only used in conjunction with a \"Group\" `cv`\\n            instance (e.g., `GroupKFold`).\\n\\n        **fit_params : dict of string -> object\\n            Parameters passed to the ``fit`` method of the estimator\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Training vector, where n_samples is the number of samples and n_features is the number of features.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null\n            },\n            {\n              name: 'y',\n              docstring:\n                'Target relative to X for classification or regression; None for unsupervised learning.',\n              param_type: ['array'],\n              expected_shape: '[n_samples] or [n_samples, n_output], optional',\n              is_optional: true,\n              default_value: null\n            },\n            {\n              name: 'groups',\n              docstring:\n                'Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a \"Group\" `cv` instance (e.g., `GroupKFold`).',\n              param_type: ['array'],\n              expected_shape: '(n_samples,), optional',\n              is_optional: true,\n              default_value: null\n            },\n            {\n              name: '**fit_params',\n              docstring:\n                'Parameters passed to the ``fit`` method of the estimator',\n              param_type: ['object', 'str', 'dict'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'get_params',\n          docstring:\n            'Get parameters for this estimator.\\n\\n        Parameters\\n        ----------\\n        deep : boolean, optional\\n            If True, will return the parameters for this estimator and\\n            contained subobjects that are estimators.\\n\\n        Returns\\n        -------\\n        params : mapping of string to any\\n            Parameter names mapped to their values.\\n        ',\n          inputs: [\n            {\n              name: 'deep',\n              docstring:\n                'If True, will return the parameters for this estimator and contained subobjects that are estimators.',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'params',\n              docstring: 'Parameter names mapped to their values.',\n              param_type: ['str'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'inverse_transform',\n          docstring:\n            'Call inverse_transform on the estimator with the best found params.\\n\\n        Only available if the underlying estimator implements\\n        ``inverse_transform`` and ``refit=True``.\\n\\n        Parameters\\n        ----------\\n        Xt : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n          inputs: [\n            {\n              name: 'Xt',\n              docstring:\n                'Must fulfill the input assumptions of the underlying estimator.',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'predict',\n          docstring:\n            'Call predict on the estimator with the best found parameters.\\n\\n        Only available if ``refit=True`` and the underlying estimator supports\\n        ``predict``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Must fulfill the input assumptions of the underlying estimator.',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'predict_log_proba',\n          docstring:\n            'Call predict_log_proba on the estimator with the best found parameters.\\n\\n        Only available if ``refit=True`` and the underlying estimator supports\\n        ``predict_log_proba``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Must fulfill the input assumptions of the underlying estimator.',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'predict_proba',\n          docstring:\n            'Call predict_proba on the estimator with the best found parameters.\\n\\n        Only available if ``refit=True`` and the underlying estimator supports\\n        ``predict_proba``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Must fulfill the input assumptions of the underlying estimator.',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'score',\n          docstring:\n            'Returns the score on the given data, if the estimator has been refit.\\n\\n        This uses the score defined by ``scoring`` where provided, and the\\n        ``best_estimator_.score`` method otherwise.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape = [n_samples, n_features]\\n            Input data, where n_samples is the number of samples and\\n            n_features is the number of features.\\n\\n        y : array-like, shape = [n_samples] or [n_samples, n_output], optional\\n            Target relative to X for classification or regression;\\n            None for unsupervised learning.\\n\\n        Returns\\n        -------\\n        score : float\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Input data, where n_samples is the number of samples and n_features is the number of features.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null\n            },\n            {\n              name: 'y',\n              docstring:\n                'Target relative to X for classification or regression; None for unsupervised learning.',\n              param_type: ['array'],\n              expected_shape: '[n_samples] or [n_samples, n_output], optional',\n              is_optional: true,\n              default_value: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'score',\n              docstring: '',\n              param_type: ['float'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'set_params',\n          docstring:\n            \"Set the parameters of this estimator.\\n\\n        The method works on simple estimators as well as on nested objects\\n        (such as pipelines). The latter have parameters of the form\\n        ``<component>__<parameter>`` so that it's possible to update each\\n        component of a nested object.\\n\\n        Returns\\n        -------\\n        self\\n        \",\n          inputs: [],\n          outputs: [\n            {\n              name: '',\n              docstring: '',\n              param_type: [null],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'transform',\n          docstring:\n            'Call transform on the estimator with the best found parameters.\\n\\n        Only available if the underlying estimator supports ``transform`` and\\n        ``refit=True``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Must fulfill the input assumptions of the underlying estimator.',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            }\n          ],\n          outputs: []\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'RandomizedSearchCV',\n      docstring:\n        \"Randomized search on hyper parameters.\\n\\n    RandomizedSearchCV implements a \\\"fit\\\" and a \\\"score\\\" method.\\n    It also implements \\\"predict\\\", \\\"predict_proba\\\", \\\"decision_function\\\",\\n    \\\"transform\\\" and \\\"inverse_transform\\\" if they are implemented in the\\n    estimator used.\\n\\n    The parameters of the estimator used to apply these methods are optimized\\n    by cross-validated search over parameter settings.\\n\\n    In contrast to GridSearchCV, not all parameter values are tried out, but\\n    rather a fixed number of parameter settings is sampled from the specified\\n    distributions. The number of parameter settings that are tried is\\n    given by n_iter.\\n\\n    If all parameters are presented as a list,\\n    sampling without replacement is performed. If at least one parameter\\n    is given as a distribution, sampling with replacement is used.\\n    It is highly recommended to use continuous distributions for continuous\\n    parameters.\\n\\n    Note that before SciPy 0.16, the ``scipy.stats.distributions`` do not\\n    accept a custom RNG instance and always use the singleton RNG from\\n    ``numpy.random``. Hence setting ``random_state`` will not guarantee a\\n    deterministic iteration whenever ``scipy.stats`` distributions are used to\\n    define the parameter search space.\\n\\n    Read more in the :ref:`User Guide <randomized_parameter_search>`.\\n\\n    Parameters\\n    ----------\\n    estimator : estimator object.\\n        A object of that type is instantiated for each grid point.\\n        This is assumed to implement the scikit-learn estimator interface.\\n        Either estimator needs to provide a ``score`` function,\\n        or ``scoring`` must be passed.\\n\\n    param_distributions : dict\\n        Dictionary with parameters names (string) as keys and distributions\\n        or lists of parameters to try. Distributions must provide a ``rvs``\\n        method for sampling (such as those from scipy.stats.distributions).\\n        If a list is given, it is sampled uniformly.\\n\\n    n_iter : int, default=10\\n        Number of parameter settings that are sampled. n_iter trades\\n        off runtime vs quality of the solution.\\n\\n    scoring : string, callable, list/tuple, dict or None, default: None\\n        A single string (see :ref:`scoring_parameter`) or a callable\\n        (see :ref:`scoring`) to evaluate the predictions on the test set.\\n\\n        For evaluating multiple metrics, either give a list of (unique) strings\\n        or a dict with names as keys and callables as values.\\n\\n        NOTE that when using custom scorers, each scorer should return a single\\n        value. Metric functions returning a list/array of values can be wrapped\\n        into multiple scorers that return one value each.\\n\\n        See :ref:`multimetric_grid_search` for an example.\\n\\n        If None, the estimator's score method is used.\\n\\n    n_jobs : int or None, optional (default=None)\\n        Number of jobs to run in parallel.\\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\\n        for more details.\\n\\n    pre_dispatch : int, or string, optional\\n        Controls the number of jobs that get dispatched during parallel\\n        execution. Reducing this number can be useful to avoid an\\n        explosion of memory consumption when more jobs get dispatched\\n        than CPUs can process. This parameter can be:\\n\\n            - None, in which case all the jobs are immediately\\n              created and spawned. Use this for lightweight and\\n              fast-running jobs, to avoid delays due to on-demand\\n              spawning of the jobs\\n\\n            - An int, giving the exact number of total jobs that are\\n              spawned\\n\\n            - A string, giving an expression as a function of n_jobs,\\n              as in '2*n_jobs'\\n\\n    iid : boolean, default='warn'\\n        If True, return the average score across folds, weighted by the number\\n        of samples in each test set. In this case, the data is assumed to be\\n        identically distributed across the folds, and the loss minimized is\\n        the total loss per sample, and not the mean loss across the folds. If\\n        False, return the average score across folds. Default is True, but\\n        will change to False in version 0.22, to correspond to the standard\\n        definition of cross-validation.\\n\\n        .. versionchanged:: 0.20\\n            Parameter ``iid`` will change from True to False by default in\\n            version 0.22, and will be removed in 0.24.\\n\\n    cv : int, cross-validation generator or an iterable, optional\\n        Determines the cross-validation splitting strategy.\\n        Possible inputs for cv are:\\n\\n        - None, to use the default 3-fold cross validation,\\n        - integer, to specify the number of folds in a `(Stratified)KFold`,\\n        - :term:`CV splitter`,\\n        - An iterable yielding (train, test) splits as arrays of indices.\\n\\n        For integer/None inputs, if the estimator is a classifier and ``y`` is\\n        either binary or multiclass, :class:`StratifiedKFold` is used. In all\\n        other cases, :class:`KFold` is used.\\n\\n        Refer :ref:`User Guide <cross_validation>` for the various\\n        cross-validation strategies that can be used here.\\n\\n        .. versionchanged:: 0.20\\n            ``cv`` default value if None will change from 3-fold to 5-fold\\n            in v0.22.\\n\\n    refit : boolean, string, or callable, default=True\\n        Refit an estimator using the best found parameters on the whole\\n        dataset.\\n\\n        For multiple metric evaluation, this needs to be a string denoting the\\n        scorer that would be used to find the best parameters for refitting\\n        the estimator at the end.\\n\\n        Where there are considerations other than maximum score in\\n        choosing a best estimator, ``refit`` can be set to a function which\\n        returns the selected ``best_index_`` given the ``cv_results``.\\n\\n        The refitted estimator is made available at the ``best_estimator_``\\n        attribute and permits using ``predict`` directly on this\\n        ``RandomizedSearchCV`` instance.\\n\\n        Also for multiple metric evaluation, the attributes ``best_index_``,\\n        ``best_score_`` and ``best_params_`` will only be available if\\n        ``refit`` is set and all of them will be determined w.r.t this specific\\n        scorer. When refit is callable, ``best_score_`` is disabled.\\n\\n        See ``scoring`` parameter to know more about multiple metric\\n        evaluation.\\n\\n        .. versionchanged:: 0.20\\n            Support for callable added.\\n\\n    verbose : integer\\n        Controls the verbosity: the higher, the more messages.\\n\\n    random_state : int, RandomState instance or None, optional, default=None\\n        Pseudo random number generator state used for random uniform sampling\\n        from lists of possible values instead of scipy.stats distributions.\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`.\\n\\n    error_score : 'raise' or numeric\\n        Value to assign to the score if an error occurs in estimator fitting.\\n        If set to 'raise', the error is raised. If a numeric value is given,\\n        FitFailedWarning is raised. This parameter does not affect the refit\\n        step, which will always raise the error. Default is 'raise' but from\\n        version 0.22 it will change to np.nan.\\n\\n    return_train_score : boolean, default=False\\n        If ``False``, the ``cv_results_`` attribute will not include training\\n        scores.\\n        Computing training scores is used to get insights on how different\\n        parameter settings impact the overfitting/underfitting trade-off.\\n        However computing the scores on the training set can be computationally\\n        expensive and is not strictly required to select the parameters that\\n        yield the best generalization performance.\\n\\n    Attributes\\n    ----------\\n    cv_results_ : dict of numpy (masked) ndarrays\\n        A dict with keys as column headers and values as columns, that can be\\n        imported into a pandas ``DataFrame``.\\n\\n        For instance the below given table\\n\\n        +--------------+-------------+-------------------+---+---------------+\\n        | param_kernel | param_gamma | split0_test_score |...|rank_test_score|\\n        +==============+=============+===================+===+===============+\\n        |    'rbf'     |     0.1     |       0.80        |...|       2       |\\n        +--------------+-------------+-------------------+---+---------------+\\n        |    'rbf'     |     0.2     |       0.90        |...|       1       |\\n        +--------------+-------------+-------------------+---+---------------+\\n        |    'rbf'     |     0.3     |       0.70        |...|       1       |\\n        +--------------+-------------+-------------------+---+---------------+\\n\\n        will be represented by a ``cv_results_`` dict of::\\n\\n            {\\n            'param_kernel' : masked_array(data = ['rbf', 'rbf', 'rbf'],\\n                                          mask = False),\\n            'param_gamma'  : masked_array(data = [0.1 0.2 0.3], mask = False),\\n            'split0_test_score'  : [0.80, 0.90, 0.70],\\n            'split1_test_score'  : [0.82, 0.50, 0.70],\\n            'mean_test_score'    : [0.81, 0.70, 0.70],\\n            'std_test_score'     : [0.01, 0.20, 0.00],\\n            'rank_test_score'    : [3, 1, 1],\\n            'split0_train_score' : [0.80, 0.92, 0.70],\\n            'split1_train_score' : [0.82, 0.55, 0.70],\\n            'mean_train_score'   : [0.81, 0.74, 0.70],\\n            'std_train_score'    : [0.01, 0.19, 0.00],\\n            'mean_fit_time'      : [0.73, 0.63, 0.43],\\n            'std_fit_time'       : [0.01, 0.02, 0.01],\\n            'mean_score_time'    : [0.01, 0.06, 0.04],\\n            'std_score_time'     : [0.00, 0.00, 0.00],\\n            'params'             : [{'kernel' : 'rbf', 'gamma' : 0.1}, ...],\\n            }\\n\\n        NOTE\\n\\n        The key ``'params'`` is used to store a list of parameter\\n        settings dicts for all the parameter candidates.\\n\\n        The ``mean_fit_time``, ``std_fit_time``, ``mean_score_time`` and\\n        ``std_score_time`` are all in seconds.\\n\\n        For multi-metric evaluation, the scores for all the scorers are\\n        available in the ``cv_results_`` dict at the keys ending with that\\n        scorer's name (``'_<scorer_name>'``) instead of ``'_score'`` shown\\n        above. ('split0_test_precision', 'mean_train_precision' etc.)\\n\\n    best_estimator_ : estimator or dict\\n        Estimator that was chosen by the search, i.e. estimator\\n        which gave highest score (or smallest loss if specified)\\n        on the left out data. Not available if ``refit=False``.\\n\\n        For multi-metric evaluation, this attribute is present only if\\n        ``refit`` is specified.\\n\\n        See ``refit`` parameter for more information on allowed values.\\n\\n    best_score_ : float\\n        Mean cross-validated score of the best_estimator.\\n\\n        For multi-metric evaluation, this is not available if ``refit`` is\\n        ``False``. See ``refit`` parameter for more information.\\n\\n    best_params_ : dict\\n        Parameter setting that gave the best results on the hold out data.\\n\\n        For multi-metric evaluation, this is not available if ``refit`` is\\n        ``False``. See ``refit`` parameter for more information.\\n\\n    best_index_ : int\\n        The index (of the ``cv_results_`` arrays) which corresponds to the best\\n        candidate parameter setting.\\n\\n        The dict at ``search.cv_results_['params'][search.best_index_]`` gives\\n        the parameter setting for the best model, that gives the highest\\n        mean score (``search.best_score_``).\\n\\n        For multi-metric evaluation, this is not available if ``refit`` is\\n        ``False``. See ``refit`` parameter for more information.\\n\\n    scorer_ : function or a dict\\n        Scorer function used on the held out data to choose the best\\n        parameters for the model.\\n\\n        For multi-metric evaluation, this attribute holds the validated\\n        ``scoring`` dict which maps the scorer key to the scorer callable.\\n\\n    n_splits_ : int\\n        The number of cross-validation splits (folds/iterations).\\n\\n    refit_time_ : float\\n        Seconds used for refitting the best model on the whole dataset.\\n\\n        This is present only if ``refit`` is not False.\\n\\n    Notes\\n    -----\\n    The parameters selected are those that maximize the score of the held-out\\n    data, according to the scoring parameter.\\n\\n    If `n_jobs` was set to a value higher than one, the data is copied for each\\n    parameter setting(and not `n_jobs` times). This is done for efficiency\\n    reasons if individual jobs take very little time, but may raise errors if\\n    the dataset is large and not enough memory is available.  A workaround in\\n    this case is to set `pre_dispatch`. Then, the memory is copied only\\n    `pre_dispatch` many times. A reasonable value for `pre_dispatch` is `2 *\\n    n_jobs`.\\n\\n    See Also\\n    --------\\n    :class:`GridSearchCV`:\\n        Does exhaustive search over a grid of parameters.\\n\\n    :class:`ParameterSampler`:\\n        A generator over parameter settings, constructed from\\n        param_distributions.\\n\\n    \",\n      inputs: [\n        {\n          name: 'estimator',\n          docstring:\n            'A object of that type is instantiated for each grid point. This is assumed to implement the scikit-learn estimator interface. Either estimator needs to provide a ``score`` function, or ``scoring`` must be passed.',\n          param_type: ['object'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null\n        },\n        {\n          name: 'param_distributions',\n          docstring:\n            'Dictionary with parameters names (string) as keys and distributions or lists of parameters to try. Distributions must provide a ``rvs`` method for sampling (such as those from scipy.stats.distributions). If a list is given, it is sampled uniformly.',\n          param_type: ['dict'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null\n        },\n        {\n          name: 'n_iter',\n          docstring:\n            'Number of parameter settings that are sampled. n_iter trades off runtime vs quality of the solution.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '10'\n        },\n        {\n          name: 'scoring',\n          docstring:\n            \"A single string (see :ref:`scoring_parameter`) or a callable (see :ref:`scoring`) to evaluate the predictions on the test set.  For evaluating multiple metrics, either give a list of (unique) strings or a dict with names as keys and callables as values.  NOTE that when using custom scorers, each scorer should return a single value. Metric functions returning a list/array of values can be wrapped into multiple scorers that return one value each.  See :ref:`multimetric_grid_search` for an example.  If None, the estimator's score method is used.\",\n          param_type: ['str', 'dict', 'list', 'tuple', 'callable', null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'None'\n        },\n        {\n          name: 'n_jobs',\n          docstring:\n            'Number of jobs to run in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.',\n          param_type: ['int', null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'None'\n        },\n        {\n          name: 'pre_dispatch',\n          docstring:\n            \"Controls the number of jobs that get dispatched during parallel execution. Reducing this number can be useful to avoid an explosion of memory consumption when more jobs get dispatched than CPUs can process. This parameter can be:      - None, in which case all the jobs are immediately       created and spawned. Use this for lightweight and       fast-running jobs, to avoid delays due to on-demand       spawning of the jobs      - An int, giving the exact number of total jobs that are       spawned      - A string, giving an expression as a function of n_jobs,       as in '2*n_jobs'\",\n          param_type: ['int', 'str'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null\n        },\n        {\n          name: 'iid',\n          docstring:\n            'If True, return the average score across folds, weighted by the number of samples in each test set. In this case, the data is assumed to be identically distributed across the folds, and the loss minimized is the total loss per sample, and not the mean loss across the folds. If False, return the average score across folds. Default is True, but will change to False in version 0.22, to correspond to the standard definition of cross-validation.  .. versionchanged:: 0.20     Parameter ``iid`` will change from True to False by default in     version 0.22, and will be removed in 0.24.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'warn'\n        },\n        {\n          name: 'cv',\n          docstring:\n            'Determines the cross-validation splitting strategy. Possible inputs for cv are:  - None, to use the default 3-fold cross validation, - integer, to specify the number of folds in a `(Stratified)KFold`, - :term:`CV splitter`, - An iterable yielding (train, test) splits as arrays of indices.  For integer/None inputs, if the estimator is a classifier and ``y`` is either binary or multiclass, :class:`StratifiedKFold` is used. In all other cases, :class:`KFold` is used.  Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here.  .. versionchanged:: 0.20     ``cv`` default value if None will change from 3-fold to 5-fold     in v0.22.',\n          param_type: ['int', 'iter'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null\n        },\n        {\n          name: 'refit',\n          docstring:\n            'Refit an estimator using the best found parameters on the whole dataset.  For multiple metric evaluation, this needs to be a string denoting the scorer that would be used to find the best parameters for refitting the estimator at the end.  Where there are considerations other than maximum score in choosing a best estimator, ``refit`` can be set to a function which returns the selected ``best_index_`` given the ``cv_results``.  The refitted estimator is made available at the ``best_estimator_`` attribute and permits using ``predict`` directly on this ``RandomizedSearchCV`` instance.  Also for multiple metric evaluation, the attributes ``best_index_``, ``best_score_`` and ``best_params_`` will only be available if ``refit`` is set and all of them will be determined w.r.t this specific scorer. When refit is callable, ``best_score_`` is disabled.  See ``scoring`` parameter to know more about multiple metric evaluation.  .. versionchanged:: 0.20     Support for callable added.',\n          param_type: ['bool', 'str', 'callable'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True'\n        },\n        {\n          name: 'verbose',\n          docstring: 'Controls the verbosity: the higher, the more messages.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null\n        },\n        {\n          name: 'random_state',\n          docstring:\n            'Pseudo random number generator state used for random uniform sampling from lists of possible values instead of scipy.stats distributions. If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.',\n          param_type: ['int', null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'None'\n        },\n        {\n          name: 'error_score',\n          docstring:\n            \"Value to assign to the score if an error occurs in estimator fitting. If set to 'raise', the error is raised. If a numeric value is given, FitFailedWarning is raised. This parameter does not affect the refit step, which will always raise the error. Default is 'raise' but from version 0.22 it will change to np.nan.\",\n          param_type: [null],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null\n        },\n        {\n          name: 'return_train_score',\n          docstring:\n            'If ``False``, the ``cv_results_`` attribute will not include training scores. Computing training scores is used to get insights on how different parameter settings impact the overfitting/underfitting trade-off. However computing the scores on the training set can be computationally expensive and is not strictly required to select the parameters that yield the best generalization performance.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'False'\n        }\n      ],\n      outputs: [\n        {\n          name: 'cv_results_',\n          docstring:\n            \"A dict with keys as column headers and values as columns, that can be imported into a pandas ``DataFrame``.  For instance the below given table  +--------------+-------------+-------------------+---+---------------+ | param_kernel | param_gamma | split0_test_score |...|rank_test_score| +==============+=============+===================+===+===============+ |    'rbf'     |     0.1     |       0.80        |...|       2       | +--------------+-------------+-------------------+---+---------------+ |    'rbf'     |     0.2     |       0.90        |...|       1       | +--------------+-------------+-------------------+---+---------------+ |    'rbf'     |     0.3     |       0.70        |...|       1       | +--------------+-------------+-------------------+---+---------------+  will be represented by a ``cv_results_`` dict of::      {     'param_kernel' : masked_array(data = ['rbf', 'rbf', 'rbf'],                                   mask = False),     'param_gamma'  : masked_array(data = [0.1 0.2 0.3], mask = False),     'split0_test_score'  : [0.80, 0.90, 0.70],     'split1_test_score'  : [0.82, 0.50, 0.70],     'mean_test_score'    : [0.81, 0.70, 0.70],     'std_test_score'     : [0.01, 0.20, 0.00],     'rank_test_score'    : [3, 1, 1],     'split0_train_score' : [0.80, 0.92, 0.70],     'split1_train_score' : [0.82, 0.55, 0.70],     'mean_train_score'   : [0.81, 0.74, 0.70],     'std_train_score'    : [0.01, 0.19, 0.00],     'mean_fit_time'      : [0.73, 0.63, 0.43],     'std_fit_time'       : [0.01, 0.02, 0.01],     'mean_score_time'    : [0.01, 0.06, 0.04],     'std_score_time'     : [0.00, 0.00, 0.00],     'params'             : [{'kernel' : 'rbf', 'gamma' : 0.1}, ...],     }  NOTE  The key ``'params'`` is used to store a list of parameter settings dicts for all the parameter candidates.  The ``mean_fit_time``, ``std_fit_time``, ``mean_score_time`` and ``std_score_time`` are all in seconds.  For multi-metric evaluation, the scores for all the scorers are available in the ``cv_results_`` dict at the keys ending with that scorer's name (``'_<scorer_name>'``) instead of ``'_score'`` shown above. ('split0_test_precision', 'mean_train_precision' etc.)\",\n          param_type: ['array', 'dict'],\n          returned: false\n        },\n        {\n          name: 'best_estimator_',\n          docstring:\n            'Estimator that was chosen by the search, i.e. estimator which gave highest score (or smallest loss if specified) on the left out data. Not available if ``refit=False``.  For multi-metric evaluation, this attribute is present only if ``refit`` is specified.  See ``refit`` parameter for more information on allowed values.',\n          param_type: ['dict'],\n          returned: false\n        },\n        {\n          name: 'best_score_',\n          docstring:\n            'Mean cross-validated score of the best_estimator.  For multi-metric evaluation, this is not available if ``refit`` is ``False``. See ``refit`` parameter for more information.',\n          param_type: ['float'],\n          returned: false\n        },\n        {\n          name: 'best_params_',\n          docstring:\n            'Parameter setting that gave the best results on the hold out data.  For multi-metric evaluation, this is not available if ``refit`` is ``False``. See ``refit`` parameter for more information.',\n          param_type: ['dict'],\n          returned: false\n        },\n        {\n          name: 'best_index_',\n          docstring:\n            \"The index (of the ``cv_results_`` arrays) which corresponds to the best candidate parameter setting.  The dict at ``search.cv_results_['params'][search.best_index_]`` gives the parameter setting for the best model, that gives the highest mean score (``search.best_score_``).  For multi-metric evaluation, this is not available if ``refit`` is ``False``. See ``refit`` parameter for more information.\",\n          param_type: ['int'],\n          returned: false\n        },\n        {\n          name: 'scorer_',\n          docstring:\n            'Scorer function used on the held out data to choose the best parameters for the model.  For multi-metric evaluation, this attribute holds the validated ``scoring`` dict which maps the scorer key to the scorer callable.',\n          param_type: ['dict'],\n          returned: false\n        },\n        {\n          name: 'n_splits_',\n          docstring:\n            'The number of cross-validation splits (folds/iterations).',\n          param_type: ['int'],\n          returned: false\n        },\n        {\n          name: 'refit_time_',\n          docstring:\n            'Seconds used for refitting the best model on the whole dataset.  This is present only if ``refit`` is not False.',\n          param_type: ['float'],\n          returned: false\n        }\n      ],\n      node_functions: [\n        {\n          name: '__init__',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_check_is_fitted',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_format_results',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_param_names',\n          docstring: 'Get parameter names for the estimator',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_tags',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_run_search',\n          docstring: 'Search n_iter candidates from param_distributions',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'decision_function',\n          docstring:\n            'Call decision_function on the estimator with the best found parameters.\\n\\n        Only available if ``refit=True`` and the underlying estimator supports\\n        ``decision_function``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Must fulfill the input assumptions of the underlying estimator.',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'fit',\n          docstring:\n            'Run fit with all sets of parameters.\\n\\n        Parameters\\n        ----------\\n\\n        X : array-like, shape = [n_samples, n_features]\\n            Training vector, where n_samples is the number of samples and\\n            n_features is the number of features.\\n\\n        y : array-like, shape = [n_samples] or [n_samples, n_output], optional\\n            Target relative to X for classification or regression;\\n            None for unsupervised learning.\\n\\n        groups : array-like, with shape (n_samples,), optional\\n            Group labels for the samples used while splitting the dataset into\\n            train/test set. Only used in conjunction with a \"Group\" `cv`\\n            instance (e.g., `GroupKFold`).\\n\\n        **fit_params : dict of string -> object\\n            Parameters passed to the ``fit`` method of the estimator\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Training vector, where n_samples is the number of samples and n_features is the number of features.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null\n            },\n            {\n              name: 'y',\n              docstring:\n                'Target relative to X for classification or regression; None for unsupervised learning.',\n              param_type: ['array'],\n              expected_shape: '[n_samples] or [n_samples, n_output], optional',\n              is_optional: true,\n              default_value: null\n            },\n            {\n              name: 'groups',\n              docstring:\n                'Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a \"Group\" `cv` instance (e.g., `GroupKFold`).',\n              param_type: ['array'],\n              expected_shape: '(n_samples,), optional',\n              is_optional: true,\n              default_value: null\n            },\n            {\n              name: '**fit_params',\n              docstring:\n                'Parameters passed to the ``fit`` method of the estimator',\n              param_type: ['object', 'str', 'dict'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'get_params',\n          docstring:\n            'Get parameters for this estimator.\\n\\n        Parameters\\n        ----------\\n        deep : boolean, optional\\n            If True, will return the parameters for this estimator and\\n            contained subobjects that are estimators.\\n\\n        Returns\\n        -------\\n        params : mapping of string to any\\n            Parameter names mapped to their values.\\n        ',\n          inputs: [\n            {\n              name: 'deep',\n              docstring:\n                'If True, will return the parameters for this estimator and contained subobjects that are estimators.',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'params',\n              docstring: 'Parameter names mapped to their values.',\n              param_type: ['str'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'inverse_transform',\n          docstring:\n            'Call inverse_transform on the estimator with the best found params.\\n\\n        Only available if the underlying estimator implements\\n        ``inverse_transform`` and ``refit=True``.\\n\\n        Parameters\\n        ----------\\n        Xt : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n          inputs: [\n            {\n              name: 'Xt',\n              docstring:\n                'Must fulfill the input assumptions of the underlying estimator.',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'predict',\n          docstring:\n            'Call predict on the estimator with the best found parameters.\\n\\n        Only available if ``refit=True`` and the underlying estimator supports\\n        ``predict``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Must fulfill the input assumptions of the underlying estimator.',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'predict_log_proba',\n          docstring:\n            'Call predict_log_proba on the estimator with the best found parameters.\\n\\n        Only available if ``refit=True`` and the underlying estimator supports\\n        ``predict_log_proba``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Must fulfill the input assumptions of the underlying estimator.',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'predict_proba',\n          docstring:\n            'Call predict_proba on the estimator with the best found parameters.\\n\\n        Only available if ``refit=True`` and the underlying estimator supports\\n        ``predict_proba``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Must fulfill the input assumptions of the underlying estimator.',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'score',\n          docstring:\n            'Returns the score on the given data, if the estimator has been refit.\\n\\n        This uses the score defined by ``scoring`` where provided, and the\\n        ``best_estimator_.score`` method otherwise.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape = [n_samples, n_features]\\n            Input data, where n_samples is the number of samples and\\n            n_features is the number of features.\\n\\n        y : array-like, shape = [n_samples] or [n_samples, n_output], optional\\n            Target relative to X for classification or regression;\\n            None for unsupervised learning.\\n\\n        Returns\\n        -------\\n        score : float\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Input data, where n_samples is the number of samples and n_features is the number of features.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null\n            },\n            {\n              name: 'y',\n              docstring:\n                'Target relative to X for classification or regression; None for unsupervised learning.',\n              param_type: ['array'],\n              expected_shape: '[n_samples] or [n_samples, n_output], optional',\n              is_optional: true,\n              default_value: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'score',\n              docstring: '',\n              param_type: ['float'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'set_params',\n          docstring:\n            \"Set the parameters of this estimator.\\n\\n        The method works on simple estimators as well as on nested objects\\n        (such as pipelines). The latter have parameters of the form\\n        ``<component>__<parameter>`` so that it's possible to update each\\n        component of a nested object.\\n\\n        Returns\\n        -------\\n        self\\n        \",\n          inputs: [],\n          outputs: [\n            {\n              name: '',\n              docstring: '',\n              param_type: [null],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'transform',\n          docstring:\n            'Call transform on the estimator with the best found parameters.\\n\\n        Only available if the underlying estimator supports ``transform`` and\\n        ``refit=True``.\\n\\n        Parameters\\n        ----------\\n        X : indexable, length n_samples\\n            Must fulfill the input assumptions of the\\n            underlying estimator.\\n\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Must fulfill the input assumptions of the underlying estimator.',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            }\n          ],\n          outputs: []\n        }\n      ],\n      nodes: []\n    }\n  ],\n  library: 'sklearn',\n  module: 'model_selection'\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/jsons/sklearnModelSelection.js","export default {\n  inputs: [],\n  module: 'decomposition',\n  library: 'sklearn',\n  name: 'sklearn.decomposition',\n  nodes: [\n    {\n      inputs: [\n        {\n          is_optional: false,\n          param_type: ['int', null],\n          name: 'n_components',\n          docstring:\n            'Dimensionality of latent space, the number of components of ``X`` that are obtained after ``transform``. If None, n_components is set to the number of features.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['float'],\n          name: 'tol',\n          docstring: 'Stopping tolerance for EM algorithm.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['bool'],\n          name: 'copy',\n          docstring:\n            'Whether to make a copy of X. If ``False``, the input X gets overwritten during fitting.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['int'],\n          name: 'max_iter',\n          docstring: 'Maximum number of iterations.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['LIST_VALID_OPTIONS', 'array', null],\n          name: 'noise_variance_init',\n          docstring:\n            'The initial guess of the noise variance for each feature. If None, it defaults to np.ones(n_features)',\n          options: ['None ', ' array, shape=(n_features,)'],\n          default_value: null,\n          expected_shape: '(n_features,)'\n        },\n        {\n          is_optional: false,\n          param_type: ['LIST_VALID_OPTIONS'],\n          name: 'svd_method',\n          docstring:\n            \"Which SVD method to use. If 'lapack' use standard SVD from scipy.linalg, if 'randomized' use fast ``randomized_svd`` function. Defaults to 'randomized'. For most applications 'randomized' will be sufficiently precise while providing significant speed gains. Accuracy can also be improved by setting higher values for `iterated_power`. If this is not sufficient, for maximum precision you should choose 'lapack'.\",\n          options: ['lapack', 'randomized'],\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int'],\n          name: 'iterated_power',\n          docstring:\n            \"Number of iterations for the power method. 3 by default. Only used if ``svd_method`` equals 'randomized'\",\n          options: null,\n          default_value: '3',\n          expected_shape: null\n        }\n      ],\n      name: 'FactorAnalysis',\n      nodes: [],\n      node_functions: [\n        {\n          inputs: [],\n          outputs: [],\n          name: '__init__',\n          docstring: 'None'\n        },\n        {\n          inputs: [],\n          outputs: [],\n          name: '_get_param_names',\n          docstring: 'Get parameter names for the estimator'\n        },\n        {\n          inputs: [\n            {\n              is_optional: false,\n              param_type: ['array'],\n              name: 'X',\n              docstring: 'Training data.',\n              options: null,\n              default_value: null,\n              expected_shape: '(n_samples, n_features)'\n            },\n            {\n              is_optional: false,\n              param_type: [null],\n              name: 'y',\n              docstring: '',\n              options: null,\n              default_value: null,\n              expected_shape: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'fit',\n          docstring:\n            'Fit the FactorAnalysis model to X using EM\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n            Training data.\\n\\n        y : Ignored\\n\\n        Returns\\n        -------\\n        self\\n        '\n        },\n        {\n          inputs: [\n            {\n              is_optional: false,\n              param_type: ['array'],\n              name: 'X',\n              docstring: 'Training set.',\n              options: null,\n              default_value: null,\n              expected_shape: '[n_samples, n_features]'\n            },\n            {\n              is_optional: false,\n              param_type: ['array'],\n              name: 'y',\n              docstring: 'Target values.',\n              options: null,\n              default_value: null,\n              expected_shape: '[n_samples]'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              returned: true,\n              param_type: ['array'],\n              name: 'X_new',\n              docstring: 'Transformed array.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'fit_transform',\n          docstring:\n            'Fit to data, then transform it.\\n\\n        Fits transformer to X and y with optional parameters fit_params\\n        and returns a transformed version of X.\\n\\n        Parameters\\n        ----------\\n        X : numpy array of shape [n_samples, n_features]\\n            Training set.\\n\\n        y : numpy array of shape [n_samples]\\n            Target values.\\n\\n        Returns\\n        -------\\n        X_new : numpy array of shape [n_samples, n_features_new]\\n            Transformed array.\\n\\n        '\n        },\n        {\n          inputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              returned: true,\n              param_type: ['array'],\n              name: 'cov',\n              docstring: 'Estimated covariance of data.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'get_covariance',\n          docstring:\n            'Compute data covariance with the FactorAnalysis model.\\n\\n        ``cov = components_.T * components_ + diag(noise_variance)``\\n\\n        Returns\\n        -------\\n        cov : array, shape (n_features, n_features)\\n            Estimated covariance of data.\\n        '\n        },\n        {\n          inputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              returned: true,\n              param_type: ['array'],\n              name: 'precision',\n              docstring: 'Estimated precision of data.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'get_precision',\n          docstring:\n            'Compute data precision matrix with the FactorAnalysis model.\\n\\n        Returns\\n        -------\\n        precision : array, shape (n_features, n_features)\\n            Estimated precision of data.\\n        '\n        },\n        {\n          inputs: [\n            {\n              is_optional: false,\n              param_type: ['array'],\n              name: 'X',\n              docstring: 'The data',\n              options: null,\n              default_value: null,\n              expected_shape: '(n_samples, n_features)'\n            },\n            {\n              is_optional: true,\n              param_type: [null],\n              name: 'y',\n              docstring: '',\n              options: null,\n              default_value: null,\n              expected_shape: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              returned: true,\n              param_type: ['float'],\n              name: 'll',\n              docstring:\n                'Average log-likelihood of the samples under the current model'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'score',\n          docstring:\n            'Compute the average log-likelihood of the samples\\n\\n        Parameters\\n        ----------\\n        X : array, shape (n_samples, n_features)\\n            The data\\n\\n        y : Ignored\\n\\n        Returns\\n        -------\\n        ll : float\\n            Average log-likelihood of the samples under the current model\\n        '\n        },\n        {\n          inputs: [\n            {\n              is_optional: false,\n              param_type: ['array'],\n              name: 'X',\n              docstring: 'The data',\n              options: null,\n              default_value: null,\n              expected_shape: '(n_samples, n_features)'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              returned: true,\n              param_type: ['array'],\n              name: 'll',\n              docstring: 'Log-likelihood of each sample under the current model'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'score_samples',\n          docstring:\n            'Compute the log-likelihood of each sample\\n\\n        Parameters\\n        ----------\\n        X : array, shape (n_samples, n_features)\\n            The data\\n\\n        Returns\\n        -------\\n        ll : array, shape (n_samples,)\\n            Log-likelihood of each sample under the current model\\n        '\n        },\n        {\n          inputs: [\n            {\n              is_optional: false,\n              param_type: ['array'],\n              name: 'X',\n              docstring: 'Training data.',\n              options: null,\n              default_value: null,\n              expected_shape: '(n_samples, n_features)'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              returned: true,\n              param_type: ['array'],\n              name: 'X_new',\n              docstring: 'The latent variables of X.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'transform',\n          docstring:\n            'Apply dimensionality reduction to X using the model.\\n\\n        Compute the expected mean of the latent variables.\\n        See Barber, 21.2.33 (or Bishop, 12.66).\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n            Training data.\\n\\n        Returns\\n        -------\\n        X_new : array-like, shape (n_samples, n_components)\\n            The latent variables of X.\\n        '\n        }\n      ],\n      docstring:\n        \"Factor Analysis (FA)\\n\\n    A simple linear generative model with Gaussian latent variables.\\n\\n    The observations are assumed to be caused by a linear transformation of\\n    lower dimensional latent factors and added Gaussian noise.\\n    Without loss of generality the factors are distributed according to a\\n    Gaussian with zero mean and unit covariance. The noise is also zero mean\\n    and has an arbitrary diagonal covariance matrix.\\n\\n    If we would restrict the model further, by assuming that the Gaussian\\n    noise is even isotropic (all diagonal entries are the same) we would obtain\\n    :class:`PPCA`.\\n\\n    FactorAnalysis performs a maximum likelihood estimate of the so-called\\n    `loading` matrix, the transformation of the latent variables to the\\n    observed ones, using expectation-maximization (EM).\\n\\n    Read more in the :ref:`User Guide <FA>`.\\n\\n    Parameters\\n    ----------\\n    n_components : int | None\\n        Dimensionality of latent space, the number of components\\n        of ``X`` that are obtained after ``transform``.\\n        If None, n_components is set to the number of features.\\n\\n    tol : float\\n        Stopping tolerance for EM algorithm.\\n\\n    copy : bool\\n        Whether to make a copy of X. If ``False``, the input X gets overwritten\\n        during fitting.\\n\\n    max_iter : int\\n        Maximum number of iterations.\\n\\n    noise_variance_init : None | array, shape=(n_features,)\\n        The initial guess of the noise variance for each feature.\\n        If None, it defaults to np.ones(n_features)\\n\\n    svd_method : {'lapack', 'randomized'}\\n        Which SVD method to use. If 'lapack' use standard SVD from\\n        scipy.linalg, if 'randomized' use fast ``randomized_svd`` function.\\n        Defaults to 'randomized'. For most applications 'randomized' will\\n        be sufficiently precise while providing significant speed gains.\\n        Accuracy can also be improved by setting higher values for\\n        `iterated_power`. If this is not sufficient, for maximum precision\\n        you should choose 'lapack'.\\n\\n    iterated_power : int, optional\\n        Number of iterations for the power method. 3 by default. Only used\\n        if ``svd_method`` equals 'randomized'\\n\\n    random_state : int, RandomState instance or None, optional (default=0)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`. Only used when ``svd_method`` equals 'randomized'.\\n\\n    Attributes\\n    ----------\\n    components_ : array, [n_components, n_features]\\n        Components with maximum variance.\\n\\n    loglike_ : list, [n_iterations]\\n        The log likelihood at each iteration.\\n\\n    noise_variance_ : array, shape=(n_features,)\\n        The estimated noise variance for each feature.\\n\\n    n_iter_ : int\\n        Number of iterations run.\\n\\n    Examples\\n    --------\\n    >>> from sklearn.datasets import load_digits\\n    >>> from sklearn.decomposition import FactorAnalysis\\n    >>> X, _ = load_digits(return_X_y=True)\\n    >>> transformer = FactorAnalysis(n_components=7, random_state=0)\\n    >>> X_transformed = transformer.fit_transform(X)\\n    >>> X_transformed.shape\\n    (1797, 7)\\n\\n    References\\n    ----------\\n    .. David Barber, Bayesian Reasoning and Machine Learning,\\n        Algorithm 21.1\\n\\n    .. Christopher M. Bishop: Pattern Recognition and Machine Learning,\\n        Chapter 12.2.4\\n\\n    See also\\n    --------\\n    PCA: Principal component analysis is also a latent linear variable model\\n        which however assumes equal noise variance for each feature.\\n        This extra assumption makes probabilistic PCA faster as it can be\\n        computed in closed form.\\n    FastICA: Independent component analysis, a latent variable model with\\n        non-Gaussian latent variables.\\n    \",\n      outputs: [\n        {\n          returned: false,\n          param_type: ['array'],\n          name: 'components_',\n          docstring: 'Components with maximum variance.'\n        },\n        {\n          returned: false,\n          param_type: ['list'],\n          name: 'loglike_',\n          docstring: 'The log likelihood at each iteration.'\n        },\n        {\n          returned: false,\n          param_type: ['array'],\n          name: 'noise_variance_',\n          docstring: 'The estimated noise variance for each feature.'\n        },\n        {\n          returned: false,\n          param_type: ['int'],\n          name: 'n_iter_',\n          docstring: 'Number of iterations run.'\n        }\n      ]\n    },\n    {\n      inputs: [\n        {\n          is_optional: false,\n          param_type: ['int', 'float', 'str', null],\n          name: 'n_components',\n          docstring:\n            \"Number of components to keep. if n_components is not set all components are kept::      n_components == min(n_samples, n_features)  If ``n_components == 'mle'`` and ``svd_solver == 'full'``, Minka's MLE is used to guess the dimension. Use of ``n_components == 'mle'`` will interpret ``svd_solver == 'auto'`` as ``svd_solver == 'full'``.  If ``0 < n_components < 1`` and ``svd_solver == 'full'``, select the number of components such that the amount of variance that needs to be explained is greater than the percentage specified by n_components.  If ``svd_solver == 'arpack'``, the number of components must be strictly less than the minimum of n_features and n_samples.  Hence, the None case results in::      n_components == min(n_samples, n_features) - 1\",\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['bool'],\n          name: 'copy',\n          docstring:\n            'If False, data passed to fit are overwritten and running fit(X).transform(X) will not yield the expected results, use fit_transform(X) instead.',\n          options: null,\n          default_value: 'True',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['bool'],\n          name: 'whiten',\n          docstring:\n            'When True (False by default) the `components_` vectors are multiplied by the square root of n_samples and then divided by the singular values to ensure uncorrelated outputs with unit component-wise variances.  Whitening will remove some information from the transformed signal (the relative variance scales of the components) but can sometime improve the predictive accuracy of the downstream estimators by making their data respect some hard-wired assumptions.',\n          options: null,\n          default_value: 'False',\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['LIST_VALID_OPTIONS'],\n          name: 'svd_solver',\n          docstring:\n            \"auto :     the solver is selected by a default policy based on `X.shape` and     `n_components`: if the input data is larger than 500x500 and the     number of components to extract is lower than 80% of the smallest     dimension of the data, then the more efficient 'randomized'     method is enabled. Otherwise the exact full SVD is computed and     optionally truncated afterwards. full :     run exact full SVD calling the standard LAPACK solver via     `scipy.linalg.svd` and select the components by postprocessing arpack :     run SVD truncated to n_components calling ARPACK solver via     `scipy.sparse.linalg.svds`. It requires strictly     0 < n_components < min(X.shape) randomized :     run randomized SVD by the method of Halko et al.  .. versionadded:: 0.18.0\",\n          options: ['auto', 'full', 'arpack', 'randomized'],\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['float'],\n          name: 'tol',\n          docstring:\n            \"Tolerance for singular values computed by svd_solver == 'arpack'.  .. versionadded:: 0.18.0\",\n          options: null,\n          default_value: '.0',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int'],\n          name: 'iterated_power',\n          docstring:\n            \"Number of iterations for the power method computed by svd_solver == 'randomized'.  .. versionadded:: 0.18.0\",\n          options: null,\n          default_value: 'auto',\n          expected_shape: null\n        }\n      ],\n      name: 'PCA',\n      nodes: [],\n      node_functions: [\n        {\n          inputs: [],\n          outputs: [],\n          name: '__init__',\n          docstring: 'None'\n        },\n        {\n          inputs: [],\n          outputs: [],\n          name: '_fit',\n          docstring:\n            'Dispatch to the right submethod depending on the chosen solver.'\n        },\n        {\n          inputs: [],\n          outputs: [],\n          name: '_fit_full',\n          docstring: 'Fit the model by computing full SVD on X'\n        },\n        {\n          inputs: [],\n          outputs: [],\n          name: '_fit_truncated',\n          docstring:\n            'Fit the model by computing truncated SVD (by ARPACK or randomized)\\n        on X\\n        '\n        },\n        {\n          inputs: [],\n          outputs: [],\n          name: '_get_param_names',\n          docstring: 'Get parameter names for the estimator'\n        },\n        {\n          inputs: [\n            {\n              is_optional: false,\n              param_type: ['array'],\n              name: 'X',\n              docstring:\n                'Training data, where n_samples is the number of samples and n_features is the number of features.',\n              options: null,\n              default_value: null,\n              expected_shape: '(n_samples, n_features)'\n            },\n            {\n              is_optional: true,\n              param_type: [null],\n              name: 'y',\n              docstring: 'Ignored',\n              options: null,\n              default_value: null,\n              expected_shape: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'fit',\n          docstring:\n            'Fit the model with X.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n            Training data, where n_samples is the number of samples\\n            and n_features is the number of features.\\n\\n        y : Ignored\\n\\n        Returns\\n        -------\\n        self : object\\n            Returns the instance itself.\\n        '\n        },\n        {\n          inputs: [\n            {\n              is_optional: false,\n              param_type: ['array'],\n              name: 'X',\n              docstring:\n                'Training data, where n_samples is the number of samples and n_features is the number of features.',\n              options: null,\n              default_value: null,\n              expected_shape: '(n_samples, n_features)'\n            },\n            {\n              is_optional: true,\n              param_type: [null],\n              name: 'y',\n              docstring: 'Ignored',\n              options: null,\n              default_value: null,\n              expected_shape: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              returned: true,\n              param_type: ['array'],\n              name: 'X_new',\n              docstring: ''\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'fit_transform',\n          docstring:\n            'Fit the model with X and apply the dimensionality reduction on X.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n            Training data, where n_samples is the number of samples\\n            and n_features is the number of features.\\n\\n        y : Ignored\\n\\n        Returns\\n        -------\\n        X_new : array-like, shape (n_samples, n_components)\\n\\n        '\n        },\n        {\n          inputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              returned: true,\n              param_type: ['array'],\n              name: 'cov',\n              docstring: 'Estimated covariance of data.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'get_covariance',\n          docstring:\n            'Compute data covariance with the generative model.\\n\\n        ``cov = components_.T * S**2 * components_ + sigma2 * eye(n_features)``\\n        where  S**2 contains the explained variances, and sigma2 contains the\\n        noise variances.\\n\\n        Returns\\n        -------\\n        cov : array, shape=(n_features, n_features)\\n            Estimated covariance of data.\\n        '\n        },\n        {\n          inputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              returned: true,\n              param_type: ['array'],\n              name: 'precision',\n              docstring: 'Estimated precision of data.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'get_precision',\n          docstring:\n            'Compute data precision matrix with the generative model.\\n\\n        Equals the inverse of the covariance but computed with\\n        the matrix inversion lemma for efficiency.\\n\\n        Returns\\n        -------\\n        precision : array, shape=(n_features, n_features)\\n            Estimated precision of data.\\n        '\n        },\n        {\n          inputs: [\n            {\n              is_optional: false,\n              param_type: ['array'],\n              name: 'X',\n              docstring:\n                'New data, where n_samples is the number of samples and n_components is the number of components.',\n              options: null,\n              default_value: null,\n              expected_shape: '(n_samples, n_components)'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              returned: true,\n              param_type: [null],\n              name: 'X_original array-like, shape (n_samples, n_features)',\n              docstring: ''\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'inverse_transform',\n          docstring:\n            'Transform data back to its original space.\\n\\n        In other words, return an input X_original whose transform would be X.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_components)\\n            New data, where n_samples is the number of samples\\n            and n_components is the number of components.\\n\\n        Returns\\n        -------\\n        X_original array-like, shape (n_samples, n_features)\\n\\n        Notes\\n        -----\\n        If whitening is enabled, inverse_transform will compute the\\n        exact inverse operation, which includes reversing whitening.\\n        '\n        },\n        {\n          inputs: [\n            {\n              is_optional: false,\n              param_type: ['array'],\n              name: 'X',\n              docstring: 'The data.',\n              options: null,\n              default_value: null,\n              expected_shape: '(n_samples, n_features)'\n            },\n            {\n              is_optional: true,\n              param_type: [null],\n              name: 'y',\n              docstring: 'Ignored',\n              options: null,\n              default_value: null,\n              expected_shape: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              returned: true,\n              param_type: ['float'],\n              name: 'll',\n              docstring:\n                'Average log-likelihood of the samples under the current model'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'score',\n          docstring:\n            'Return the average log-likelihood of all samples.\\n\\n        See. \"Pattern Recognition and Machine Learning\"\\n        by C. Bishop, 12.2.1 p. 574\\n        or http://www.miketipping.com/papers/met-mppca.pdf\\n\\n        Parameters\\n        ----------\\n        X : array, shape(n_samples, n_features)\\n            The data.\\n\\n        y : Ignored\\n\\n        Returns\\n        -------\\n        ll : float\\n            Average log-likelihood of the samples under the current model\\n        '\n        },\n        {\n          inputs: [\n            {\n              is_optional: false,\n              param_type: ['array'],\n              name: 'X',\n              docstring: 'The data.',\n              options: null,\n              default_value: null,\n              expected_shape: '(n_samples, n_features)'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              returned: true,\n              param_type: ['array'],\n              name: 'll',\n              docstring: 'Log-likelihood of each sample under the current model'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'score_samples',\n          docstring:\n            'Return the log-likelihood of each sample.\\n\\n        See. \"Pattern Recognition and Machine Learning\"\\n        by C. Bishop, 12.2.1 p. 574\\n        or http://www.miketipping.com/papers/met-mppca.pdf\\n\\n        Parameters\\n        ----------\\n        X : array, shape(n_samples, n_features)\\n            The data.\\n\\n        Returns\\n        -------\\n        ll : array, shape (n_samples,)\\n            Log-likelihood of each sample under the current model\\n        '\n        },\n        {\n          inputs: [\n            {\n              is_optional: false,\n              param_type: ['array'],\n              name: 'X',\n              docstring:\n                'New data, where n_samples is the number of samples and n_features is the number of features.',\n              options: null,\n              default_value: null,\n              expected_shape: '(n_samples, n_features)'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              returned: true,\n              param_type: ['array'],\n              name: 'X_new',\n              docstring: ''\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'transform',\n          docstring:\n            'Apply dimensionality reduction to X.\\n\\n        X is projected on the first principal components previously extracted\\n        from a training set.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n            New data, where n_samples is the number of samples\\n            and n_features is the number of features.\\n\\n        Returns\\n        -------\\n        X_new : array-like, shape (n_samples, n_components)\\n\\n        Examples\\n        --------\\n\\n        >>> import numpy as np\\n        >>> from sklearn.decomposition import IncrementalPCA\\n        >>> X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\\n        >>> ipca = IncrementalPCA(n_components=2, batch_size=3)\\n        >>> ipca.fit(X)\\n        IncrementalPCA(batch_size=3, copy=True, n_components=2, whiten=False)\\n        >>> ipca.transform(X) # doctest: +SKIP\\n        '\n        }\n      ],\n      docstring:\n        \"Principal component analysis (PCA)\\n\\n    Linear dimensionality reduction using Singular Value Decomposition of the\\n    data to project it to a lower dimensional space.\\n\\n    It uses the LAPACK implementation of the full SVD or a randomized truncated\\n    SVD by the method of Halko et al. 2009, depending on the shape of the input\\n    data and the number of components to extract.\\n\\n    It can also use the scipy.sparse.linalg ARPACK implementation of the\\n    truncated SVD.\\n\\n    Notice that this class does not support sparse input. See\\n    :class:`TruncatedSVD` for an alternative with sparse data.\\n\\n    Read more in the :ref:`User Guide <PCA>`.\\n\\n    Parameters\\n    ----------\\n    n_components : int, float, None or string\\n        Number of components to keep.\\n        if n_components is not set all components are kept::\\n\\n            n_components == min(n_samples, n_features)\\n\\n        If ``n_components == 'mle'`` and ``svd_solver == 'full'``, Minka's\\n        MLE is used to guess the dimension. Use of ``n_components == 'mle'``\\n        will interpret ``svd_solver == 'auto'`` as ``svd_solver == 'full'``.\\n\\n        If ``0 < n_components < 1`` and ``svd_solver == 'full'``, select the\\n        number of components such that the amount of variance that needs to be\\n        explained is greater than the percentage specified by n_components.\\n\\n        If ``svd_solver == 'arpack'``, the number of components must be\\n        strictly less than the minimum of n_features and n_samples.\\n\\n        Hence, the None case results in::\\n\\n            n_components == min(n_samples, n_features) - 1\\n\\n    copy : bool (default True)\\n        If False, data passed to fit are overwritten and running\\n        fit(X).transform(X) will not yield the expected results,\\n        use fit_transform(X) instead.\\n\\n    whiten : bool, optional (default False)\\n        When True (False by default) the `components_` vectors are multiplied\\n        by the square root of n_samples and then divided by the singular values\\n        to ensure uncorrelated outputs with unit component-wise variances.\\n\\n        Whitening will remove some information from the transformed signal\\n        (the relative variance scales of the components) but can sometime\\n        improve the predictive accuracy of the downstream estimators by\\n        making their data respect some hard-wired assumptions.\\n\\n    svd_solver : string {'auto', 'full', 'arpack', 'randomized'}\\n        auto :\\n            the solver is selected by a default policy based on `X.shape` and\\n            `n_components`: if the input data is larger than 500x500 and the\\n            number of components to extract is lower than 80% of the smallest\\n            dimension of the data, then the more efficient 'randomized'\\n            method is enabled. Otherwise the exact full SVD is computed and\\n            optionally truncated afterwards.\\n        full :\\n            run exact full SVD calling the standard LAPACK solver via\\n            `scipy.linalg.svd` and select the components by postprocessing\\n        arpack :\\n            run SVD truncated to n_components calling ARPACK solver via\\n            `scipy.sparse.linalg.svds`. It requires strictly\\n            0 < n_components < min(X.shape)\\n        randomized :\\n            run randomized SVD by the method of Halko et al.\\n\\n        .. versionadded:: 0.18.0\\n\\n    tol : float >= 0, optional (default .0)\\n        Tolerance for singular values computed by svd_solver == 'arpack'.\\n\\n        .. versionadded:: 0.18.0\\n\\n    iterated_power : int >= 0, or 'auto', (default 'auto')\\n        Number of iterations for the power method computed by\\n        svd_solver == 'randomized'.\\n\\n        .. versionadded:: 0.18.0\\n\\n    random_state : int, RandomState instance or None, optional (default None)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`. Used when ``svd_solver`` == 'arpack' or 'randomized'.\\n\\n        .. versionadded:: 0.18.0\\n\\n    Attributes\\n    ----------\\n    components_ : array, shape (n_components, n_features)\\n        Principal axes in feature space, representing the directions of\\n        maximum variance in the data. The components are sorted by\\n        ``explained_variance_``.\\n\\n    explained_variance_ : array, shape (n_components,)\\n        The amount of variance explained by each of the selected components.\\n\\n        Equal to n_components largest eigenvalues\\n        of the covariance matrix of X.\\n\\n        .. versionadded:: 0.18\\n\\n    explained_variance_ratio_ : array, shape (n_components,)\\n        Percentage of variance explained by each of the selected components.\\n\\n        If ``n_components`` is not set then all components are stored and the\\n        sum of the ratios is equal to 1.0.\\n\\n    singular_values_ : array, shape (n_components,)\\n        The singular values corresponding to each of the selected components.\\n        The singular values are equal to the 2-norms of the ``n_components``\\n        variables in the lower-dimensional space.\\n\\n    mean_ : array, shape (n_features,)\\n        Per-feature empirical mean, estimated from the training set.\\n\\n        Equal to `X.mean(axis=0)`.\\n\\n    n_components_ : int\\n        The estimated number of components. When n_components is set\\n        to 'mle' or a number between 0 and 1 (with svd_solver == 'full') this\\n        number is estimated from input data. Otherwise it equals the parameter\\n        n_components, or the lesser value of n_features and n_samples\\n        if n_components is None.\\n\\n    noise_variance_ : float\\n        The estimated noise covariance following the Probabilistic PCA model\\n        from Tipping and Bishop 1999. See \\\"Pattern Recognition and\\n        Machine Learning\\\" by C. Bishop, 12.2.1 p. 574 or\\n        http://www.miketipping.com/papers/met-mppca.pdf. It is required to\\n        compute the estimated data covariance and score samples.\\n\\n        Equal to the average of (min(n_features, n_samples) - n_components)\\n        smallest eigenvalues of the covariance matrix of X.\\n\\n    References\\n    ----------\\n    For n_components == 'mle', this class uses the method of `Minka, T. P.\\n    \\\"Automatic choice of dimensionality for PCA\\\". In NIPS, pp. 598-604`\\n\\n    Implements the probabilistic PCA model from:\\n    `Tipping, M. E., and Bishop, C. M. (1999). \\\"Probabilistic principal\\n    component analysis\\\". Journal of the Royal Statistical Society:\\n    Series B (Statistical Methodology), 61(3), 611-622.\\n    via the score and score_samples methods.\\n    See http://www.miketipping.com/papers/met-mppca.pdf\\n\\n    For svd_solver == 'arpack', refer to `scipy.sparse.linalg.svds`.\\n\\n    For svd_solver == 'randomized', see:\\n    `Halko, N., Martinsson, P. G., and Tropp, J. A. (2011).\\n    \\\"Finding structure with randomness: Probabilistic algorithms for\\n    constructing approximate matrix decompositions\\\".\\n    SIAM review, 53(2), 217-288.` and also\\n    `Martinsson, P. G., Rokhlin, V., and Tygert, M. (2011).\\n    \\\"A randomized algorithm for the decomposition of matrices\\\".\\n    Applied and Computational Harmonic Analysis, 30(1), 47-68.`\\n\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> from sklearn.decomposition import PCA\\n    >>> X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])\\n    >>> pca = PCA(n_components=2)\\n    >>> pca.fit(X)\\n    PCA(copy=True, iterated_power='auto', n_components=2, random_state=None,\\n      svd_solver='auto', tol=0.0, whiten=False)\\n    >>> print(pca.explained_variance_ratio_)  # doctest: +ELLIPSIS\\n    [0.9924... 0.0075...]\\n    >>> print(pca.singular_values_)  # doctest: +ELLIPSIS\\n    [6.30061... 0.54980...]\\n\\n    >>> pca = PCA(n_components=2, svd_solver='full')\\n    >>> pca.fit(X)                 # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE\\n    PCA(copy=True, iterated_power='auto', n_components=2, random_state=None,\\n      svd_solver='full', tol=0.0, whiten=False)\\n    >>> print(pca.explained_variance_ratio_)  # doctest: +ELLIPSIS\\n    [0.9924... 0.00755...]\\n    >>> print(pca.singular_values_)  # doctest: +ELLIPSIS\\n    [6.30061... 0.54980...]\\n\\n    >>> pca = PCA(n_components=1, svd_solver='arpack')\\n    >>> pca.fit(X)\\n    PCA(copy=True, iterated_power='auto', n_components=1, random_state=None,\\n      svd_solver='arpack', tol=0.0, whiten=False)\\n    >>> print(pca.explained_variance_ratio_)  # doctest: +ELLIPSIS\\n    [0.99244...]\\n    >>> print(pca.singular_values_)  # doctest: +ELLIPSIS\\n    [6.30061...]\\n\\n    See also\\n    --------\\n    KernelPCA\\n    SparsePCA\\n    TruncatedSVD\\n    IncrementalPCA\\n    \",\n      outputs: [\n        {\n          returned: false,\n          param_type: ['array'],\n          name: 'components_',\n          docstring:\n            'Principal axes in feature space, representing the directions of maximum variance in the data. The components are sorted by ``explained_variance_``.'\n        },\n        {\n          returned: false,\n          param_type: ['array'],\n          name: 'explained_variance_',\n          docstring:\n            'The amount of variance explained by each of the selected components.  Equal to n_components largest eigenvalues of the covariance matrix of X.  .. versionadded:: 0.18'\n        },\n        {\n          returned: false,\n          param_type: ['array'],\n          name: 'explained_variance_ratio_',\n          docstring:\n            'Percentage of variance explained by each of the selected components.  If ``n_components`` is not set then all components are stored and the sum of the ratios is equal to 1.0.'\n        },\n        {\n          returned: false,\n          param_type: ['array'],\n          name: 'singular_values_',\n          docstring:\n            'The singular values corresponding to each of the selected components. The singular values are equal to the 2-norms of the ``n_components`` variables in the lower-dimensional space.'\n        },\n        {\n          returned: false,\n          param_type: ['array'],\n          name: 'mean_',\n          docstring:\n            'Per-feature empirical mean, estimated from the training set.  Equal to `X.mean(axis=0)`.'\n        },\n        {\n          returned: false,\n          param_type: ['int'],\n          name: 'n_components_',\n          docstring:\n            \"The estimated number of components. When n_components is set to 'mle' or a number between 0 and 1 (with svd_solver == 'full') this number is estimated from input data. Otherwise it equals the parameter n_components, or the lesser value of n_features and n_samples if n_components is None.\"\n        },\n        {\n          returned: false,\n          param_type: ['float'],\n          name: 'noise_variance_',\n          docstring:\n            'The estimated noise covariance following the Probabilistic PCA model from Tipping and Bishop 1999. See \"Pattern Recognition and Machine Learning\" by C. Bishop, 12.2.1 p. 574 or http://www.miketipping.com/papers/met-mppca.pdf. It is required to compute the estimated data covariance and score samples.  Equal to the average of (min(n_features, n_samples) - n_components) smallest eigenvalues of the covariance matrix of X.'\n        }\n      ]\n    },\n    {\n      inputs: [\n        {\n          is_optional: true,\n          param_type: ['int'],\n          name: 'n_components',\n          docstring:\n            'Desired dimensionality of output data. Must be strictly less than the number of features. The default value is useful for visualisation. For LSA, a value of 100 is recommended.',\n          options: null,\n          default_value: '2',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['str'],\n          name: 'algorithm',\n          docstring:\n            'SVD solver to use. Either \"arpack\" for the ARPACK wrapper in SciPy (scipy.sparse.linalg.svds), or \"randomized\" for the randomized algorithm due to Halko (2009).',\n          options: null,\n          default_value: '\"randomized\"',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int'],\n          name: 'n_iter',\n          docstring:\n            'Number of iterations for randomized SVD solver. Not used by ARPACK. The default is larger than the default in `randomized_svd` to handle sparse matrices that may have large slowly decaying spectrum.',\n          options: null,\n          default_value: '5',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['float'],\n          name: 'tol',\n          docstring:\n            'Tolerance for ARPACK. 0 means machine precision. Ignored by randomized SVD solver.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        }\n      ],\n      name: 'TruncatedSVD',\n      nodes: [],\n      node_functions: [\n        {\n          inputs: [],\n          outputs: [],\n          name: '__init__',\n          docstring: 'None'\n        },\n        {\n          inputs: [],\n          outputs: [],\n          name: '_get_param_names',\n          docstring: 'Get parameter names for the estimator'\n        },\n        {\n          inputs: [\n            {\n              is_optional: false,\n              param_type: ['array'],\n              name: 'X',\n              docstring: 'Training data.',\n              options: null,\n              default_value: null,\n              expected_shape: '(n_samples, n_features)'\n            },\n            {\n              is_optional: true,\n              param_type: [null],\n              name: 'y',\n              docstring: 'Ignored',\n              options: null,\n              default_value: null,\n              expected_shape: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'fit',\n          docstring:\n            'Fit LSI model on training data X.\\n\\n        Parameters\\n        ----------\\n        X : {array-like, sparse matrix}, shape (n_samples, n_features)\\n            Training data.\\n\\n        y : Ignored\\n\\n        Returns\\n        -------\\n        self : object\\n            Returns the transformer object.\\n        '\n        },\n        {\n          inputs: [\n            {\n              is_optional: false,\n              param_type: ['array'],\n              name: 'X',\n              docstring: 'Training data.',\n              options: null,\n              default_value: null,\n              expected_shape: '(n_samples, n_features)'\n            },\n            {\n              is_optional: true,\n              param_type: [null],\n              name: 'y',\n              docstring: 'Ignored',\n              options: null,\n              default_value: null,\n              expected_shape: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              returned: true,\n              param_type: ['array'],\n              name: 'X_new',\n              docstring:\n                'Reduced version of X. This will always be a dense array.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'fit_transform',\n          docstring:\n            'Fit LSI model to X and perform dimensionality reduction on X.\\n\\n        Parameters\\n        ----------\\n        X : {array-like, sparse matrix}, shape (n_samples, n_features)\\n            Training data.\\n\\n        y : Ignored\\n\\n        Returns\\n        -------\\n        X_new : array, shape (n_samples, n_components)\\n            Reduced version of X. This will always be a dense array.\\n        '\n        },\n        {\n          inputs: [\n            {\n              is_optional: false,\n              param_type: ['array'],\n              name: 'X',\n              docstring: 'New data.',\n              options: null,\n              default_value: null,\n              expected_shape: '(n_samples, n_components)'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              returned: true,\n              param_type: ['array'],\n              name: 'X_original',\n              docstring: 'Note that this is always a dense array.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'inverse_transform',\n          docstring:\n            'Transform X back to its original space.\\n\\n        Returns an array X_original whose transform would be X.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_components)\\n            New data.\\n\\n        Returns\\n        -------\\n        X_original : array, shape (n_samples, n_features)\\n            Note that this is always a dense array.\\n        '\n        },\n        {\n          inputs: [\n            {\n              is_optional: false,\n              param_type: ['array'],\n              name: 'X',\n              docstring: 'New data.',\n              options: null,\n              default_value: null,\n              expected_shape: '(n_samples, n_features)'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              returned: true,\n              param_type: ['array'],\n              name: 'X_new',\n              docstring:\n                'Reduced version of X. This will always be a dense array.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          name: 'transform',\n          docstring:\n            'Perform dimensionality reduction on X.\\n\\n        Parameters\\n        ----------\\n        X : {array-like, sparse matrix}, shape (n_samples, n_features)\\n            New data.\\n\\n        Returns\\n        -------\\n        X_new : array, shape (n_samples, n_components)\\n            Reduced version of X. This will always be a dense array.\\n        '\n        }\n      ],\n      docstring:\n        'Dimensionality reduction using truncated SVD (aka LSA).\\n\\n    This transformer performs linear dimensionality reduction by means of\\n    truncated singular value decomposition (SVD). Contrary to PCA, this\\n    estimator does not center the data before computing the singular value\\n    decomposition. This means it can work with scipy.sparse matrices\\n    efficiently.\\n\\n    In particular, truncated SVD works on term count/tf-idf matrices as\\n    returned by the vectorizers in sklearn.feature_extraction.text. In that\\n    context, it is known as latent semantic analysis (LSA).\\n\\n    This estimator supports two algorithms: a fast randomized SVD solver, and\\n    a \"naive\" algorithm that uses ARPACK as an eigensolver on (X * X.T) or\\n    (X.T * X), whichever is more efficient.\\n\\n    Read more in the :ref:`User Guide <LSA>`.\\n\\n    Parameters\\n    ----------\\n    n_components : int, default = 2\\n        Desired dimensionality of output data.\\n        Must be strictly less than the number of features.\\n        The default value is useful for visualisation. For LSA, a value of\\n        100 is recommended.\\n\\n    algorithm : string, default = \"randomized\"\\n        SVD solver to use. Either \"arpack\" for the ARPACK wrapper in SciPy\\n        (scipy.sparse.linalg.svds), or \"randomized\" for the randomized\\n        algorithm due to Halko (2009).\\n\\n    n_iter : int, optional (default 5)\\n        Number of iterations for randomized SVD solver. Not used by ARPACK.\\n        The default is larger than the default in `randomized_svd` to handle\\n        sparse matrices that may have large slowly decaying spectrum.\\n\\n    random_state : int, RandomState instance or None, optional, default = None\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`.\\n\\n    tol : float, optional\\n        Tolerance for ARPACK. 0 means machine precision. Ignored by randomized\\n        SVD solver.\\n\\n    Attributes\\n    ----------\\n    components_ : array, shape (n_components, n_features)\\n\\n    explained_variance_ : array, shape (n_components,)\\n        The variance of the training samples transformed by a projection to\\n        each component.\\n\\n    explained_variance_ratio_ : array, shape (n_components,)\\n        Percentage of variance explained by each of the selected components.\\n\\n    singular_values_ : array, shape (n_components,)\\n        The singular values corresponding to each of the selected components.\\n        The singular values are equal to the 2-norms of the ``n_components``\\n        variables in the lower-dimensional space.\\n\\n    Examples\\n    --------\\n    >>> from sklearn.decomposition import TruncatedSVD\\n    >>> from sklearn.random_projection import sparse_random_matrix\\n    >>> X = sparse_random_matrix(100, 100, density=0.01, random_state=42)\\n    >>> svd = TruncatedSVD(n_components=5, n_iter=7, random_state=42)\\n    >>> svd.fit(X)  # doctest: +NORMALIZE_WHITESPACE\\n    TruncatedSVD(algorithm=\\'randomized\\', n_components=5, n_iter=7,\\n            random_state=42, tol=0.0)\\n    >>> print(svd.explained_variance_ratio_)  # doctest: +ELLIPSIS\\n    [0.0606... 0.0584... 0.0497... 0.0434... 0.0372...]\\n    >>> print(svd.explained_variance_ratio_.sum())  # doctest: +ELLIPSIS\\n    0.249...\\n    >>> print(svd.singular_values_)  # doctest: +ELLIPSIS\\n    [2.5841... 2.5245... 2.3201... 2.1753... 2.0443...]\\n\\n    See also\\n    --------\\n    PCA\\n\\n    References\\n    ----------\\n    Finding structure with randomness: Stochastic algorithms for constructing\\n    approximate matrix decompositions\\n    Halko, et al., 2009 (arXiv:909) https://arxiv.org/pdf/0909.4061.pdf\\n\\n    Notes\\n    -----\\n    SVD suffers from a problem called \"sign indeterminacy\", which means the\\n    sign of the ``components_`` and the output from transform depend on the\\n    algorithm and random state. To work around this, fit instances of this\\n    class to data once, then keep the instance around to do transformations.\\n\\n    ',\n      outputs: [\n        {\n          returned: false,\n          param_type: ['array'],\n          name: 'components_',\n          docstring: ''\n        },\n        {\n          returned: false,\n          param_type: ['array'],\n          name: 'explained_variance_',\n          docstring:\n            'The variance of the training samples transformed by a projection to each component.'\n        },\n        {\n          returned: false,\n          param_type: ['array'],\n          name: 'explained_variance_ratio_',\n          docstring:\n            'Percentage of variance explained by each of the selected components.'\n        },\n        {\n          returned: false,\n          param_type: ['array'],\n          name: 'singular_values_',\n          docstring:\n            'The singular values corresponding to each of the selected components. The singular values are equal to the 2-norms of the ``n_components`` variables in the lower-dimensional space.'\n        }\n      ]\n    }\n  ],\n  node_functions: [\n    {\n      inputs: [\n        {\n          is_optional: false,\n          param_type: ['array'],\n          name: 'X',\n          docstring: 'Data matrix.',\n          options: null,\n          default_value: null,\n          expected_shape: '(n_samples, n_features)'\n        },\n        {\n          is_optional: false,\n          param_type: ['int'],\n          name: 'n_components',\n          docstring: 'Number of dictionary atoms to extract.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['int'],\n          name: 'alpha',\n          docstring: 'Sparsity controlling parameter.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['int'],\n          name: 'max_iter',\n          docstring: 'Maximum number of iterations to perform.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['float'],\n          name: 'tol',\n          docstring: 'Tolerance for the stopping condition.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['LIST_VALID_OPTIONS'],\n          name: 'method',\n          docstring:\n            'lars: uses the least angle regression method to solve the lasso problem (linear_model.lars_path) cd: uses the coordinate descent method to compute the Lasso solution (linear_model.Lasso). Lars will be faster if the estimated components are sparse.',\n          options: ['lars', 'cd'],\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int', null],\n          name: 'n_jobs',\n          docstring:\n            'Number of parallel jobs to run. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.',\n          options: null,\n          default_value: 'None',\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['array'],\n          name: 'dict_init',\n          docstring:\n            'Initial value for the dictionary for warm restart scenarios.',\n          options: null,\n          default_value: null,\n          expected_shape: '(n_components, n_features),'\n        },\n        {\n          is_optional: false,\n          param_type: ['array'],\n          name: 'code_init',\n          docstring:\n            'Initial value for the sparse code for warm restart scenarios.',\n          options: null,\n          default_value: null,\n          expected_shape: '(n_samples, n_components),'\n        },\n        {\n          is_optional: true,\n          param_type: ['callable', null],\n          name: 'callback',\n          docstring: 'Callable that gets invoked every five iterations',\n          options: null,\n          default_value: 'None',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['bool'],\n          name: 'verbose',\n          docstring: 'To control the verbosity of the procedure.',\n          options: null,\n          default_value: 'False',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int', null],\n          name: 'random_state',\n          docstring:\n            'If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.',\n          options: null,\n          default_value: 'None',\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['bool'],\n          name: 'return_n_iter',\n          docstring: 'Whether or not to return the number of iterations.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['bool'],\n          name: 'positive_dict',\n          docstring:\n            'Whether to enforce positivity when finding the dictionary.  .. versionadded:: 0.20',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['bool'],\n          name: 'positive_code',\n          docstring:\n            'Whether to enforce positivity when finding the code.  .. versionadded:: 0.20',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          returned: true,\n          param_type: ['array'],\n          name: 'code',\n          docstring: 'The sparse code factor in the matrix factorization.'\n        },\n        {\n          returned: true,\n          param_type: ['array'],\n          name: 'dictionary',\n          docstring: 'The dictionary factor in the matrix factorization.'\n        },\n        {\n          returned: true,\n          param_type: ['array'],\n          name: 'errors',\n          docstring: 'Vector of errors at each iteration.'\n        },\n        {\n          returned: true,\n          param_type: ['int'],\n          name: 'n_iter',\n          docstring:\n            'Number of iterations run. Returned only if `return_n_iter` is set to True.'\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ],\n      name: 'dict_learning',\n      docstring:\n        \"Solves a dictionary learning matrix factorization problem.\\n\\n    Finds the best dictionary and the corresponding sparse code for\\n    approximating the data matrix X by solving::\\n\\n        (U^*, V^*) = argmin 0.5 || X - U V ||_2^2 + alpha * || U ||_1\\n                     (U,V)\\n                    with || V_k ||_2 = 1 for all  0 <= k < n_components\\n\\n    where V is the dictionary and U is the sparse code.\\n\\n    Read more in the :ref:`User Guide <DictionaryLearning>`.\\n\\n    Parameters\\n    ----------\\n    X : array of shape (n_samples, n_features)\\n        Data matrix.\\n\\n    n_components : int,\\n        Number of dictionary atoms to extract.\\n\\n    alpha : int,\\n        Sparsity controlling parameter.\\n\\n    max_iter : int,\\n        Maximum number of iterations to perform.\\n\\n    tol : float,\\n        Tolerance for the stopping condition.\\n\\n    method : {'lars', 'cd'}\\n        lars: uses the least angle regression method to solve the lasso problem\\n        (linear_model.lars_path)\\n        cd: uses the coordinate descent method to compute the\\n        Lasso solution (linear_model.Lasso). Lars will be faster if\\n        the estimated components are sparse.\\n\\n    n_jobs : int or None, optional (default=None)\\n        Number of parallel jobs to run.\\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\\n        for more details.\\n\\n    dict_init : array of shape (n_components, n_features),\\n        Initial value for the dictionary for warm restart scenarios.\\n\\n    code_init : array of shape (n_samples, n_components),\\n        Initial value for the sparse code for warm restart scenarios.\\n\\n    callback : callable or None, optional (default: None)\\n        Callable that gets invoked every five iterations\\n\\n    verbose : bool, optional (default: False)\\n        To control the verbosity of the procedure.\\n\\n    random_state : int, RandomState instance or None, optional (default=None)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`.\\n\\n    return_n_iter : bool\\n        Whether or not to return the number of iterations.\\n\\n    positive_dict : bool\\n        Whether to enforce positivity when finding the dictionary.\\n\\n        .. versionadded:: 0.20\\n\\n    positive_code : bool\\n        Whether to enforce positivity when finding the code.\\n\\n        .. versionadded:: 0.20\\n\\n    Returns\\n    -------\\n    code : array of shape (n_samples, n_components)\\n        The sparse code factor in the matrix factorization.\\n\\n    dictionary : array of shape (n_components, n_features),\\n        The dictionary factor in the matrix factorization.\\n\\n    errors : array\\n        Vector of errors at each iteration.\\n\\n    n_iter : int\\n        Number of iterations run. Returned only if `return_n_iter` is\\n        set to True.\\n\\n    See also\\n    --------\\n    dict_learning_online\\n    DictionaryLearning\\n    MiniBatchDictionaryLearning\\n    SparsePCA\\n    MiniBatchSparsePCA\\n    \"\n    },\n    {\n      inputs: [\n        {\n          is_optional: false,\n          param_type: ['array'],\n          name: 'X',\n          docstring: 'Data matrix.',\n          options: null,\n          default_value: null,\n          expected_shape: '(n_samples, n_features)'\n        },\n        {\n          is_optional: false,\n          param_type: ['int'],\n          name: 'n_components',\n          docstring: 'Number of dictionary atoms to extract.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['float'],\n          name: 'alpha',\n          docstring: 'Sparsity controlling parameter.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['int'],\n          name: 'n_iter',\n          docstring: 'Number of iterations to perform.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['bool'],\n          name: 'return_code',\n          docstring:\n            'Whether to also return the code U or just the dictionary V.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['array'],\n          name: 'dict_init',\n          docstring:\n            'Initial value for the dictionary for warm restart scenarios.',\n          options: null,\n          default_value: null,\n          expected_shape: '(n_components, n_features),'\n        },\n        {\n          is_optional: true,\n          param_type: ['callable', null],\n          name: 'callback',\n          docstring: 'callable that gets invoked every five iterations',\n          options: null,\n          default_value: 'None',\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['int'],\n          name: 'batch_size',\n          docstring: 'The number of samples to take in each batch.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['bool'],\n          name: 'verbose',\n          docstring: 'To control the verbosity of the procedure.',\n          options: null,\n          default_value: 'False',\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['bool'],\n          name: 'shuffle',\n          docstring:\n            'Whether to shuffle the data before splitting it in batches.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int', null],\n          name: 'n_jobs',\n          docstring:\n            'Number of parallel jobs to run. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.',\n          options: null,\n          default_value: 'None',\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['LIST_VALID_OPTIONS'],\n          name: 'method',\n          docstring:\n            'lars: uses the least angle regression method to solve the lasso problem (linear_model.lars_path) cd: uses the coordinate descent method to compute the Lasso solution (linear_model.Lasso). Lars will be faster if the estimated components are sparse.',\n          options: ['lars', 'cd'],\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int'],\n          name: 'iter_offset',\n          docstring:\n            'Number of previous iterations completed on the dictionary used for initialization.',\n          options: null,\n          default_value: '0',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int', null],\n          name: 'random_state',\n          docstring:\n            'If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.',\n          options: null,\n          default_value: 'None',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['bool'],\n          name: 'return_inner_stats',\n          docstring:\n            'Return the inner statistics A (dictionary covariance) and B (data approximation). Useful to restart the algorithm in an online setting. If return_inner_stats is True, return_code is ignored',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['array', 'tuple'],\n          name: 'inner_stats',\n          docstring:\n            'Inner sufficient statistics that are kept by the algorithm. Passing them at initialization is useful in online settings, to avoid loosing the history of the evolution. A (n_components, n_components) is the dictionary covariance matrix. B (n_features, n_components) is the data approximation matrix',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['bool'],\n          name: 'return_n_iter',\n          docstring: 'Whether or not to return the number of iterations.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['bool'],\n          name: 'positive_dict',\n          docstring:\n            'Whether to enforce positivity when finding the dictionary.  .. versionadded:: 0.20',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['bool'],\n          name: 'positive_code',\n          docstring:\n            'Whether to enforce positivity when finding the code.  .. versionadded:: 0.20',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          returned: true,\n          param_type: ['array'],\n          name: 'code',\n          docstring: 'the sparse code (only returned if `return_code=True`)'\n        },\n        {\n          returned: true,\n          param_type: ['array'],\n          name: 'dictionary',\n          docstring: 'the solutions to the dictionary learning problem'\n        },\n        {\n          returned: true,\n          param_type: ['int'],\n          name: 'n_iter',\n          docstring:\n            'Number of iterations run. Returned only if `return_n_iter` is set to `True`.'\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ],\n      name: 'dict_learning_online',\n      docstring:\n        \"Solves a dictionary learning matrix factorization problem online.\\n\\n    Finds the best dictionary and the corresponding sparse code for\\n    approximating the data matrix X by solving::\\n\\n        (U^*, V^*) = argmin 0.5 || X - U V ||_2^2 + alpha * || U ||_1\\n                     (U,V)\\n                     with || V_k ||_2 = 1 for all  0 <= k < n_components\\n\\n    where V is the dictionary and U is the sparse code. This is\\n    accomplished by repeatedly iterating over mini-batches by slicing\\n    the input data.\\n\\n    Read more in the :ref:`User Guide <DictionaryLearning>`.\\n\\n    Parameters\\n    ----------\\n    X : array of shape (n_samples, n_features)\\n        Data matrix.\\n\\n    n_components : int,\\n        Number of dictionary atoms to extract.\\n\\n    alpha : float,\\n        Sparsity controlling parameter.\\n\\n    n_iter : int,\\n        Number of iterations to perform.\\n\\n    return_code : boolean,\\n        Whether to also return the code U or just the dictionary V.\\n\\n    dict_init : array of shape (n_components, n_features),\\n        Initial value for the dictionary for warm restart scenarios.\\n\\n    callback : callable or None, optional (default: None)\\n        callable that gets invoked every five iterations\\n\\n    batch_size : int,\\n        The number of samples to take in each batch.\\n\\n    verbose : bool, optional (default: False)\\n        To control the verbosity of the procedure.\\n\\n    shuffle : boolean,\\n        Whether to shuffle the data before splitting it in batches.\\n\\n    n_jobs : int or None, optional (default=None)\\n        Number of parallel jobs to run.\\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\\n        for more details.\\n\\n    method : {'lars', 'cd'}\\n        lars: uses the least angle regression method to solve the lasso problem\\n        (linear_model.lars_path)\\n        cd: uses the coordinate descent method to compute the\\n        Lasso solution (linear_model.Lasso). Lars will be faster if\\n        the estimated components are sparse.\\n\\n    iter_offset : int, default 0\\n        Number of previous iterations completed on the dictionary used for\\n        initialization.\\n\\n    random_state : int, RandomState instance or None, optional (default=None)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`.\\n\\n    return_inner_stats : boolean, optional\\n        Return the inner statistics A (dictionary covariance) and B\\n        (data approximation). Useful to restart the algorithm in an\\n        online setting. If return_inner_stats is True, return_code is\\n        ignored\\n\\n    inner_stats : tuple of (A, B) ndarrays\\n        Inner sufficient statistics that are kept by the algorithm.\\n        Passing them at initialization is useful in online settings, to\\n        avoid loosing the history of the evolution.\\n        A (n_components, n_components) is the dictionary covariance matrix.\\n        B (n_features, n_components) is the data approximation matrix\\n\\n    return_n_iter : bool\\n        Whether or not to return the number of iterations.\\n\\n    positive_dict : bool\\n        Whether to enforce positivity when finding the dictionary.\\n\\n        .. versionadded:: 0.20\\n\\n    positive_code : bool\\n        Whether to enforce positivity when finding the code.\\n\\n        .. versionadded:: 0.20\\n\\n    Returns\\n    -------\\n    code : array of shape (n_samples, n_components),\\n        the sparse code (only returned if `return_code=True`)\\n\\n    dictionary : array of shape (n_components, n_features),\\n        the solutions to the dictionary learning problem\\n\\n    n_iter : int\\n        Number of iterations run. Returned only if `return_n_iter` is\\n        set to `True`.\\n\\n    See also\\n    --------\\n    dict_learning\\n    DictionaryLearning\\n    MiniBatchDictionaryLearning\\n    SparsePCA\\n    MiniBatchSparsePCA\\n\\n    \"\n    },\n    {\n      inputs: [\n        {\n          is_optional: false,\n          param_type: ['array'],\n          name: 'X',\n          docstring:\n            'Training vector, where n_samples is the number of samples and n_features is the number of features.',\n          options: null,\n          default_value: null,\n          expected_shape: '(n_samples, n_features)'\n        },\n        {\n          is_optional: true,\n          param_type: ['int'],\n          name: 'n_components',\n          docstring:\n            'Number of components to extract. If None no dimension reduction is performed.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['LIST_VALID_OPTIONS'],\n          name: 'algorithm',\n          docstring: 'Apply a parallel or deflational FASTICA algorithm.',\n          options: ['parallel', 'deflation', 'optional'],\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['bool'],\n          name: 'whiten',\n          docstring:\n            'If True perform an initial whitening of the data. If False, the data is assumed to have already been preprocessed: it should be centered, normed and white. Otherwise you will get incorrect results. In this case the parameter n_components will be ignored.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['str'],\n          name: 'fun',\n          docstring:\n            \"The functional form of the G function used in the approximation to neg-entropy. Could be either 'logcosh', 'exp', or 'cube'. You can also provide your own function. It should return a tuple containing the value of the function, and of its derivative, in the point. The derivative should be averaged along its last dimension. Example:  def my_g(x):     return x ** 3, np.mean(3 * x ** 2, axis=-1)\",\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['dict'],\n          name: 'fun_args',\n          docstring:\n            \"Arguments to send to the functional form. If empty or None and if fun='logcosh', fun_args will take value {'alpha' : 1.0}\",\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int'],\n          name: 'max_iter',\n          docstring: 'Maximum number of iterations to perform.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['float'],\n          name: 'tol',\n          docstring:\n            'A positive scalar giving the tolerance at which the un-mixing matrix is considered to have converged.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['array'],\n          name: 'w_init',\n          docstring:\n            \"Initial un-mixing array of dimension (n.comp,n.comp). If None (default) then an array of normal r.v.'s is used.\",\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int', null],\n          name: 'random_state',\n          docstring:\n            'If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.',\n          options: null,\n          default_value: 'None',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['bool'],\n          name: 'return_X_mean',\n          docstring: 'If True, X_mean is returned too.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['bool'],\n          name: 'compute_sources',\n          docstring:\n            'If False, sources are not computed, but only the rotation matrix. This can save memory when working with big data. Defaults to True.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['bool'],\n          name: 'return_n_iter',\n          docstring: 'Whether or not to return the number of iterations.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          returned: true,\n          param_type: ['LIST_VALID_OPTIONS', 'array', null],\n          name: 'K',\n          docstring:\n            \"If whiten is 'True', K is the pre-whitening matrix that projects data onto the first n_components principal components. If whiten is 'False', K is 'None'.\"\n        },\n        {\n          returned: true,\n          param_type: ['array'],\n          name: 'W',\n          docstring:\n            'Estimated un-mixing matrix. The mixing matrix can be obtained by::      w = np.dot(W, K.T)     A = w.T * (w * w.T).I'\n        },\n        {\n          returned: true,\n          param_type: ['LIST_VALID_OPTIONS', 'array', null],\n          name: 'S',\n          docstring: 'Estimated source matrix'\n        },\n        {\n          returned: true,\n          param_type: ['array'],\n          name: 'X_mean',\n          docstring:\n            'The mean over features. Returned only if return_X_mean is True.'\n        },\n        {\n          returned: true,\n          param_type: ['int'],\n          name: 'n_iter',\n          docstring:\n            'If the algorithm is \"deflation\", n_iter is the maximum number of iterations run across all components. Else they are just the number of iterations taken to converge. This is returned only when return_n_iter is set to `True`.'\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ],\n      name: 'fastica',\n      docstring:\n        \"Perform Fast Independent Component Analysis.\\n\\n    Read more in the :ref:`User Guide <ICA>`.\\n\\n    Parameters\\n    ----------\\n    X : array-like, shape (n_samples, n_features)\\n        Training vector, where n_samples is the number of samples and\\n        n_features is the number of features.\\n\\n    n_components : int, optional\\n        Number of components to extract. If None no dimension reduction\\n        is performed.\\n\\n    algorithm : {'parallel', 'deflation'}, optional\\n        Apply a parallel or deflational FASTICA algorithm.\\n\\n    whiten : boolean, optional\\n        If True perform an initial whitening of the data.\\n        If False, the data is assumed to have already been\\n        preprocessed: it should be centered, normed and white.\\n        Otherwise you will get incorrect results.\\n        In this case the parameter n_components will be ignored.\\n\\n    fun : string or function, optional. Default: 'logcosh'\\n        The functional form of the G function used in the\\n        approximation to neg-entropy. Could be either 'logcosh', 'exp',\\n        or 'cube'.\\n        You can also provide your own function. It should return a tuple\\n        containing the value of the function, and of its derivative, in the\\n        point. The derivative should be averaged along its last dimension.\\n        Example:\\n\\n        def my_g(x):\\n            return x ** 3, np.mean(3 * x ** 2, axis=-1)\\n\\n    fun_args : dictionary, optional\\n        Arguments to send to the functional form.\\n        If empty or None and if fun='logcosh', fun_args will take value\\n        {'alpha' : 1.0}\\n\\n    max_iter : int, optional\\n        Maximum number of iterations to perform.\\n\\n    tol : float, optional\\n        A positive scalar giving the tolerance at which the\\n        un-mixing matrix is considered to have converged.\\n\\n    w_init : (n_components, n_components) array, optional\\n        Initial un-mixing array of dimension (n.comp,n.comp).\\n        If None (default) then an array of normal r.v.'s is used.\\n\\n    random_state : int, RandomState instance or None, optional (default=None)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`.\\n\\n    return_X_mean : bool, optional\\n        If True, X_mean is returned too.\\n\\n    compute_sources : bool, optional\\n        If False, sources are not computed, but only the rotation matrix.\\n        This can save memory when working with big data. Defaults to True.\\n\\n    return_n_iter : bool, optional\\n        Whether or not to return the number of iterations.\\n\\n    Returns\\n    -------\\n    K : array, shape (n_components, n_features) | None.\\n        If whiten is 'True', K is the pre-whitening matrix that projects data\\n        onto the first n_components principal components. If whiten is 'False',\\n        K is 'None'.\\n\\n    W : array, shape (n_components, n_components)\\n        Estimated un-mixing matrix.\\n        The mixing matrix can be obtained by::\\n\\n            w = np.dot(W, K.T)\\n            A = w.T * (w * w.T).I\\n\\n    S : array, shape (n_samples, n_components) | None\\n        Estimated source matrix\\n\\n    X_mean : array, shape (n_features, )\\n        The mean over features. Returned only if return_X_mean is True.\\n\\n    n_iter : int\\n        If the algorithm is \\\"deflation\\\", n_iter is the\\n        maximum number of iterations run across all components. Else\\n        they are just the number of iterations taken to converge. This is\\n        returned only when return_n_iter is set to `True`.\\n\\n    Notes\\n    -----\\n\\n    The data matrix X is considered to be a linear combination of\\n    non-Gaussian (independent) components i.e. X = AS where columns of S\\n    contain the independent components and A is a linear mixing\\n    matrix. In short ICA attempts to `un-mix' the data by estimating an\\n    un-mixing matrix W where ``S = W K X.``\\n\\n    This implementation was originally made for data of shape\\n    [n_features, n_samples]. Now the input is transposed\\n    before the algorithm is applied. This makes it slightly\\n    faster for Fortran-ordered input.\\n\\n    Implemented using FastICA:\\n    `A. Hyvarinen and E. Oja, Independent Component Analysis:\\n    Algorithms and Applications, Neural Networks, 13(4-5), 2000,\\n    pp. 411-430`\\n\\n    \"\n    },\n    {\n      inputs: [\n        {\n          is_optional: false,\n          param_type: ['array'],\n          name: 'X',\n          docstring: 'Constant matrix.',\n          options: null,\n          default_value: null,\n          expected_shape: '(n_samples, n_features)'\n        },\n        {\n          is_optional: false,\n          param_type: ['array'],\n          name: 'W',\n          docstring:\n            \"If init='custom', it is used as initial guess for the solution.\",\n          options: null,\n          default_value: null,\n          expected_shape: '(n_samples, n_components)'\n        },\n        {\n          is_optional: false,\n          param_type: ['array'],\n          name: 'H',\n          docstring:\n            \"If init='custom', it is used as initial guess for the solution. If update_H=False, it is used as a constant, to solve for W only.\",\n          options: null,\n          default_value: null,\n          expected_shape: '(n_components, n_features)'\n        },\n        {\n          is_optional: false,\n          param_type: ['int'],\n          name: 'n_components',\n          docstring:\n            'Number of components, if n_components is not set all features are kept.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['LIST_VALID_OPTIONS', null],\n          name: 'init',\n          docstring:\n            \"Method used to initialize the procedure. Default: 'random'. Valid options:  - 'random': non-negative random matrices, scaled with:     sqrt(X.mean() / n_components)  - 'nndsvd': Nonnegative Double Singular Value Decomposition (NNDSVD)     initialization (better for sparseness)  - 'nndsvda': NNDSVD with zeros filled with the average of X     (better when sparsity is not desired)  - 'nndsvdar': NNDSVD with zeros filled with small random values     (generally faster, less accurate alternative to NNDSVDa     for when sparsity is not desired)  - 'custom': use custom matrices W and H\",\n          options: [\n            ' None ',\n            \" 'random' \",\n            \" 'nndsvd' \",\n            \" 'nndsvda' \",\n            \" 'nndsvdar' \",\n            \" 'custom\"\n          ],\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['bool'],\n          name: 'update_H',\n          docstring:\n            'Set to True, both W and H will be estimated from initial guesses. Set to False, only W will be estimated.',\n          options: null,\n          default_value: 'True',\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['LIST_VALID_OPTIONS'],\n          name: 'solver',\n          docstring:\n            \"Numerical solver to use: 'cd' is a Coordinate Descent solver that uses Fast Hierarchical     Alternating Least Squares (Fast HALS). 'mu' is a Multiplicative Update solver.  .. versionadded:: 0.17    Coordinate Descent solver.  .. versionadded:: 0.19    Multiplicative Update solver.\",\n          options: [\"cd' \", \" 'mu\"],\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['float', 'str'],\n          name: 'beta_loss',\n          docstring:\n            \"String must be in {'frobenius', 'kullback-leibler', 'itakura-saito'}. Beta divergence to be minimized, measuring the distance between X and the dot product WH. Note that values different from 'frobenius' (or 2) and 'kullback-leibler' (or 1) lead to significantly slower fits. Note that for beta_loss <= 0 (or 'itakura-saito'), the input matrix X cannot contain zeros. Used only in 'mu' solver.  .. versionadded:: 0.19\",\n          options: null,\n          default_value: 'frobenius',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['float'],\n          name: 'tol',\n          docstring: 'Tolerance of the stopping condition.',\n          options: null,\n          default_value: '1e-4',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int'],\n          name: 'max_iter',\n          docstring: 'Maximum number of iterations before timing out.',\n          options: null,\n          default_value: '200',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['float'],\n          name: 'alpha',\n          docstring: 'Constant that multiplies the regularization terms.',\n          options: null,\n          default_value: '0.',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['float'],\n          name: 'l1_ratio',\n          docstring:\n            'The regularization mixing parameter, with 0 <= l1_ratio <= 1. For l1_ratio = 0 the penalty is an elementwise L2 penalty (aka Frobenius Norm). For l1_ratio = 1 it is an elementwise L1 penalty. For 0 < l1_ratio < 1, the penalty is a combination of L1 and L2.',\n          options: null,\n          default_value: '0.',\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['LIST_VALID_OPTIONS', null],\n          name: 'regularization',\n          docstring:\n            'Select whether the regularization affects the components (H), the transformation (W), both or none of them.',\n          options: [\"both' \", \" 'components' \", \" 'transformation' \", ' None'],\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int', null],\n          name: 'random_state',\n          docstring:\n            'If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.',\n          options: null,\n          default_value: 'None',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int'],\n          name: 'verbose',\n          docstring: 'The verbosity level.',\n          options: null,\n          default_value: '0',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['bool'],\n          name: 'shuffle',\n          docstring:\n            'If true, randomize the order of coordinates in the CD solver.',\n          options: null,\n          default_value: 'False',\n          expected_shape: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          returned: true,\n          param_type: ['array'],\n          name: 'W',\n          docstring: 'Solution to the non-negative least squares problem.'\n        },\n        {\n          returned: true,\n          param_type: ['array'],\n          name: 'H',\n          docstring: 'Solution to the non-negative least squares problem.'\n        },\n        {\n          returned: true,\n          param_type: ['int'],\n          name: 'n_iter',\n          docstring: 'Actual number of iterations.'\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ],\n      name: 'non_negative_factorization',\n      docstring:\n        \"Compute Non-negative Matrix Factorization (NMF)\\n\\n    Find two non-negative matrices (W, H) whose product approximates the non-\\n    negative matrix X. This factorization can be used for example for\\n    dimensionality reduction, source separation or topic extraction.\\n\\n    The objective function is::\\n\\n        0.5 * ||X - WH||_Fro^2\\n        + alpha * l1_ratio * ||vec(W)||_1\\n        + alpha * l1_ratio * ||vec(H)||_1\\n        + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\\n        + 0.5 * alpha * (1 - l1_ratio) * ||H||_Fro^2\\n\\n    Where::\\n\\n        ||A||_Fro^2 = \\\\sum_{i,j} A_{ij}^2 (Frobenius norm)\\n        ||vec(A)||_1 = \\\\sum_{i,j} abs(A_{ij}) (Elementwise L1 norm)\\n\\n    For multiplicative-update ('mu') solver, the Frobenius norm\\n    (0.5 * ||X - WH||_Fro^2) can be changed into another beta-divergence loss,\\n    by changing the beta_loss parameter.\\n\\n    The objective function is minimized with an alternating minimization of W\\n    and H. If H is given and update_H=False, it solves for W only.\\n\\n    Parameters\\n    ----------\\n    X : array-like, shape (n_samples, n_features)\\n        Constant matrix.\\n\\n    W : array-like, shape (n_samples, n_components)\\n        If init='custom', it is used as initial guess for the solution.\\n\\n    H : array-like, shape (n_components, n_features)\\n        If init='custom', it is used as initial guess for the solution.\\n        If update_H=False, it is used as a constant, to solve for W only.\\n\\n    n_components : integer\\n        Number of components, if n_components is not set all features\\n        are kept.\\n\\n    init :  None | 'random' | 'nndsvd' | 'nndsvda' | 'nndsvdar' | 'custom'\\n        Method used to initialize the procedure.\\n        Default: 'random'.\\n        Valid options:\\n\\n        - 'random': non-negative random matrices, scaled with:\\n            sqrt(X.mean() / n_components)\\n\\n        - 'nndsvd': Nonnegative Double Singular Value Decomposition (NNDSVD)\\n            initialization (better for sparseness)\\n\\n        - 'nndsvda': NNDSVD with zeros filled with the average of X\\n            (better when sparsity is not desired)\\n\\n        - 'nndsvdar': NNDSVD with zeros filled with small random values\\n            (generally faster, less accurate alternative to NNDSVDa\\n            for when sparsity is not desired)\\n\\n        - 'custom': use custom matrices W and H\\n\\n    update_H : boolean, default: True\\n        Set to True, both W and H will be estimated from initial guesses.\\n        Set to False, only W will be estimated.\\n\\n    solver : 'cd' | 'mu'\\n        Numerical solver to use:\\n        'cd' is a Coordinate Descent solver that uses Fast Hierarchical\\n            Alternating Least Squares (Fast HALS).\\n        'mu' is a Multiplicative Update solver.\\n\\n        .. versionadded:: 0.17\\n           Coordinate Descent solver.\\n\\n        .. versionadded:: 0.19\\n           Multiplicative Update solver.\\n\\n    beta_loss : float or string, default 'frobenius'\\n        String must be in {'frobenius', 'kullback-leibler', 'itakura-saito'}.\\n        Beta divergence to be minimized, measuring the distance between X\\n        and the dot product WH. Note that values different from 'frobenius'\\n        (or 2) and 'kullback-leibler' (or 1) lead to significantly slower\\n        fits. Note that for beta_loss <= 0 (or 'itakura-saito'), the input\\n        matrix X cannot contain zeros. Used only in 'mu' solver.\\n\\n        .. versionadded:: 0.19\\n\\n    tol : float, default: 1e-4\\n        Tolerance of the stopping condition.\\n\\n    max_iter : integer, default: 200\\n        Maximum number of iterations before timing out.\\n\\n    alpha : double, default: 0.\\n        Constant that multiplies the regularization terms.\\n\\n    l1_ratio : double, default: 0.\\n        The regularization mixing parameter, with 0 <= l1_ratio <= 1.\\n        For l1_ratio = 0 the penalty is an elementwise L2 penalty\\n        (aka Frobenius Norm).\\n        For l1_ratio = 1 it is an elementwise L1 penalty.\\n        For 0 < l1_ratio < 1, the penalty is a combination of L1 and L2.\\n\\n    regularization : 'both' | 'components' | 'transformation' | None\\n        Select whether the regularization affects the components (H), the\\n        transformation (W), both or none of them.\\n\\n    random_state : int, RandomState instance or None, optional, default: None\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by `np.random`.\\n\\n    verbose : integer, default: 0\\n        The verbosity level.\\n\\n    shuffle : boolean, default: False\\n        If true, randomize the order of coordinates in the CD solver.\\n\\n    Returns\\n    -------\\n    W : array-like, shape (n_samples, n_components)\\n        Solution to the non-negative least squares problem.\\n\\n    H : array-like, shape (n_components, n_features)\\n        Solution to the non-negative least squares problem.\\n\\n    n_iter : int\\n        Actual number of iterations.\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> X = np.array([[1,1], [2, 1], [3, 1.2], [4, 1], [5, 0.8], [6, 1]])\\n    >>> from sklearn.decomposition import non_negative_factorization\\n    >>> W, H, n_iter = non_negative_factorization(X, n_components=2,\\n    ... init='random', random_state=0)\\n\\n    References\\n    ----------\\n    Cichocki, Andrzej, and P. H. A. N. Anh-Huy. \\\"Fast local algorithms for\\n    large scale nonnegative matrix and tensor factorizations.\\\"\\n    IEICE transactions on fundamentals of electronics, communications and\\n    computer sciences 92.3: 708-721, 2009.\\n\\n    Fevotte, C., & Idier, J. (2011). Algorithms for nonnegative matrix\\n    factorization with the beta-divergence. Neural Computation, 23(9).\\n    \"\n    },\n    {\n      inputs: [\n        {\n          is_optional: false,\n          param_type: ['array'],\n          name: 'M',\n          docstring: 'Matrix to decompose',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['int'],\n          name: 'n_components',\n          docstring: 'Number of singular values and vectors to extract.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int'],\n          name: 'n_oversamples',\n          docstring:\n            'Additional number of random vectors to sample the range of M so as to ensure proper conditioning. The total number of random vectors used to find the range of M is n_components + n_oversamples. Smaller number can improve speed but can negatively impact the quality of approximation of singular vectors and singular values.',\n          options: null,\n          default_value: '10',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int'],\n          name: 'n_iter',\n          docstring:\n            \"Number of power iterations. It can be used to deal with very noisy problems. When 'auto', it is set to 4, unless `n_components` is small (< .1 * min(X.shape)) `n_iter` in which case is set to 7. This improves precision with few components.  .. versionchanged:: 0.18\",\n          options: null,\n          default_value: 'auto',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: [null],\n          name: 'power_iteration_normalizer',\n          docstring:\n            \"Whether the power iterations are normalized with step-by-step QR factorization (the slowest but most accurate), 'none' (the fastest but numerically unstable when `n_iter` is large, e.g. typically 5 or larger), or 'LU' factorization (numerically stable but can lose slightly in accuracy). The 'auto' mode applies no normalization if `n_iter` <= 2 and switches to LU otherwise.  .. versionadded:: 0.18\",\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: [null],\n          name: 'transpose',\n          docstring:\n            \"Whether the algorithm should be applied to M.T instead of M. The result should approximately be the same. The 'auto' mode will trigger the transposition if M.shape[1] > M.shape[0] since this implementation of randomized SVD tend to be a little faster in that case.  .. versionchanged:: 0.18\",\n          options: null,\n          default_value: '',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['bool'],\n          name: 'flip_sign',\n          docstring:\n            'The output of a singular value decomposition is only unique up to a permutation of the signs of the singular vectors. If `flip_sign` is set to `True`, the sign ambiguity is resolved by making the largest loadings for each component in the left singular vectors positive.',\n          options: null,\n          default_value: '',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int', null],\n          name: 'random_state',\n          docstring:\n            'The seed of the pseudo random number generator to use when shuffling the data.  If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`.',\n          options: null,\n          default_value: 'None',\n          expected_shape: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ],\n      name: 'randomized_svd',\n      docstring:\n        \"Computes a truncated randomized SVD\\n\\n    Parameters\\n    ----------\\n    M : ndarray or sparse matrix\\n        Matrix to decompose\\n\\n    n_components : int\\n        Number of singular values and vectors to extract.\\n\\n    n_oversamples : int (default is 10)\\n        Additional number of random vectors to sample the range of M so as\\n        to ensure proper conditioning. The total number of random vectors\\n        used to find the range of M is n_components + n_oversamples. Smaller\\n        number can improve speed but can negatively impact the quality of\\n        approximation of singular vectors and singular values.\\n\\n    n_iter : int or 'auto' (default is 'auto')\\n        Number of power iterations. It can be used to deal with very noisy\\n        problems. When 'auto', it is set to 4, unless `n_components` is small\\n        (< .1 * min(X.shape)) `n_iter` in which case is set to 7.\\n        This improves precision with few components.\\n\\n        .. versionchanged:: 0.18\\n\\n    power_iteration_normalizer : 'auto' (default), 'QR', 'LU', 'none'\\n        Whether the power iterations are normalized with step-by-step\\n        QR factorization (the slowest but most accurate), 'none'\\n        (the fastest but numerically unstable when `n_iter` is large, e.g.\\n        typically 5 or larger), or 'LU' factorization (numerically stable\\n        but can lose slightly in accuracy). The 'auto' mode applies no\\n        normalization if `n_iter` <= 2 and switches to LU otherwise.\\n\\n        .. versionadded:: 0.18\\n\\n    transpose : True, False or 'auto' (default)\\n        Whether the algorithm should be applied to M.T instead of M. The\\n        result should approximately be the same. The 'auto' mode will\\n        trigger the transposition if M.shape[1] > M.shape[0] since this\\n        implementation of randomized SVD tend to be a little faster in that\\n        case.\\n\\n        .. versionchanged:: 0.18\\n\\n    flip_sign : boolean, (True by default)\\n        The output of a singular value decomposition is only unique up to a\\n        permutation of the signs of the singular vectors. If `flip_sign` is\\n        set to `True`, the sign ambiguity is resolved by making the largest\\n        loadings for each component in the left singular vectors positive.\\n\\n    random_state : int, RandomState instance or None, optional (default=None)\\n        The seed of the pseudo random number generator to use when shuffling\\n        the data.  If int, random_state is the seed used by the random number\\n        generator; If RandomState instance, random_state is the random number\\n        generator; If None, the random number generator is the RandomState\\n        instance used by `np.random`.\\n\\n    Notes\\n    -----\\n    This algorithm finds a (usually very good) approximate truncated\\n    singular value decomposition using randomization to speed up the\\n    computations. It is particularly fast on large matrices on which\\n    you wish to extract only a small number of components. In order to\\n    obtain further speed up, `n_iter` can be set <=2 (at the cost of\\n    loss of precision).\\n\\n    References\\n    ----------\\n    * Finding structure with randomness: Stochastic algorithms for constructing\\n      approximate matrix decompositions\\n      Halko, et al., 2009 https://arxiv.org/abs/0909.4061\\n\\n    * A randomized algorithm for the decomposition of matrices\\n      Per-Gunnar Martinsson, Vladimir Rokhlin and Mark Tygert\\n\\n    * An implementation of a randomized algorithm for principal component\\n      analysis\\n      A. Szlam et al. 2014\\n    \"\n    },\n    {\n      inputs: [\n        {\n          is_optional: false,\n          param_type: ['array'],\n          name: 'X',\n          docstring: 'Data matrix',\n          options: null,\n          default_value: null,\n          expected_shape: '(n_samples, n_features)'\n        },\n        {\n          is_optional: false,\n          param_type: ['array'],\n          name: 'dictionary',\n          docstring:\n            'The dictionary matrix against which to solve the sparse coding of the data. Some of the algorithms assume normalized rows for meaningful output.',\n          options: null,\n          default_value: null,\n          expected_shape: '(n_components, n_features)'\n        },\n        {\n          is_optional: false,\n          param_type: ['array'],\n          name: 'gram',\n          docstring: \"Precomputed Gram matrix, dictionary * dictionary'\",\n          options: null,\n          default_value: null,\n          expected_shape: '(n_components, n_components)'\n        },\n        {\n          is_optional: false,\n          param_type: ['array'],\n          name: 'cov',\n          docstring: \"Precomputed covariance, dictionary' * X\",\n          options: null,\n          default_value: null,\n          expected_shape: '(n_components, n_samples)'\n        },\n        {\n          is_optional: false,\n          param_type: ['LIST_VALID_OPTIONS'],\n          name: 'algorithm',\n          docstring:\n            \"lars: uses the least angle regression method (linear_model.lars_path) lasso_lars: uses Lars to compute the Lasso solution lasso_cd: uses the coordinate descent method to compute the Lasso solution (linear_model.Lasso). lasso_lars will be faster if the estimated components are sparse. omp: uses orthogonal matching pursuit to estimate the sparse solution threshold: squashes to zero all coefficients less than alpha from the projection dictionary * X'\",\n          options: ['lasso_lars', 'lasso_cd', 'lars', 'omp', 'threshold'],\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int'],\n          name: 'n_nonzero_coefs',\n          docstring:\n            \"Number of nonzero coefficients to target in each column of the solution. This is only used by `algorithm='lars'` and `algorithm='omp'` and is overridden by `alpha` in the `omp` case.\",\n          options: null,\n          default_value: '',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['float'],\n          name: 'alpha',\n          docstring:\n            \"If `algorithm='lasso_lars'` or `algorithm='lasso_cd'`, `alpha` is the penalty applied to the L1 norm. If `algorithm='threshold'`, `alpha` is the absolute value of the threshold below which coefficients will be squashed to zero. If `algorithm='omp'`, `alpha` is the tolerance parameter: the value of the reconstruction error targeted. In this case, it overrides `n_nonzero_coefs`.\",\n          options: null,\n          default_value: '',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['bool'],\n          name: 'copy_cov',\n          docstring:\n            'Whether to copy the precomputed covariance matrix; if False, it may be overwritten.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: false,\n          param_type: ['array'],\n          name: 'init',\n          docstring:\n            \"Initialization value of the sparse codes. Only used if `algorithm='lasso_cd'`.\",\n          options: null,\n          default_value: null,\n          expected_shape: '(n_samples, n_components)'\n        },\n        {\n          is_optional: true,\n          param_type: ['int'],\n          name: 'max_iter',\n          docstring:\n            \"Maximum number of iterations to perform if `algorithm='lasso_cd'`.\",\n          options: null,\n          default_value: '',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int', null],\n          name: 'n_jobs',\n          docstring:\n            'Number of parallel jobs to run. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.',\n          options: null,\n          default_value: 'None',\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['bool'],\n          name: 'check_input',\n          docstring:\n            'If False, the input arrays X and dictionary will not be checked.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['int'],\n          name: 'verbose',\n          docstring:\n            'Controls the verbosity; the higher, the more messages. Defaults to 0.',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          is_optional: true,\n          param_type: ['bool'],\n          name: 'positive',\n          docstring:\n            'Whether to enforce positivity when finding the encoding.  .. versionadded:: 0.20',\n          options: null,\n          default_value: null,\n          expected_shape: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          returned: true,\n          param_type: ['array'],\n          name: 'code',\n          docstring: 'The sparse codes'\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ],\n      name: 'sparse_encode',\n      docstring:\n        \"Sparse coding\\n\\n    Each row of the result is the solution to a sparse coding problem.\\n    The goal is to find a sparse array `code` such that::\\n\\n        X ~= code * dictionary\\n\\n    Read more in the :ref:`User Guide <SparseCoder>`.\\n\\n    Parameters\\n    ----------\\n    X : array of shape (n_samples, n_features)\\n        Data matrix\\n\\n    dictionary : array of shape (n_components, n_features)\\n        The dictionary matrix against which to solve the sparse coding of\\n        the data. Some of the algorithms assume normalized rows for meaningful\\n        output.\\n\\n    gram : array, shape=(n_components, n_components)\\n        Precomputed Gram matrix, dictionary * dictionary'\\n\\n    cov : array, shape=(n_components, n_samples)\\n        Precomputed covariance, dictionary' * X\\n\\n    algorithm : {'lasso_lars', 'lasso_cd', 'lars', 'omp', 'threshold'}\\n        lars: uses the least angle regression method (linear_model.lars_path)\\n        lasso_lars: uses Lars to compute the Lasso solution\\n        lasso_cd: uses the coordinate descent method to compute the\\n        Lasso solution (linear_model.Lasso). lasso_lars will be faster if\\n        the estimated components are sparse.\\n        omp: uses orthogonal matching pursuit to estimate the sparse solution\\n        threshold: squashes to zero all coefficients less than alpha from\\n        the projection dictionary * X'\\n\\n    n_nonzero_coefs : int, 0.1 * n_features by default\\n        Number of nonzero coefficients to target in each column of the\\n        solution. This is only used by `algorithm='lars'` and `algorithm='omp'`\\n        and is overridden by `alpha` in the `omp` case.\\n\\n    alpha : float, 1. by default\\n        If `algorithm='lasso_lars'` or `algorithm='lasso_cd'`, `alpha` is the\\n        penalty applied to the L1 norm.\\n        If `algorithm='threshold'`, `alpha` is the absolute value of the\\n        threshold below which coefficients will be squashed to zero.\\n        If `algorithm='omp'`, `alpha` is the tolerance parameter: the value of\\n        the reconstruction error targeted. In this case, it overrides\\n        `n_nonzero_coefs`.\\n\\n    copy_cov : boolean, optional\\n        Whether to copy the precomputed covariance matrix; if False, it may be\\n        overwritten.\\n\\n    init : array of shape (n_samples, n_components)\\n        Initialization value of the sparse codes. Only used if\\n        `algorithm='lasso_cd'`.\\n\\n    max_iter : int, 1000 by default\\n        Maximum number of iterations to perform if `algorithm='lasso_cd'`.\\n\\n    n_jobs : int or None, optional (default=None)\\n        Number of parallel jobs to run.\\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\\n        for more details.\\n\\n    check_input : boolean, optional\\n        If False, the input arrays X and dictionary will not be checked.\\n\\n    verbose : int, optional\\n        Controls the verbosity; the higher, the more messages. Defaults to 0.\\n\\n    positive : boolean, optional\\n        Whether to enforce positivity when finding the encoding.\\n\\n        .. versionadded:: 0.20\\n\\n    Returns\\n    -------\\n    code : array of shape (n_samples, n_components)\\n        The sparse codes\\n\\n    See also\\n    --------\\n    sklearn.linear_model.lars_path\\n    sklearn.linear_model.orthogonal_mp\\n    sklearn.linear_model.Lasso\\n    SparseCoder\\n    \"\n    }\n  ],\n  docstring: '',\n  outputs: []\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/jsons/sklearnDecomposition.js","export default {\n  name: 'sklearn.preprocessing',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [\n    {\n      name: 'add_dummy_feature',\n      docstring:\n        'Augment dataset with an additional dummy feature.\\n\\n    This is useful for fitting an intercept term with implementations which\\n    cannot otherwise fit it directly.\\n\\n    Parameters\\n    ----------\\n    X : {array-like, sparse matrix}, shape [n_samples, n_features]\\n        Data.\\n\\n    value : float\\n        Value to use for the dummy feature.\\n\\n    Returns\\n    -------\\n\\n    X : {array, sparse matrix}, shape [n_samples, n_features + 1]\\n        Same data with dummy feature added as first column.\\n\\n    Examples\\n    --------\\n\\n    >>> from sklearn.preprocessing import add_dummy_feature\\n    >>> add_dummy_feature([[0, 1], [1, 0]])\\n    array([[1., 0., 1.],\\n           [1., 1., 0.]])\\n    ',\n      inputs: [\n        {\n          name: 'X',\n          docstring: 'Data.',\n          param_type: ['LIST_VALID_OPTIONS', 'array'],\n          expected_shape: '[n_samples, n_features]',\n          is_optional: false,\n          default_value: null,\n          options: [\n            'array-like',\n            'sparse matrix',\n            'shape [n_samples',\n            'n_features]'\n          ]\n        },\n        {\n          name: 'value',\n          docstring: 'Value to use for the dummy feature.',\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'X',\n          docstring: 'Same data with dummy feature added as first column.',\n          param_type: ['LIST_VALID_OPTIONS', 'array'],\n          returned: true\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'binarize',\n      docstring:\n        'Boolean thresholding of array-like or scipy.sparse matrix\\n\\n    Read more in the :ref:`User Guide <preprocessing_binarization>`.\\n\\n    Parameters\\n    ----------\\n    X : {array-like, sparse matrix}, shape [n_samples, n_features]\\n        The data to binarize, element by element.\\n        scipy.sparse matrices should be in CSR or CSC format to avoid an\\n        un-necessary copy.\\n\\n    threshold : float, optional (0.0 by default)\\n        Feature values below or equal to this are replaced by 0, above it by 1.\\n        Threshold may not be less than 0 for operations on sparse matrices.\\n\\n    copy : boolean, optional, default True\\n        set to False to perform inplace binarization and avoid a copy\\n        (if the input is already a numpy array or a scipy.sparse CSR / CSC\\n        matrix and if axis is 1).\\n\\n    See also\\n    --------\\n    Binarizer: Performs binarization using the ``Transformer`` API\\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\\n    ',\n      inputs: [\n        {\n          name: 'X',\n          docstring:\n            'The data to binarize, element by element. scipy.sparse matrices should be in CSR or CSC format to avoid an un-necessary copy.',\n          param_type: ['LIST_VALID_OPTIONS', 'array'],\n          expected_shape: '[n_samples, n_features]',\n          is_optional: false,\n          default_value: null,\n          options: [\n            'array-like',\n            'sparse matrix',\n            'shape [n_samples',\n            'n_features]'\n          ]\n        },\n        {\n          name: 'threshold',\n          docstring:\n            'Feature values below or equal to this are replaced by 0, above it by 1. Threshold may not be less than 0 for operations on sparse matrices.',\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '',\n          options: null\n        },\n        {\n          name: 'copy',\n          docstring:\n            'set to False to perform inplace binarization and avoid a copy (if the input is already a numpy array or a scipy.sparse CSR / CSC matrix and if axis is 1).',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'label_binarize',\n      docstring:\n        \"Binarize labels in a one-vs-all fashion\\n\\n    Several regression and binary classification algorithms are\\n    available in scikit-learn. A simple way to extend these algorithms\\n    to the multi-class classification case is to use the so-called\\n    one-vs-all scheme.\\n\\n    This function makes it possible to compute this transformation for a\\n    fixed set of class labels known ahead of time.\\n\\n    Parameters\\n    ----------\\n    y : array-like\\n        Sequence of integer labels or multilabel data to encode.\\n\\n    classes : array-like of shape [n_classes]\\n        Uniquely holds the label for each class.\\n\\n    neg_label : int (default: 0)\\n        Value with which negative labels must be encoded.\\n\\n    pos_label : int (default: 1)\\n        Value with which positive labels must be encoded.\\n\\n    sparse_output : boolean (default: False),\\n        Set to true if output binary array is desired in CSR sparse format\\n\\n    Returns\\n    -------\\n    Y : numpy array or CSR matrix of shape [n_samples, n_classes]\\n        Shape will be [n_samples, 1] for binary problems.\\n\\n    Examples\\n    --------\\n    >>> from sklearn.preprocessing import label_binarize\\n    >>> label_binarize([1, 6], classes=[1, 2, 4, 6])\\n    array([[1, 0, 0, 0],\\n           [0, 0, 0, 1]])\\n\\n    The class ordering is preserved:\\n\\n    >>> label_binarize([1, 6], classes=[1, 6, 4, 2])\\n    array([[1, 0, 0, 0],\\n           [0, 1, 0, 0]])\\n\\n    Binary targets transform to a column vector\\n\\n    >>> label_binarize(['yes', 'no', 'no', 'yes'], classes=['no', 'yes'])\\n    array([[1],\\n           [0],\\n           [0],\\n           [1]])\\n\\n    See also\\n    --------\\n    LabelBinarizer : class used to wrap the functionality of label_binarize and\\n        allow for fitting to classes independently of the transform operation\\n    \",\n      inputs: [\n        {\n          name: 'y',\n          docstring: 'Sequence of integer labels or multilabel data to encode.',\n          param_type: ['array'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'classes',\n          docstring: 'Uniquely holds the label for each class.',\n          param_type: ['array'],\n          expected_shape: '[n_classes]',\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'neg_label',\n          docstring: 'Value with which negative labels must be encoded.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '0',\n          options: null\n        },\n        {\n          name: 'pos_label',\n          docstring: 'Value with which positive labels must be encoded.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '1',\n          options: null\n        },\n        {\n          name: 'sparse_output',\n          docstring:\n            'Set to true if output binary array is desired in CSR sparse format',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'Y',\n          docstring: 'Shape will be [n_samples, 1] for binary problems.',\n          param_type: ['array'],\n          returned: true\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'maxabs_scale',\n      docstring:\n        'Scale each feature to the [-1, 1] range without breaking the sparsity.\\n\\n    This estimator scales each feature individually such\\n    that the maximal absolute value of each feature in the\\n    training set will be 1.0.\\n\\n    This scaler can also be applied to sparse CSR or CSC matrices.\\n\\n    Parameters\\n    ----------\\n    X : array-like, shape (n_samples, n_features)\\n        The data.\\n\\n    axis : int (0 by default)\\n        axis used to scale along. If 0, independently scale each feature,\\n        otherwise (if 1) scale each sample.\\n\\n    copy : boolean, optional, default is True\\n        Set to False to perform inplace scaling and avoid a copy (if the input\\n        is already a numpy array).\\n\\n    See also\\n    --------\\n    MaxAbsScaler: Performs scaling to the [-1, 1] range using the``Transformer`` API\\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\\n\\n    Notes\\n    -----\\n    NaNs are treated as missing values: disregarded to compute the statistics,\\n    and maintained during the data transformation.\\n\\n    For a comparison of the different scalers, transformers, and normalizers,\\n    see :ref:`examples/preprocessing/plot_all_scaling.py\\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\\n    ',\n      inputs: [\n        {\n          name: 'X',\n          docstring: 'The data.',\n          param_type: ['array'],\n          expected_shape: '(n_samples, n_features)',\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'axis',\n          docstring:\n            'axis used to scale along. If 0, independently scale each feature, otherwise (if 1) scale each sample.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '',\n          options: null\n        },\n        {\n          name: 'copy',\n          docstring:\n            'Set to False to perform inplace scaling and avoid a copy (if the input is already a numpy array).',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'minmax_scale',\n      docstring:\n        'Transforms features by scaling each feature to a given range.\\n\\n    This estimator scales and translates each feature individually such\\n    that it is in the given range on the training set, i.e. between\\n    zero and one.\\n\\n    The transformation is given by (when ``axis=0``)::\\n\\n        X_std = (X - X.min(axis=0)) / (X.max(axis=0) - X.min(axis=0))\\n        X_scaled = X_std * (max - min) + min\\n\\n    where min, max = feature_range.\\n\\n    The transformation is calculated as (when ``axis=0``)::\\n\\n       X_scaled = scale * X + min - X.min(axis=0) * scale\\n       where scale = (max - min) / (X.max(axis=0) - X.min(axis=0))\\n\\n    This transformation is often used as an alternative to zero mean,\\n    unit variance scaling.\\n\\n    Read more in the :ref:`User Guide <preprocessing_scaler>`.\\n\\n    .. versionadded:: 0.17\\n       *minmax_scale* function interface\\n       to :class:`sklearn.preprocessing.MinMaxScaler`.\\n\\n    Parameters\\n    ----------\\n    X : array-like, shape (n_samples, n_features)\\n        The data.\\n\\n    feature_range : tuple (min, max), default=(0, 1)\\n        Desired range of transformed data.\\n\\n    axis : int (0 by default)\\n        axis used to scale along. If 0, independently scale each feature,\\n        otherwise (if 1) scale each sample.\\n\\n    copy : boolean, optional, default is True\\n        Set to False to perform inplace scaling and avoid a copy (if the input\\n        is already a numpy array).\\n\\n    See also\\n    --------\\n    MinMaxScaler: Performs scaling to a given range using the``Transformer`` API\\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\\n\\n    Notes\\n    -----\\n    For a comparison of the different scalers, transformers, and normalizers,\\n    see :ref:`examples/preprocessing/plot_all_scaling.py\\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\\n    ',\n      inputs: [\n        {\n          name: 'X',\n          docstring: 'The data.',\n          param_type: ['array'],\n          expected_shape: '(n_samples, n_features)',\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'feature_range',\n          docstring: 'Desired range of transformed data.',\n          param_type: ['tuple'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'axis',\n          docstring:\n            'axis used to scale along. If 0, independently scale each feature, otherwise (if 1) scale each sample.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '',\n          options: null\n        },\n        {\n          name: 'copy',\n          docstring:\n            'Set to False to perform inplace scaling and avoid a copy (if the input is already a numpy array).',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'normalize',\n      docstring:\n        \"Scale input vectors individually to unit norm (vector length).\\n\\n    Read more in the :ref:`User Guide <preprocessing_normalization>`.\\n\\n    Parameters\\n    ----------\\n    X : {array-like, sparse matrix}, shape [n_samples, n_features]\\n        The data to normalize, element by element.\\n        scipy.sparse matrices should be in CSR format to avoid an\\n        un-necessary copy.\\n\\n    norm : 'l1', 'l2', or 'max', optional ('l2' by default)\\n        The norm to use to normalize each non zero sample (or each non-zero\\n        feature if axis is 0).\\n\\n    axis : 0 or 1, optional (1 by default)\\n        axis used to normalize the data along. If 1, independently normalize\\n        each sample, otherwise (if 0) normalize each feature.\\n\\n    copy : boolean, optional, default True\\n        set to False to perform inplace row normalization and avoid a\\n        copy (if the input is already a numpy array or a scipy.sparse\\n        CSR matrix and if axis is 1).\\n\\n    return_norm : boolean, default False\\n        whether to return the computed norms\\n\\n    Returns\\n    -------\\n    X : {array-like, sparse matrix}, shape [n_samples, n_features]\\n        Normalized input X.\\n\\n    norms : array, shape [n_samples] if axis=1 else [n_features]\\n        An array of norms along given axis for X.\\n        When X is sparse, a NotImplementedError will be raised\\n        for norm 'l1' or 'l2'.\\n\\n    See also\\n    --------\\n    Normalizer: Performs normalization using the ``Transformer`` API\\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\\n\\n    Notes\\n    -----\\n    For a comparison of the different scalers, transformers, and normalizers,\\n    see :ref:`examples/preprocessing/plot_all_scaling.py\\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\\n\\n    \",\n      inputs: [\n        {\n          name: 'X',\n          docstring:\n            'The data to normalize, element by element. scipy.sparse matrices should be in CSR format to avoid an un-necessary copy.',\n          param_type: ['LIST_VALID_OPTIONS', 'array'],\n          expected_shape: '[n_samples, n_features]',\n          is_optional: false,\n          default_value: null,\n          options: [\n            'array-like',\n            'sparse matrix',\n            'shape [n_samples',\n            'n_features]'\n          ]\n        },\n        {\n          name: 'norm',\n          docstring:\n            'The norm to use to normalize each non zero sample (or each non-zero feature if axis is 0).',\n          param_type: [null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '',\n          options: null\n        },\n        {\n          name: 'axis',\n          docstring:\n            'axis used to normalize the data along. If 1, independently normalize each sample, otherwise (if 0) normalize each feature.',\n          param_type: [null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '',\n          options: null\n        },\n        {\n          name: 'copy',\n          docstring:\n            'set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array or a scipy.sparse CSR matrix and if axis is 1).',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'return_norm',\n          docstring: 'whether to return the computed norms',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'False',\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'X',\n          docstring: 'Normalized input X.',\n          param_type: ['LIST_VALID_OPTIONS', 'array'],\n          returned: true\n        },\n        {\n          name: 'norms',\n          docstring:\n            \"An array of norms along given axis for X. When X is sparse, a NotImplementedError will be raised for norm 'l1' or 'l2'.\",\n          param_type: ['array'],\n          returned: true\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'power_transform',\n      docstring:\n        \"\\n    Power transforms are a family of parametric, monotonic transformations\\n    that are applied to make data more Gaussian-like. This is useful for\\n    modeling issues related to heteroscedasticity (non-constant variance),\\n    or other situations where normality is desired.\\n\\n    Currently, power_transform supports the Box-Cox transform and the\\n    Yeo-Johnson transform. The optimal parameter for stabilizing variance and\\n    minimizing skewness is estimated through maximum likelihood.\\n\\n    Box-Cox requires input data to be strictly positive, while Yeo-Johnson\\n    supports both positive or negative data.\\n\\n    By default, zero-mean, unit-variance normalization is applied to the\\n    transformed data.\\n\\n    Read more in the :ref:`User Guide <preprocessing_transformer>`.\\n\\n    Parameters\\n    ----------\\n    X : array-like, shape (n_samples, n_features)\\n        The data to be transformed using a power transformation.\\n\\n    method : str\\n        The power transform method. Available methods are:\\n\\n        - 'yeo-johnson' [1]_, works with positive and negative values\\n        - 'box-cox' [2]_, only works with strictly positive values\\n\\n        The default method will be changed from 'box-cox' to 'yeo-johnson'\\n        in version 0.23. To suppress the FutureWarning, explicitly set the\\n        parameter.\\n\\n    standardize : boolean, default=True\\n        Set to True to apply zero-mean, unit-variance normalization to the\\n        transformed output.\\n\\n    copy : boolean, optional, default=True\\n        Set to False to perform inplace computation during transformation.\\n\\n    Returns\\n    -------\\n    X_trans : array-like, shape (n_samples, n_features)\\n        The transformed data.\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> from sklearn.preprocessing import power_transform\\n    >>> data = [[1, 2], [3, 2], [4, 5]]\\n    >>> print(power_transform(data, method='box-cox'))  # doctest: +ELLIPSIS\\n    [[-1.332... -0.707...]\\n     [ 0.256... -0.707...]\\n     [ 1.076...  1.414...]]\\n\\n    See also\\n    --------\\n    PowerTransformer : Equivalent transformation with the\\n        ``Transformer`` API (e.g. as part of a preprocessing\\n        :class:`sklearn.pipeline.Pipeline`).\\n\\n    quantile_transform : Maps data to a standard normal distribution with\\n        the parameter `output_distribution='normal'`.\\n\\n    Notes\\n    -----\\n    NaNs are treated as missing values: disregarded in ``fit``, and maintained\\n    in ``transform``.\\n\\n    For a comparison of the different scalers, transformers, and normalizers,\\n    see :ref:`examples/preprocessing/plot_all_scaling.py\\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\\n\\n    References\\n    ----------\\n\\n    .. [1] I.K. Yeo and R.A. Johnson, \\\"A new family of power transformations to\\n           improve normality or symmetry.\\\" Biometrika, 87(4), pp.954-959,\\n           (2000).\\n\\n    .. [2] G.E.P. Box and D.R. Cox, \\\"An Analysis of Transformations\\\", Journal\\n           of the Royal Statistical Society B, 26, 211-252 (1964).\\n    \",\n      inputs: [\n        {\n          name: 'X',\n          docstring: 'The data to be transformed using a power transformation.',\n          param_type: ['array'],\n          expected_shape: '(n_samples, n_features)',\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'method',\n          docstring:\n            \"The power transform method. Available methods are:  - 'yeo-johnson' [1]_, works with positive and negative values - 'box-cox' [2]_, only works with strictly positive values  The default method will be changed from 'box-cox' to 'yeo-johnson' in version 0.23. To suppress the FutureWarning, explicitly set the parameter.\",\n          param_type: ['str'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'standardize',\n          docstring:\n            'Set to True to apply zero-mean, unit-variance normalization to the transformed output.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'copy',\n          docstring:\n            'Set to False to perform inplace computation during transformation.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'X_trans',\n          docstring: 'The transformed data.',\n          param_type: ['array'],\n          returned: true\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'quantile_transform',\n      docstring:\n        \"Transform features using quantiles information.\\n\\n    This method transforms the features to follow a uniform or a normal\\n    distribution. Therefore, for a given feature, this transformation tends\\n    to spread out the most frequent values. It also reduces the impact of\\n    (marginal) outliers: this is therefore a robust preprocessing scheme.\\n\\n    The transformation is applied on each feature independently. First an\\n    estimate of the cumulative distribution function of a feature is\\n    used to map the original values to a uniform distribution. The obtained\\n    values are then mapped to the desired output distribution using the\\n    associated quantile function. Features values of new/unseen data that fall\\n    below or above the fitted range will be mapped to the bounds of the output\\n    distribution. Note that this transform is non-linear. It may distort linear\\n    correlations between variables measured at the same scale but renders\\n    variables measured at different scales more directly comparable.\\n\\n    Read more in the :ref:`User Guide <preprocessing_transformer>`.\\n\\n    Parameters\\n    ----------\\n    X : array-like, sparse matrix\\n        The data to transform.\\n\\n    axis : int, (default=0)\\n        Axis used to compute the means and standard deviations along. If 0,\\n        transform each feature, otherwise (if 1) transform each sample.\\n\\n    n_quantiles : int, optional (default=1000 or n_samples)\\n        Number of quantiles to be computed. It corresponds to the number\\n        of landmarks used to discretize the cumulative distribution function.\\n        If n_quantiles is larger than the number of samples, n_quantiles is set\\n        to the number of samples as a larger number of quantiles does not give\\n        a better approximation of the cumulative distribution function\\n        estimator.\\n\\n    output_distribution : str, optional (default='uniform')\\n        Marginal distribution for the transformed data. The choices are\\n        'uniform' (default) or 'normal'.\\n\\n    ignore_implicit_zeros : bool, optional (default=False)\\n        Only applies to sparse matrices. If True, the sparse entries of the\\n        matrix are discarded to compute the quantile statistics. If False,\\n        these entries are treated as zeros.\\n\\n    subsample : int, optional (default=1e5)\\n        Maximum number of samples used to estimate the quantiles for\\n        computational efficiency. Note that the subsampling procedure may\\n        differ for value-identical sparse and dense matrices.\\n\\n    random_state : int, RandomState instance or None, optional (default=None)\\n        If int, random_state is the seed used by the random number generator;\\n        If RandomState instance, random_state is the random number generator;\\n        If None, the random number generator is the RandomState instance used\\n        by np.random. Note that this is used by subsampling and smoothing\\n        noise.\\n\\n    copy : boolean, optional, (default=\\\"warn\\\")\\n        Set to False to perform inplace transformation and avoid a copy (if the\\n        input is already a numpy array). If True, a copy of `X` is transformed,\\n        leaving the original `X` unchanged\\n\\n        .. deprecated:: 0.21\\n            The default value of parameter `copy` will be changed from False\\n            to True in 0.23. The current default of False is being changed to\\n            make it more consistent with the default `copy` values of other\\n            functions in :mod:`sklearn.preprocessing.data`. Furthermore, the\\n            current default of False may have unexpected side effects by\\n            modifying the value of `X` inplace\\n\\n    Returns\\n    -------\\n    Xt : ndarray or sparse matrix, shape (n_samples, n_features)\\n        The transformed data.\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> from sklearn.preprocessing import quantile_transform\\n    >>> rng = np.random.RandomState(0)\\n    >>> X = np.sort(rng.normal(loc=0.5, scale=0.25, size=(25, 1)), axis=0)\\n    >>> quantile_transform(X, n_quantiles=10, random_state=0, copy=True)\\n    ... # doctest: +ELLIPSIS\\n    array([...])\\n\\n    See also\\n    --------\\n    QuantileTransformer : Performs quantile-based scaling using the\\n        ``Transformer`` API (e.g. as part of a preprocessing\\n        :class:`sklearn.pipeline.Pipeline`).\\n    power_transform : Maps data to a normal distribution using a\\n        power transformation.\\n    scale : Performs standardization that is faster, but less robust\\n        to outliers.\\n    robust_scale : Performs robust standardization that removes the influence\\n        of outliers but does not put outliers and inliers on the same scale.\\n\\n    Notes\\n    -----\\n    NaNs are treated as missing values: disregarded in fit, and maintained in\\n    transform.\\n\\n    For a comparison of the different scalers, transformers, and normalizers,\\n    see :ref:`examples/preprocessing/plot_all_scaling.py\\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\\n    \",\n      inputs: [\n        {\n          name: 'X',\n          docstring: 'The data to transform.',\n          param_type: ['array'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'axis',\n          docstring:\n            'Axis used to compute the means and standard deviations along. If 0, transform each feature, otherwise (if 1) transform each sample.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '0',\n          options: null\n        },\n        {\n          name: 'n_quantiles',\n          docstring:\n            'Number of quantiles to be computed. It corresponds to the number of landmarks used to discretize the cumulative distribution function. If n_quantiles is larger than the number of samples, n_quantiles is set to the number of samples as a larger number of quantiles does not give a better approximation of the cumulative distribution function estimator.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '1000 or n_samples',\n          options: null\n        },\n        {\n          name: 'output_distribution',\n          docstring:\n            \"Marginal distribution for the transformed data. The choices are 'uniform' (default) or 'normal'.\",\n          param_type: ['str'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'uniform',\n          options: null\n        },\n        {\n          name: 'ignore_implicit_zeros',\n          docstring:\n            'Only applies to sparse matrices. If True, the sparse entries of the matrix are discarded to compute the quantile statistics. If False, these entries are treated as zeros.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'False',\n          options: null\n        },\n        {\n          name: 'subsample',\n          docstring:\n            'Maximum number of samples used to estimate the quantiles for computational efficiency. Note that the subsampling procedure may differ for value-identical sparse and dense matrices.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '1e5',\n          options: null\n        },\n        {\n          name: 'random_state',\n          docstring:\n            'If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random. Note that this is used by subsampling and smoothing noise.',\n          param_type: ['int', null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'None',\n          options: null\n        },\n        {\n          name: 'copy',\n          docstring:\n            'Set to False to perform inplace transformation and avoid a copy (if the input is already a numpy array). If True, a copy of `X` is transformed, leaving the original `X` unchanged  .. deprecated:: 0.21     The default value of parameter `copy` will be changed from False     to True in 0.23. The current default of False is being changed to     make it more consistent with the default `copy` values of other     functions in :mod:`sklearn.preprocessing.data`. Furthermore, the     current default of False may have unexpected side effects by     modifying the value of `X` inplace',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '\"warn\"',\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'Xt',\n          docstring: 'The transformed data.',\n          param_type: ['array'],\n          returned: true\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'robust_scale',\n      docstring:\n        'Standardize a dataset along any axis\\n\\n    Center to the median and component wise scale\\n    according to the interquartile range.\\n\\n    Read more in the :ref:`User Guide <preprocessing_scaler>`.\\n\\n    Parameters\\n    ----------\\n    X : array-like\\n        The data to center and scale.\\n\\n    axis : int (0 by default)\\n        axis used to compute the medians and IQR along. If 0,\\n        independently scale each feature, otherwise (if 1) scale\\n        each sample.\\n\\n    with_centering : boolean, True by default\\n        If True, center the data before scaling.\\n\\n    with_scaling : boolean, True by default\\n        If True, scale the data to unit variance (or equivalently,\\n        unit standard deviation).\\n\\n    quantile_range : tuple (q_min, q_max), 0.0 < q_min < q_max < 100.0\\n        Default: (25.0, 75.0) = (1st quantile, 3rd quantile) = IQR\\n        Quantile range used to calculate ``scale_``.\\n\\n        .. versionadded:: 0.18\\n\\n    copy : boolean, optional, default is True\\n        set to False to perform inplace row normalization and avoid a\\n        copy (if the input is already a numpy array or a scipy.sparse\\n        CSR matrix and if axis is 1).\\n\\n    Notes\\n    -----\\n    This implementation will refuse to center scipy.sparse matrices\\n    since it would make them non-sparse and would potentially crash the\\n    program with memory exhaustion problems.\\n\\n    Instead the caller is expected to either set explicitly\\n    `with_centering=False` (in that case, only variance scaling will be\\n    performed on the features of the CSR matrix) or to call `X.toarray()`\\n    if he/she expects the materialized dense array to fit in memory.\\n\\n    To avoid memory copy the caller should pass a CSR matrix.\\n\\n    For a comparison of the different scalers, transformers, and normalizers,\\n    see :ref:`examples/preprocessing/plot_all_scaling.py\\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\\n\\n    See also\\n    --------\\n    RobustScaler: Performs centering and scaling using the ``Transformer`` API\\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\\n    ',\n      inputs: [\n        {\n          name: 'X',\n          docstring: 'The data to center and scale.',\n          param_type: ['array'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'axis',\n          docstring:\n            'axis used to compute the medians and IQR along. If 0, independently scale each feature, otherwise (if 1) scale each sample.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '',\n          options: null\n        },\n        {\n          name: 'with_centering',\n          docstring: 'If True, center the data before scaling.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '',\n          options: null\n        },\n        {\n          name: 'with_scaling',\n          docstring:\n            'If True, scale the data to unit variance (or equivalently, unit standard deviation).',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '',\n          options: null\n        },\n        {\n          name: 'quantile_range',\n          docstring:\n            'Default: (25.0, 75.0) = (1st quantile, 3rd quantile) = IQR Quantile range used to calculate ``scale_``.  .. versionadded:: 0.18',\n          param_type: ['tuple'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'copy',\n          docstring:\n            'set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array or a scipy.sparse CSR matrix and if axis is 1).',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'scale',\n      docstring:\n        'Standardize a dataset along any axis\\n\\n    Center to the mean and component wise scale to unit variance.\\n\\n    Read more in the :ref:`User Guide <preprocessing_scaler>`.\\n\\n    Parameters\\n    ----------\\n    X : {array-like, sparse matrix}\\n        The data to center and scale.\\n\\n    axis : int (0 by default)\\n        axis used to compute the means and standard deviations along. If 0,\\n        independently standardize each feature, otherwise (if 1) standardize\\n        each sample.\\n\\n    with_mean : boolean, True by default\\n        If True, center the data before scaling.\\n\\n    with_std : boolean, True by default\\n        If True, scale the data to unit variance (or equivalently,\\n        unit standard deviation).\\n\\n    copy : boolean, optional, default True\\n        set to False to perform inplace row normalization and avoid a\\n        copy (if the input is already a numpy array or a scipy.sparse\\n        CSC matrix and if axis is 1).\\n\\n    Notes\\n    -----\\n    This implementation will refuse to center scipy.sparse matrices\\n    since it would make them non-sparse and would potentially crash the\\n    program with memory exhaustion problems.\\n\\n    Instead the caller is expected to either set explicitly\\n    `with_mean=False` (in that case, only variance scaling will be\\n    performed on the features of the CSC matrix) or to call `X.toarray()`\\n    if he/she expects the materialized dense array to fit in memory.\\n\\n    To avoid memory copy the caller should pass a CSC matrix.\\n\\n    NaNs are treated as missing values: disregarded to compute the statistics,\\n    and maintained during the data transformation.\\n\\n    We use a biased estimator for the standard deviation, equivalent to\\n    `numpy.std(x, ddof=0)`. Note that the choice of `ddof` is unlikely to\\n    affect model performance.\\n\\n    For a comparison of the different scalers, transformers, and normalizers,\\n    see :ref:`examples/preprocessing/plot_all_scaling.py\\n    <sphx_glr_auto_examples_preprocessing_plot_all_scaling.py>`.\\n\\n    See also\\n    --------\\n    StandardScaler: Performs scaling to unit variance using the``Transformer`` API\\n        (e.g. as part of a preprocessing :class:`sklearn.pipeline.Pipeline`).\\n\\n    ',\n      inputs: [\n        {\n          name: 'X',\n          docstring: 'The data to center and scale.',\n          param_type: ['LIST_VALID_OPTIONS', 'array'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: ['array-like', 'sparse matrix']\n        },\n        {\n          name: 'axis',\n          docstring:\n            'axis used to compute the means and standard deviations along. If 0, independently standardize each feature, otherwise (if 1) standardize each sample.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '',\n          options: null\n        },\n        {\n          name: 'with_mean',\n          docstring: 'If True, center the data before scaling.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '',\n          options: null\n        },\n        {\n          name: 'with_std',\n          docstring:\n            'If True, scale the data to unit variance (or equivalently, unit standard deviation).',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '',\n          options: null\n        },\n        {\n          name: 'copy',\n          docstring:\n            'set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array or a scipy.sparse CSC matrix and if axis is 1).',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ]\n    }\n  ],\n  nodes: [\n    {\n      name: 'MaxAbsScaler',\n      docstring:\n        'Scale each feature by its maximum absolute value.\\n\\n    This estimator scales and translates each feature individually such\\n    that the maximal absolute value of each feature in the\\n    training set will be 1.0. It does not shift/center the data, and\\n    thus does not destroy any sparsity.',\n      inputs: [\n        {\n          name: 'copy',\n          docstring:\n            'Set to False to perform inplace scaling and avoid a copy (if the input is already a numpy array).',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'scale_',\n          docstring: 'Per feature relative scaling of the data.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'max_abs_',\n          docstring: 'Per feature maximum absolute value.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'n_samples_seen_',\n          docstring:\n            'The number of samples processed by the estimator. Will be reset on new calls to fit, but increments across ``partial_fit`` calls.',\n          param_type: ['int'],\n          returned: false\n        }\n      ],\n      node_functions: [\n        {\n          name: '__init__',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_param_names',\n          docstring: 'Get parameter names for the estimator',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_tags',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_more_tags',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_reset',\n          docstring:\n            'Reset internal data-dependent state of the scaler, if necessary.\\n\\n        __init__ parameters are not touched.\\n        ',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'fit',\n          docstring:\n            'Compute the maximum absolute value to be used for later scaling.',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'The data used to compute the per-feature minimum and maximum used for later scaling along the features axis.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'fit_transform',\n          docstring:\n            'Fit to data, then transform it.\\n\\n        Fits transformer to X and y with optional parameters fit_params\\n        and returns a transformed version of X.',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'Training set.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'y',\n              docstring: 'Target values.',\n              param_type: ['array'],\n              expected_shape: '[n_samples]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'X_new',\n              docstring: 'Transformed array.',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'inverse_transform',\n          docstring: 'Scale back the data to the original representation',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'The data that should be transformed back.',\n              param_type: ['array'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'partial_fit',\n          docstring:\n            'Online computation of max absolute value of X for later scaling.\\n        All of X is processed as a single batch. This is intended for cases\\n        when `fit` is not feasible due to very large number of `n_samples`\\n        or because X is read from a continuous stream.',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'The data used to compute the mean and standard deviation used for later scaling along the features axis.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'y',\n              docstring: 'Ignored',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'transform',\n          docstring: 'Scale the data',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'The data that should be scaled.',\n              param_type: ['array'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'MinMaxScaler',\n      docstring:\n        'Transforms features by scaling each feature to a given range.\\n\\n    This estimator scales and translates each feature individually such\\n    that it is in the given range on the training set, e.g. between\\n    zero and one.\\n\\n    The transformation is given by::\\n\\n        X_std = (X - X.min(axis=0)) / (X.max(axis=0) - X.min(axis=0))\\n        X_scaled = X_std * (max - min) + min\\n\\n    where min, max = feature_range.\\n\\n    The transformation is calculated as::\\n\\n        X_scaled = scale * X + min - X.min(axis=0) * scale\\n        where scale = (max - min) / (X.max(axis=0) - X.min(axis=0))\\n\\n    This transformation is often used as an alternative to zero mean,\\n    unit variance scaling.',\n      inputs: [\n        {\n          name: 'feature_range',\n          docstring: 'Desired range of transformed data.',\n          param_type: ['tuple'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '(0, 1)',\n          options: null\n        },\n        {\n          name: 'copy',\n          docstring:\n            'Set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array).',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'min_',\n          docstring:\n            'Per feature adjustment for minimum. Equivalent to ``min - X.min(axis=0) * self.scale_``',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'scale_',\n          docstring:\n            'Per feature relative scaling of the data. Equivalent to ``(max - min) / (X.max(axis=0) - X.min(axis=0))``',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'data_min_',\n          docstring: 'Per feature minimum seen in the data',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'data_max_',\n          docstring: 'Per feature maximum seen in the data',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'data_range_',\n          docstring:\n            'Per feature range ``(data_max_ - data_min_)`` seen in the data',\n          param_type: ['array'],\n          returned: false\n        }\n      ],\n      node_functions: [\n        {\n          name: '__init__',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_param_names',\n          docstring: 'Get parameter names for the estimator',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_tags',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_more_tags',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_reset',\n          docstring:\n            'Reset internal data-dependent state of the scaler, if necessary.\\n\\n        __init__ parameters are not touched.\\n        ',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'fit',\n          docstring:\n            'Compute the minimum and maximum to be used for later scaling.',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'The data used to compute the per-feature minimum and maximum used for later scaling along the features axis.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'fit_transform',\n          docstring:\n            'Fit to data, then transform it.\\n\\n        Fits transformer to X and y with optional parameters fit_params\\n        and returns a transformed version of X.',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'Training set.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'y',\n              docstring: 'Target values.',\n              param_type: ['array'],\n              expected_shape: '[n_samples]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'X_new',\n              docstring: 'Transformed array.',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'inverse_transform',\n          docstring: 'Undo the scaling of X according to feature_range.',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Input data that will be transformed. It cannot be sparse.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'partial_fit',\n          docstring:\n            'Online computation of min and max on X for later scaling.\\n        All of X is processed as a single batch. This is intended for cases\\n        when `fit` is not feasible due to very large number of `n_samples`\\n        or because X is read from a continuous stream.',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'The data used to compute the mean and standard deviation used for later scaling along the features axis.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'y',\n              docstring: 'Ignored',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'transform',\n          docstring: 'Scaling features of X according to feature_range.',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'Input data that will be transformed.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'Normalizer',\n      docstring:\n        'Normalize samples individually to unit norm.\\n\\n    Each sample (i.e. each row of the data matrix) with at least one\\n    non zero component is rescaled independently of other samples so\\n    that its norm (l1 or l2) equals one.\\n\\n    This transformer is able to work both with dense numpy arrays and\\n    scipy.sparse matrix (use CSR format if you want to avoid the burden of\\n    a copy / conversion).\\n\\n    Scaling inputs to unit norms is a common operation for text\\n    classification or clustering for instance. For instance the dot\\n    product of two l2-normalized TF-IDF vectors is the cosine similarity\\n    of the vectors and is the base similarity metric for the Vector\\n    Space Model commonly used by the Information Retrieval community.',\n      inputs: [\n        {\n          name: 'norm',\n          docstring: 'The norm to use to normalize each non zero sample.',\n          param_type: ['LIST_VALID_OPTIONS'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'l2',\n          options: ['l1', 'l2', 'max']\n        },\n        {\n          name: 'copy',\n          docstring:\n            'set to False to perform inplace row normalization and avoid a copy (if the input is already a numpy array or a scipy.sparse CSR matrix).',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        }\n      ],\n      outputs: [],\n      node_functions: [\n        {\n          name: '__init__',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_param_names',\n          docstring: 'Get parameter names for the estimator',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_tags',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_more_tags',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'fit',\n          docstring:\n            'Do nothing and return the estimator unchanged\\n\\n        This method is just there to implement the usual API and hence\\n        work in pipelines.',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'Data',\n              param_type: ['array'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'fit_transform',\n          docstring:\n            'Fit to data, then transform it.\\n\\n        Fits transformer to X and y with optional parameters fit_params\\n        and returns a transformed version of X.',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'Training set.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'y',\n              docstring: 'Target values.',\n              param_type: ['array'],\n              expected_shape: '[n_samples]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'X_new',\n              docstring: 'Transformed array.',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'transform',\n          docstring: 'Scale each non zero row of X to unit norm',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'The data to normalize, row by row. scipy.sparse matrices should be in CSR format to avoid an un-necessary copy.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'copy',\n              docstring: 'Copy the input X or not.',\n              param_type: ['bool', null],\n              expected_shape: null,\n              is_optional: true,\n              default_value: 'None',\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'OneHotEncoder',\n      docstring:\n        \"Encode categorical integer features as a one-hot numeric array.\\n\\n    The input to this transformer should be an array-like of integers or\\n    strings, denoting the values taken on by categorical (discrete) features.\\n    The features are encoded using a one-hot (aka 'one-of-K' or 'dummy')\\n    encoding scheme. This creates a binary column for each category and\\n    returns a sparse matrix or dense array.\\n\\n    By default, the encoder derives the categories based on the unique values\\n    in each feature. Alternatively, you can also specify the `categories`\\n    manually.\\n    The OneHotEncoder previously assumed that the input features take on\\n    values in the range [0, max(values)). This behaviour is deprecated.\\n\\n    This encoding is needed for feeding categorical data to many scikit-learn\\n    estimators, notably linear models and SVMs with the standard kernels.\\n\\n    Note: a one-hot encoding of y labels should use a LabelBinarizer\\n    instead.\",\n      inputs: [\n        {\n          name: 'categories',\n          docstring:\n            \"Categories (unique values) per feature:  - 'auto' : Determine categories automatically from the training data. - list : ``categories[i]`` holds the categories expected in the ith   column. The passed categories should not mix strings and numeric   values within a single feature, and should be sorted in case of   numeric values.  The used categories can be found in the ``categories_`` attribute.\",\n          param_type: ['str', 'array', 'list'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'auto.',\n          options: null\n        },\n        {\n          name: 'drop',\n          docstring:\n            \"Specifies a methodology to use to drop one of the categories per feature. This is useful in situations where perfectly collinear features cause problems, such as when feeding the resulting data into a neural network or an unregularized regression.  - None : retain all features (the default). - 'first' : drop the first category in each feature. If only one   category is present, the feature will be dropped entirely. - array : ``drop[i]`` is the category in feature ``X[:, i]`` that   should be dropped.\",\n          param_type: ['array', 'list', 'str'],\n          expected_shape: '(n_features,)',\n          is_optional: true,\n          default_value: 'None',\n          options: null\n        },\n        {\n          name: 'sparse',\n          docstring:\n            'Will return sparse matrix if set True else will return an array.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'dtype',\n          docstring: 'Desired dtype of output.',\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'np.float',\n          options: null\n        },\n        {\n          name: 'handle_unknown',\n          docstring:\n            \"Whether to raise an error or ignore if an unknown categorical feature is present during transform (default is to raise). When this parameter is set to 'ignore' and an unknown category is encountered during transform, the resulting one-hot encoded columns for this feature will be all zeros. In the inverse transform, an unknown category will be denoted as None.\",\n          param_type: ['LIST_VALID_OPTIONS'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'error',\n          options: ['error', 'ignore']\n        },\n        {\n          name: 'n_values',\n          docstring:\n            \"Number of values per feature.  - 'auto' : determine value range from training data. - int : number of categorical values per feature.         Each feature value should be in ``range(n_values)`` - array : ``n_values[i]`` is the number of categorical values in           ``X[:, i]``. Each feature value should be           in ``range(n_values[i])``\",\n          param_type: ['array', 'int', 'str'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'auto',\n          options: null\n        },\n        {\n          name: 'categorical_features',\n          docstring:\n            \"Specify what features are treated as categorical.  - 'all': All features are treated as categorical. - array of indices: Array of categorical feature indices. - mask: Array of length n_features and with dtype=bool.  Non-categorical features are always stacked to the right of the matrix.\",\n          param_type: ['array', 'str'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'all',\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'categories_',\n          docstring:\n            'The categories of each feature determined during fitting (in order of the features in X and corresponding with the output of ``transform``). This includes the category specified in ``drop`` (if any).',\n          param_type: ['array', 'list'],\n          returned: false\n        },\n        {\n          name: 'drop_idx_',\n          docstring:\n            '``drop_idx_[i]`` is\\u00a0the index in ``categories_[i]`` of the category to be dropped for each feature. None if all the transformed features will be retained.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'active_features_',\n          docstring:\n            \"Indices for active features, meaning values that actually occur in the training set. Only available when n_values is ``'auto'``.  .. deprecated:: 0.20     The ``active_features_`` attribute was deprecated in version     0.20 and will be removed in 0.22.\",\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'feature_indices_',\n          docstring:\n            'Indices to feature ranges. Feature ``i`` in the original data is mapped to features from ``feature_indices_[i]`` to ``feature_indices_[i+1]`` (and then potentially masked by ``active_features_`` afterwards)  .. deprecated:: 0.20     The ``feature_indices_`` attribute was deprecated in version     0.20 and will be removed in 0.22.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'n_values_',\n          docstring:\n            'Maximum number of values per feature.  .. deprecated:: 0.20     The ``n_values_`` attribute was deprecated in version     0.20 and will be removed in 0.22.',\n          param_type: ['array'],\n          returned: false\n        }\n      ],\n      node_functions: [\n        {\n          name: '__init__',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_check_X',\n          docstring:\n            '\\n        Perform custom check_array:\\n        - convert list of strings to object dtype\\n        - check for missing values for object dtype data (check_array does\\n          not do that)\\n        - return list of features (arrays): this list of features is\\n          constructed feature by feature to preserve the data types\\n          of pandas DataFrame columns, as otherwise information is lost\\n          and cannot be used, eg for the `categories_` attribute.\\n\\n        ',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_compute_drop_idx',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_fit',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_feature',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_param_names',\n          docstring: 'Get parameter names for the estimator',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_tags',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_handle_deprecations',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_legacy_fit_transform',\n          docstring: 'Assumes X contains only categorical features.',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_legacy_transform',\n          docstring: 'Assumes X contains only categorical features.',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_transform',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_transform_new',\n          docstring: 'New implementation assuming categorical input',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_validate_keywords',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'fit',\n          docstring: 'Fit OneHotEncoder to X.',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'The data to determine the categories of each feature.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: '',\n              docstring: '',\n              param_type: [null],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'fit_transform',\n          docstring:\n            'Fit OneHotEncoder to X, then transform X.\\n\\n        Equivalent to fit(X).transform(X) but more convenient.',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'The data to encode.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'X_out',\n              docstring: 'Transformed input.',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'get_feature_names',\n          docstring: 'Return feature names for output features.',\n          inputs: [\n            {\n              name: 'input_features',\n              docstring:\n                'String names for input features if available. By default, \"x0\", \"x1\", ... \"xn_features\" is used.',\n              param_type: ['list'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'output_feature_names',\n              docstring: '',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'inverse_transform',\n          docstring:\n            'Convert the back data to the original representation.\\n\\n        In case unknown categories are encountered (all zeros in the\\n        one-hot encoding), ``None`` is used to represent this category.',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'The transformed data.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_encoded_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'X_tr',\n              docstring: 'Inverse transformed array.',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'transform',\n          docstring: 'Transform X using one-hot encoding.',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'The data to encode.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'X_out',\n              docstring: 'Transformed input.',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'StandardScaler',\n      docstring:\n        'Standardize features by removing the mean and scaling to unit variance\\n\\n    The standard score of a sample `x` is calculated as:\\n\\n        z = (x - u) / s\\n\\n    where `u` is the mean of the training samples or zero if `with_mean=False`,\\n    and `s` is the standard deviation of the training samples or one if\\n    `with_std=False`.\\n\\n    Centering and scaling happen independently on each feature by computing\\n    the relevant statistics on the samples in the training set. Mean and\\n    standard deviation are then stored to be used on later data using the\\n    `transform` method.\\n\\n    Standardization of a dataset is a common requirement for many\\n    machine learning estimators: they might behave badly if the\\n    individual features do not more or less look like standard normally\\n    distributed data (e.g. Gaussian with 0 mean and unit variance).\\n\\n    For instance many elements used in the objective function of\\n    a learning algorithm (such as the RBF kernel of Support Vector\\n    Machines or the L1 and L2 regularizers of linear models) assume that\\n    all features are centered around 0 and have variance in the same\\n    order. If a feature has a variance that is orders of magnitude larger\\n    that others, it might dominate the objective function and make the\\n    estimator unable to learn from other features correctly as expected.\\n\\n    This scaler can also be applied to sparse CSR or CSC matrices by passing\\n    `with_mean=False` to avoid breaking the sparsity structure of the data.',\n      inputs: [\n        {\n          name: 'copy',\n          docstring:\n            'If False, try to avoid a copy and do inplace scaling instead. This is not guaranteed to always work inplace; e.g. if the data is not a NumPy array or scipy.sparse CSR matrix, a copy may still be returned.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'with_mean',\n          docstring:\n            'If True, center the data before scaling. This does not work (and will raise an exception) when attempted on sparse matrices, because centering them entails building a dense matrix which in common use cases is likely to be too large to fit in memory.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'with_std',\n          docstring:\n            'If True, scale the data to unit variance (or equivalently, unit standard deviation).',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'scale_',\n          docstring:\n            'Per feature relative scaling of the data. This is calculated using `np.sqrt(var_)`. Equal to ``None`` when ``with_std=False``.  .. versionadded:: 0.17    *scale_*',\n          param_type: ['array', null],\n          returned: false\n        },\n        {\n          name: 'mean_',\n          docstring:\n            'The mean value for each feature in the training set. Equal to ``None`` when ``with_mean=False``.',\n          param_type: ['array', null],\n          returned: false\n        },\n        {\n          name: 'var_',\n          docstring:\n            'The variance for each feature in the training set. Used to compute `scale_`. Equal to ``None`` when ``with_std=False``.',\n          param_type: ['array', null],\n          returned: false\n        },\n        {\n          name: 'n_samples_seen_',\n          docstring:\n            'The number of samples processed by the estimator for each feature. If there are not missing samples, the ``n_samples_seen`` will be an integer, otherwise it will be an array. Will be reset on new calls to fit, but increments across ``partial_fit`` calls.',\n          param_type: ['array', 'int'],\n          returned: false\n        }\n      ],\n      node_functions: [\n        {\n          name: '__init__',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_param_names',\n          docstring: 'Get parameter names for the estimator',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_tags',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_more_tags',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_reset',\n          docstring:\n            'Reset internal data-dependent state of the scaler, if necessary.\\n\\n        __init__ parameters are not touched.\\n        ',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'fit',\n          docstring: 'Compute the mean and std to be used for later scaling.',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'The data used to compute the mean and standard deviation used for later scaling along the features axis.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'y',\n              docstring: 'Ignored',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'fit_transform',\n          docstring:\n            'Fit to data, then transform it.\\n\\n        Fits transformer to X and y with optional parameters fit_params\\n        and returns a transformed version of X.',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'Training set.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'y',\n              docstring: 'Target values.',\n              param_type: ['array'],\n              expected_shape: '[n_samples]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'X_new',\n              docstring: 'Transformed array.',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'inverse_transform',\n          docstring: 'Scale back the data to the original representation',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'The data used to scale along the features axis.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'copy',\n              docstring: 'Copy the input X or not.',\n              param_type: ['bool', null],\n              expected_shape: null,\n              is_optional: true,\n              default_value: 'None',\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'X_tr',\n              docstring: 'Transformed array.',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'partial_fit',\n          docstring:\n            'Online computation of mean and std on X for later scaling.\\n        All of X is processed as a single batch. This is intended for cases\\n        when `fit` is not feasible due to very large number of `n_samples`\\n        or because X is read from a continuous stream.',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'The data used to compute the mean and standard deviation used for later scaling along the features axis.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'y',\n              docstring: 'Ignored',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'transform',\n          docstring: 'Perform standardization by centering and scaling',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'The data used to scale along the features axis.',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'copy',\n              docstring: 'Copy the input X or not.',\n              param_type: ['bool', null],\n              expected_shape: null,\n              is_optional: true,\n              default_value: 'None',\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        }\n      ],\n      nodes: []\n    }\n  ],\n  library: 'sklearn',\n  module: 'preprocessing'\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/jsons/sklearnPreprocessing.js","export default {\n  name: 'sklearn.svm',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [\n    {\n      name: 'l1_min_c',\n      docstring:\n        \"\\n    Return the lowest bound for C such that for C in (l1_min_C, infinity)\\n    the model is guaranteed not to be empty. This applies to l1 penalized\\n    classifiers, such as LinearSVC with penalty='l1' and\\n    linear_model.LogisticRegression with penalty='l1'.\\n\\n    This value is valid if class_weight parameter in fit() is not set.\\n\\n    Parameters\\n    ----------\\n    X : array-like or sparse matrix, shape = [n_samples, n_features]\\n        Training vector, where n_samples in the number of samples and\\n        n_features is the number of features.\\n\\n    y : array, shape = [n_samples]\\n        Target vector relative to X\\n\\n    loss : {'squared_hinge', 'log'}, default 'squared_hinge'\\n        Specifies the loss function.\\n        With 'squared_hinge' it is the squared hinge loss (a.k.a. L2 loss).\\n        With 'log' it is the loss of logistic regression models.\\n\\n    fit_intercept : bool, default: True\\n        Specifies if the intercept should be fitted by the model.\\n        It must match the fit() method parameter.\\n\\n    intercept_scaling : float, default: 1\\n        when fit_intercept is True, instance vector x becomes\\n        [x, intercept_scaling],\\n        i.e. a \\\"synthetic\\\" feature with constant value equals to\\n        intercept_scaling is appended to the instance vector.\\n        It must match the fit() method parameter.\\n\\n    Returns\\n    -------\\n    l1_min_c : float\\n        minimum value for C\\n    \",\n      inputs: [\n        {\n          name: 'X',\n          docstring:\n            'Training vector, where n_samples in the number of samples and n_features is the number of features.',\n          param_type: ['array'],\n          expected_shape: '[n_samples, n_features]',\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'y',\n          docstring: 'Target vector relative to X',\n          param_type: ['array'],\n          expected_shape: '[n_samples]',\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'loss',\n          docstring:\n            \"Specifies the loss function. With 'squared_hinge' it is the squared hinge loss (a.k.a. L2 loss). With 'log' it is the loss of logistic regression models.\",\n          param_type: ['LIST_VALID_OPTIONS'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'squared_hinge',\n          options: ['squared_hinge', 'log', 'default squared_hinge']\n        },\n        {\n          name: 'fit_intercept',\n          docstring:\n            'Specifies if the intercept should be fitted by the model. It must match the fit() method parameter.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'intercept_scaling',\n          docstring:\n            'when fit_intercept is True, instance vector x becomes [x, intercept_scaling], i.e. a \"synthetic\" feature with constant value equals to intercept_scaling is appended to the instance vector. It must match the fit() method parameter.',\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '1',\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'l1_min_c',\n          docstring: 'minimum value for C',\n          param_type: ['float'],\n          returned: true\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ]\n    }\n  ],\n  nodes: [\n    {\n      name: 'OneClassSVM',\n      docstring:\n        'Unsupervised Outlier Detection.\\n\\n    Estimate the support of a high-dimensional distribution',\n      inputs: [\n        {\n          name: 'kernel',\n          docstring:\n            \"Specifies the kernel type to be used in the algorithm. It must be one of 'linear', 'poly', 'rbf', 'sigmoid', 'precomputed' or a callable. If none is given, 'rbf' will be used. If a callable is given it is used to precompute the kernel matrix.\",\n          param_type: ['LIST_VALID_OPTIONS'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'rbf',\n          options: ['linear', 'poly', 'rbf', 'sigmoid', 'precomputed']\n        },\n        {\n          name: 'degree',\n          docstring:\n            \"Degree of the polynomial kernel function ('poly'). Ignored by all other kernels.\",\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '3',\n          options: null\n        },\n        {\n          name: 'gamma',\n          docstring:\n            \"Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.  Current default is 'auto' which uses 1 / n_features, if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.var()) as value of gamma.\",\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'auto',\n          options: null\n        },\n        {\n          name: 'coef0',\n          docstring:\n            \"Independent term in kernel function. It is only significant in 'poly' and 'sigmoid'.\",\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '0.0',\n          options: null\n        },\n        {\n          name: 'tol',\n          docstring: 'Tolerance for stopping criterion.',\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'nu',\n          docstring:\n            'An upper bound on the fraction of training errors and a lower bound of the fraction of support vectors. Should be in the interval (0, 1]. By default 0.5 will be taken.',\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '0.5',\n          options: null\n        },\n        {\n          name: 'shrinking',\n          docstring: 'Whether to use the shrinking heuristic.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'cache_size',\n          docstring: 'Specify the size of the kernel cache (in MB).',\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'verbose',\n          docstring:\n            'Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'False',\n          options: null\n        },\n        {\n          name: 'max_iter',\n          docstring:\n            'Hard limit on iterations within solver, or -1 for no limit.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '-1',\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'support_',\n          docstring: 'Indices of support vectors.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'support_vectors_',\n          docstring: 'Support vectors.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'dual_coef_',\n          docstring:\n            'Coefficients of the support vectors in the decision function.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'coef_',\n          docstring:\n            'Weights assigned to the features (coefficients in the primal problem). This is only available in the case of a linear kernel.  `coef_` is readonly property derived from `dual_coef_` and `support_vectors_`',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'intercept_',\n          docstring: 'Constant in the decision function.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'offset_',\n          docstring:\n            'Offset used to define the decision function from the raw scores. We have the relation: decision_function = score_samples - `offset_`. The offset is the opposite of `intercept_` and is provided for consistency with other outlier detection algorithms.',\n          param_type: ['float'],\n          returned: false\n        }\n      ],\n      node_functions: [\n        {\n          name: '__init__',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_compute_kernel',\n          docstring: 'Return the data transformed by a callable kernel',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_decision_function',\n          docstring:\n            'Evaluates the decision function for the samples in X.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n\\n        Returns\\n        -------\\n        X : array-like, shape (n_samples, n_class * (n_class-1) / 2)\\n            Returns the decision function of the sample for each class\\n            in the model.\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring: '',\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'X',\n              docstring:\n                'Returns the decision function of the sample for each class in the model.',\n              param_type: ['array'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: '_dense_decision_function',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_dense_fit',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_dense_predict',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_coef',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_param_names',\n          docstring: 'Get parameter names for the estimator',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_tags',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_sparse_decision_function',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_sparse_fit',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_sparse_predict',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_validate_for_predict',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_validate_targets',\n          docstring:\n            'Validation of y and class_weight.\\n\\n        Default implementation for SVR and one-class; overridden in BaseSVC.\\n        ',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_warn_from_fit_status',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'decision_function',\n          docstring:\n            'Signed distance to the separating hyperplane.\\n\\n        Signed distance is positive for an inlier and negative for an outlier.',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'Data.',\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'dec',\n              docstring: 'Returns the decision function of the samples.',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'fit',\n          docstring:\n            '\\n        Detects the soft boundary of the set of samples X.',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Set of samples, where n_samples is the number of samples and n_features is the number of features.',\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'sample_weight',\n              docstring:\n                'Per-sample weights. Rescale C per sample. Higher weights force the classifier to put more emphasis on these points.',\n              param_type: ['array'],\n              expected_shape: '(n_samples,)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'y',\n              docstring: 'not used, present for API consistency by convention.',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: true,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'fit_predict',\n          docstring:\n            'Performs fit on X and returns labels for X.\\n\\n        Returns -1 for outliers and 1 for inliers.',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'Input data.',\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'y',\n              docstring: 'not used, present for API consistency by convention.',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'y',\n              docstring: '1 for inliers, -1 for outliers.',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'predict',\n          docstring:\n            '\\n        Perform classification on samples in X.\\n\\n        For a one-class model, +1 or -1 is returned.',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'For kernel=\"precomputed\", the expected shape of X is [n_samples_test, n_samples_train]',\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'y_pred',\n              docstring: 'Class labels for samples in X.',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'score_samples',\n          docstring: 'Raw scoring function of the samples.',\n          inputs: [\n            {\n              name: 'X',\n              docstring: '',\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'score_samples',\n              docstring:\n                'Returns the (unshifted) scoring function of the samples.',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'SVC',\n      docstring:\n        'C-Support Vector Classification.\\n\\n    The implementation is based on libsvm. The fit time scales at least\\n    quadratically with the number of samples and may be impractical\\n    beyond tens of thousands of samples.\\n\\n    The multiclass support is handled according to a one-vs-one scheme.\\n\\n    For details on the precise mathematical formulation of the provided\\n    kernel functions and how `gamma`, `coef0` and `degree` affect each\\n    other, see the corresponding section in the narrative documentation:\\n    :ref:`svm_kernels`.',\n      inputs: [\n        {\n          name: 'C',\n          docstring: 'Penalty parameter C of the error term.',\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '1.0',\n          options: null\n        },\n        {\n          name: 'kernel',\n          docstring:\n            \"Specifies the kernel type to be used in the algorithm. It must be one of 'linear', 'poly', 'rbf', 'sigmoid', 'precomputed' or a callable. If none is given, 'rbf' will be used. If a callable is given it is used to pre-compute the kernel matrix from data matrices; that matrix should be an array of shape ``(n_samples, n_samples)``.\",\n          param_type: ['LIST_VALID_OPTIONS'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'rbf',\n          options: ['linear', 'poly', 'rbf', 'sigmoid', 'precomputed']\n        },\n        {\n          name: 'degree',\n          docstring:\n            \"Degree of the polynomial kernel function ('poly'). Ignored by all other kernels.\",\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '3',\n          options: null\n        },\n        {\n          name: 'gamma',\n          docstring:\n            \"Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.  Current default is 'auto' which uses 1 / n_features, if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.var()) as value of gamma.\",\n          param_type: ['float', 'str'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'auto',\n          options: null\n        },\n        {\n          name: 'coef0',\n          docstring:\n            \"Independent term in kernel function. It is only significant in 'poly' and 'sigmoid'.\",\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '0.0',\n          options: null\n        },\n        {\n          name: 'shrinking',\n          docstring: 'Whether to use the shrinking heuristic.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'probability',\n          docstring:\n            'Whether to enable probability estimates. This must be enabled prior to calling `fit`, and will slow down that method.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'False',\n          options: null\n        },\n        {\n          name: 'tol',\n          docstring: 'Tolerance for stopping criterion.',\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '1e-3',\n          options: null\n        },\n        {\n          name: 'class_weight',\n          docstring:\n            'Set the parameter C of class i to class_weight[i]*C for SVC. If not given, all classes are supposed to have weight one. The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``',\n          param_type: ['str', 'dict'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'verbose',\n          docstring:\n            'Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'False',\n          options: null\n        },\n        {\n          name: 'max_iter',\n          docstring:\n            'Hard limit on iterations within solver, or -1 for no limit.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '-1',\n          options: null\n        },\n        {\n          name: 'decision_function_shape',\n          docstring:\n            \"Whether to return a one-vs-rest ('ovr') decision function of shape (n_samples, n_classes) as all other classifiers, or the original one-vs-one ('ovo') decision function of libsvm which has shape (n_samples, n_classes * (n_classes - 1) / 2). However, one-vs-one ('ovo') is always used as multi-class strategy.\",\n          param_type: ['LIST_VALID_OPTIONS'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'ovr',\n          options: ['ovr', 'ovo']\n        }\n      ],\n      outputs: [\n        {\n          name: 'support_',\n          docstring: 'Indices of support vectors.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'support_vectors_',\n          docstring: 'Support vectors.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'n_support_',\n          docstring: 'Number of support vectors for each class.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'dual_coef_',\n          docstring:\n            'Coefficients of the support vector in the decision function. For multiclass, coefficient for all 1-vs-1 classifiers. The layout of the coefficients in the multiclass case is somewhat non-trivial.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'coef_',\n          docstring:\n            'Weights assigned to the features (coefficients in the primal problem). This is only available in the case of a linear kernel.  `coef_` is a readonly property derived from `dual_coef_` and `support_vectors_`.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'intercept_',\n          docstring: 'Constants in decision function.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'fit_status_',\n          docstring: '0 if correctly fitted, 1 otherwise (will raise warning)',\n          param_type: ['int'],\n          returned: false\n        },\n        {\n          name: 'probA_',\n          docstring: '',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'probB_',\n          docstring:\n            'If probability=True, the parameters learned in Platt scaling to produce probability estimates from decision values. If probability=False, an empty array. Platt scaling uses the logistic function ``1 / (1 + exp(decision_value * probA_ + probB_))`` where ``probA_`` and ``probB_`` are learned from the dataset.',\n          param_type: ['array'],\n          returned: false\n        }\n      ],\n      node_functions: [\n        {\n          name: '__init__',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_check_proba',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_compute_kernel',\n          docstring: 'Return the data transformed by a callable kernel',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_decision_function',\n          docstring:\n            'Evaluates the decision function for the samples in X.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n\\n        Returns\\n        -------\\n        X : array-like, shape (n_samples, n_class * (n_class-1) / 2)\\n            Returns the decision function of the sample for each class\\n            in the model.\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring: '',\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'X',\n              docstring:\n                'Returns the decision function of the sample for each class in the model.',\n              param_type: ['array'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: '_dense_decision_function',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_dense_fit',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_dense_predict',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_dense_predict_proba',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_coef',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_param_names',\n          docstring: 'Get parameter names for the estimator',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_tags',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_predict_log_proba',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_predict_proba',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_sparse_decision_function',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_sparse_fit',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_sparse_predict',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_sparse_predict_proba',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_validate_for_predict',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_validate_targets',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_warn_from_fit_status',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'decision_function',\n          docstring:\n            \"Evaluates the decision function for the samples in X.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n\\n        Returns\\n        -------\\n        X : array-like, shape (n_samples, n_classes * (n_classes-1) / 2)\\n            Returns the decision function of the sample for each class\\n            in the model.\\n            If decision_function_shape='ovr', the shape is (n_samples,\\n            n_classes).\\n\\n        Notes\\n        -----\\n        If decision_function_shape='ovo', the function values are proportional\\n        to the distance of the samples X to the separating hyperplane. If the\\n        exact distances are required, divide the function values by the norm of\\n        the weight vector (``coef_``). See also `this question\\n        <https://stats.stackexchange.com/questions/14876/\\n        interpreting-distance-from-hyperplane-in-svm>`_ for further details.\\n        If decision_function_shape='ovr', the decision function is a monotonic\\n        transformation of ovo decision function.\\n        \",\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'Data.',\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'X',\n              docstring:\n                \"Returns the decision function of the sample for each class in the model. If decision_function_shape='ovr', the shape is (n_samples, n_classes), (n_samples, n_classes * (n_classes-1) / 2) otherwise\",\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'fit',\n          docstring: 'Fit the SVM model according to the given training data.',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Training vectors, where n_samples is the number of samples and n_features is the number of features. For kernel=\"precomputed\", the expected shape of X is (n_samples, n_samples).',\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'y',\n              docstring:\n                'Target values (class labels in classification, real numbers in regression)',\n              param_type: ['array'],\n              expected_shape: '(n_samples,)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'sample_weight',\n              docstring:\n                'Per-sample weights. Rescale C per sample. Higher weights force the classifier to put more emphasis on these points.',\n              param_type: ['array'],\n              expected_shape: '(n_samples,)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'predict',\n          docstring:\n            'Perform classification on samples in X.\\n\\n        For an one-class model, +1 or -1 is returned.',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'For kernel=\"precomputed\", the expected shape of X is [n_samples_test, n_samples_train]',\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'y_pred',\n              docstring: 'Class labels for samples in X.',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'score',\n          docstring:\n            'Returns the mean accuracy on the given test data and labels.\\n\\n        In multi-label classification, this is the subset accuracy\\n        which is a harsh metric since you require for each sample that\\n        each label set be correctly predicted.',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'Test samples.',\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'y',\n              docstring: 'True labels for X.',\n              param_type: ['array'],\n              expected_shape: '(n_samples) or (n_samples, n_outputs)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'sample_weight',\n              docstring: 'Sample weights.',\n              param_type: ['array'],\n              expected_shape: '[n_samples], optional',\n              is_optional: true,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'score',\n              docstring: 'Mean accuracy of self.predict(X) wrt. y.',\n              param_type: ['float'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'SVR',\n      docstring:\n        'Epsilon-Support Vector Regression.\\n\\n    The free parameters in the model are C and epsilon.\\n\\n    The implementation is based on libsvm. The fit time complexity\\n    is more than quadratic with the number of samples which makes it hard\\n    to scale to datasets with more than a couple of 10000 samples. ',\n      inputs: [\n        {\n          name: 'kernel',\n          docstring:\n            \"Specifies the kernel type to be used in the algorithm. It must be one of 'linear', 'poly', 'rbf', 'sigmoid', 'precomputed' or a callable. If none is given, 'rbf' will be used. If a callable is given it is used to precompute the kernel matrix.\",\n          param_type: ['LIST_VALID_OPTIONS'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'rbf',\n          options: ['linear', 'poly', 'rbf', 'sigmoid', 'precomputed']\n        },\n        {\n          name: 'degree',\n          docstring:\n            \"Degree of the polynomial kernel function ('poly'). Ignored by all other kernels.\",\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '3',\n          options: null\n        },\n        {\n          name: 'gamma',\n          docstring:\n            \"Kernel coefficient for 'rbf', 'poly' and 'sigmoid'.  Current default is 'auto' which uses 1 / n_features, if ``gamma='scale'`` is passed then it uses 1 / (n_features * X.var()) as value of gamma. \",\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'auto',\n          options: null\n        },\n        {\n          name: 'coef0',\n          docstring:\n            \"Independent term in kernel function. It is only significant in 'poly' and 'sigmoid'.\",\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '0.0',\n          options: null\n        },\n        {\n          name: 'tol',\n          docstring: 'Tolerance for stopping criterion.',\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '1e-3',\n          options: null\n        },\n        {\n          name: 'C',\n          docstring: 'Penalty parameter C of the error term.',\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '1.0',\n          options: null\n        },\n        {\n          name: 'epsilon',\n          docstring:\n            'Epsilon in the epsilon-SVR model. It specifies the epsilon-tube within which no penalty is associated in the training loss function with points predicted within a distance epsilon from the actual value.',\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '0.1',\n          options: null\n        },\n        {\n          name: 'shrinking',\n          docstring: 'Whether to use the shrinking heuristic.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'cache_size',\n          docstring: 'Specify the size of the kernel cache (in MB).',\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'verbose',\n          docstring:\n            'Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'False',\n          options: null\n        },\n        {\n          name: 'max_iter',\n          docstring:\n            'Hard limit on iterations within solver, or -1 for no limit.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '-1',\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'support_',\n          docstring: 'Indices of support vectors.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'support_vectors_',\n          docstring: 'Support vectors.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'dual_coef_',\n          docstring:\n            'Coefficients of the support vector in the decision function.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'coef_',\n          docstring:\n            'Weights assigned to the features (coefficients in the primal problem). This is only available in the case of a linear kernel.  `coef_` is readonly property derived from `dual_coef_` and `support_vectors_`.',\n          param_type: ['array'],\n          returned: false\n        },\n        {\n          name: 'intercept_',\n          docstring: 'Constants in decision function.',\n          param_type: ['array'],\n          returned: false\n        }\n      ],\n      node_functions: [\n        {\n          name: '__init__',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_compute_kernel',\n          docstring: 'Return the data transformed by a callable kernel',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_decision_function',\n          docstring:\n            'Evaluates the decision function for the samples in X.\\n\\n        Parameters\\n        ----------\\n        X : array-like, shape (n_samples, n_features)\\n\\n        Returns\\n        -------\\n        X : array-like, shape (n_samples, n_class * (n_class-1) / 2)\\n            Returns the decision function of the sample for each class\\n            in the model.\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring: '',\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'X',\n              docstring:\n                'Returns the decision function of the sample for each class in the model.',\n              param_type: ['array'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: '_dense_decision_function',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_dense_fit',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_dense_predict',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_coef',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_param_names',\n          docstring: 'Get parameter names for the estimator',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_get_tags',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_sparse_decision_function',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_sparse_fit',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_sparse_predict',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_validate_for_predict',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_validate_targets',\n          docstring:\n            'Validation of y and class_weight.\\n\\n        Default implementation for SVR and one-class; overridden in BaseSVC.\\n        ',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_warn_from_fit_status',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'fit',\n          docstring: 'Fit the SVM model according to the given training data.',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Training vectors, where n_samples is the number of samples and n_features is the number of features. For kernel=\"precomputed\", the expected shape of X is (n_samples, n_samples).',\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'y',\n              docstring:\n                'Target values (class labels in classification, real numbers in regression)',\n              param_type: ['array'],\n              expected_shape: '(n_samples,)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'sample_weight',\n              docstring:\n                'Per-sample weights. Rescale C per sample. Higher weights force the classifier to put more emphasis on these points.',\n              param_type: ['array'],\n              expected_shape: '(n_samples,)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'predict',\n          docstring:\n            'Perform regression on samples in X.\\n\\n        For an one-class model, +1 (inlier) or -1 (outlier) is returned.',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'For kernel=\"precomputed\", the expected shape of X is (n_samples_test, n_samples_train).',\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'y_pred',\n              docstring: '',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'score',\n          docstring:\n            'Returns the coefficient of determination R^2 of the prediction.\\n\\n        The coefficient R^2 is defined as (1 - u/v), where u is the residual\\n        sum of squares ((y_true - y_pred) ** 2).sum() and v is the total\\n        sum of squares ((y_true - y_true.mean()) ** 2).sum().\\n        The best possible score is 1.0 and it can be negative (because the\\n        model can be arbitrarily worse). A constant model that always\\n        predicts the expected value of y, disregarding the input features,\\n        would get a R^2 score of 0.0.',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'Test samples. For some estimators this may be a precomputed kernel matrix instead, shape = (n_samples, n_samples_fitted), where n_samples_fitted is the number of samples used in the fitting for the estimator.',\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'y',\n              docstring: 'True values for X.',\n              param_type: ['array'],\n              expected_shape: '(n_samples) or (n_samples, n_outputs)',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'sample_weight',\n              docstring: 'Sample weights.',\n              param_type: ['array'],\n              expected_shape: '[n_samples], optional',\n              is_optional: true,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'score',\n              docstring: 'R^2 of self.predict(X) wrt. y.',\n              param_type: ['float'],\n              returned: true\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ]\n        }\n      ],\n      nodes: []\n    }\n  ],\n  library: 'sklearn',\n  module: 'svm'\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/jsons/sklearnSvm.js","export default {\n  name: 'sklearn.linear_model',\n  outputs: [],\n  docstring: '',\n  inputs: [],\n  module: 'linear_model',\n  node_functions: [\n    {\n      name: 'enet_path',\n      outputs: [\n        {\n          name: 'alphas',\n          returned: true,\n          param_type: ['array'],\n          docstring: 'The alphas along the path where models are computed.'\n        },\n        {\n          name: 'coefs',\n          returned: true,\n          param_type: ['array'],\n          docstring: 'Coefficients along the path.'\n        },\n        {\n          name: 'dual_gaps',\n          returned: true,\n          param_type: ['array'],\n          docstring:\n            'The dual gaps at the end of the optimization for each alpha.'\n        },\n        {\n          name: 'n_iters',\n          returned: true,\n          param_type: ['array'],\n          docstring:\n            'The number of iterations taken by the coordinate descent optimizer to reach the specified tolerance for each alpha. (Is returned when ``return_n_iter`` is set to True).'\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ],\n      docstring:\n        \"Compute elastic net path with coordinate descent\\n\\n    The elastic net optimization function varies for mono and multi-outputs.\\n\\n    For mono-output tasks it is::\\n\\n        1 / (2 * n_samples) * ||y - Xw||^2_2\\n        + alpha * l1_ratio * ||w||_1\\n        + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\\n\\n    For multi-output tasks it is::\\n\\n        (1 / (2 * n_samples)) * ||Y - XW||^Fro_2\\n        + alpha * l1_ratio * ||W||_21\\n        + 0.5 * alpha * (1 - l1_ratio) * ||W||_Fro^2\\n\\n    Where::\\n\\n        ||W||_21 = \\\\sum_i \\\\sqrt{\\\\sum_j w_{ij}^2}\\n\\n    i.e. the sum of norm of each row.\\n\\n    Read more in the :ref:`User Guide <elastic_net>`.\\n\\n    Parameters\\n    ----------\\n    X : {array-like}, shape (n_samples, n_features)\\n        Training data. Pass directly as Fortran-contiguous data to avoid\\n        unnecessary memory duplication. If ``y`` is mono-output then ``X``\\n        can be sparse.\\n\\n    y : ndarray, shape (n_samples,) or (n_samples, n_outputs)\\n        Target values\\n\\n    l1_ratio : float, optional\\n        float between 0 and 1 passed to elastic net (scaling between\\n        l1 and l2 penalties). ``l1_ratio=1`` corresponds to the Lasso\\n\\n    eps : float\\n        Length of the path. ``eps=1e-3`` means that\\n        ``alpha_min / alpha_max = 1e-3``\\n\\n    n_alphas : int, optional\\n        Number of alphas along the regularization path\\n\\n    alphas : ndarray, optional\\n        List of alphas where to compute the models.\\n        If None alphas are set automatically\\n\\n    precompute : True | False | 'auto' | array-like\\n        Whether to use a precomputed Gram matrix to speed up\\n        calculations. If set to ``'auto'`` let us decide. The Gram\\n        matrix can also be passed as argument.\\n\\n    Xy : array-like, optional\\n        Xy = np.dot(X.T, y) that can be precomputed. It is useful\\n        only when the Gram matrix is precomputed.\\n\\n    copy_X : boolean, optional, default True\\n        If ``True``, X will be copied; else, it may be overwritten.\\n\\n    coef_init : array, shape (n_features, ) | None\\n        The initial values of the coefficients.\\n\\n    verbose : bool or integer\\n        Amount of verbosity.\\n\\n    return_n_iter : bool\\n        whether to return the number of iterations or not.\\n\\n    positive : bool, default False\\n        If set to True, forces coefficients to be positive.\\n        (Only allowed when ``y.ndim == 1``).\\n\\n    check_input : bool, default True\\n        Skip input validation checks, including the Gram matrix when provided\\n        assuming there are handled by the caller when check_input=False.\\n\\n    **params : kwargs\\n        keyword arguments passed to the coordinate descent solver.\\n\\n    Returns\\n    -------\\n    alphas : array, shape (n_alphas,)\\n        The alphas along the path where models are computed.\\n\\n    coefs : array, shape (n_features, n_alphas) or             (n_outputs, n_features, n_alphas)\\n        Coefficients along the path.\\n\\n    dual_gaps : array, shape (n_alphas,)\\n        The dual gaps at the end of the optimization for each alpha.\\n\\n    n_iters : array-like, shape (n_alphas,)\\n        The number of iterations taken by the coordinate descent optimizer to\\n        reach the specified tolerance for each alpha.\\n        (Is returned when ``return_n_iter`` is set to True).\\n\\n    Notes\\n    -----\\n    For an example, see\\n    :ref:`examples/linear_model/plot_lasso_coordinate_descent_path.py\\n    <sphx_glr_auto_examples_linear_model_plot_lasso_coordinate_descent_path.py>`.\\n\\n    See also\\n    --------\\n    MultiTaskElasticNet\\n    MultiTaskElasticNetCV\\n    ElasticNet\\n    ElasticNetCV\\n    \",\n      inputs: [\n        {\n          name: 'X',\n          default_value: null,\n          param_type: ['LIST_VALID_OPTIONS', 'array'],\n          expected_shape: '(n_samples, n_features)',\n          docstring:\n            'Training data. Pass directly as Fortran-contiguous data to avoid unnecessary memory duplication. If ``y`` is mono-output then ``X`` can be sparse.',\n          is_optional: false,\n          options: ['array-like}', ' shape (n_samples', ' n_features)']\n        },\n        {\n          name: 'y',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: '(n_samples,) or (n_samples, n_outputs)',\n          docstring: 'Target values',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'l1_ratio',\n          default_value: null,\n          param_type: ['float'],\n          expected_shape: null,\n          docstring:\n            'float between 0 and 1 passed to elastic net (scaling between l1 and l2 penalties). ``l1_ratio=1`` corresponds to the Lasso',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'eps',\n          default_value: null,\n          param_type: ['float'],\n          expected_shape: null,\n          docstring:\n            'Length of the path. ``eps=1e-3`` means that ``alpha_min / alpha_max = 1e-3``',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'n_alphas',\n          default_value: null,\n          param_type: ['int'],\n          expected_shape: null,\n          docstring: 'Number of alphas along the regularization path',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'alphas',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: null,\n          docstring:\n            'List of alphas where to compute the models. If None alphas are set automatically',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'precompute',\n          default_value: null,\n          param_type: ['LIST_VALID_OPTIONS', 'array'],\n          expected_shape: null,\n          docstring:\n            \"Whether to use a precomputed Gram matrix to speed up calculations. If set to ``'auto'`` let us decide. The Gram matrix can also be passed as argument.\",\n          is_optional: false,\n          options: ['True ', ' False ', \" 'auto' \", ' array-like']\n        },\n        {\n          name: 'Xy',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: null,\n          docstring:\n            'Xy = np.dot(X.T, y) that can be precomputed. It is useful only when the Gram matrix is precomputed.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'copy_X',\n          default_value: 'True',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'If ``True``, X will be copied; else, it may be overwritten.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'coef_init',\n          default_value: null,\n          param_type: ['LIST_VALID_OPTIONS', 'array', null],\n          expected_shape: '(n_features, ) | None',\n          docstring: 'The initial values of the coefficients.',\n          is_optional: false,\n          options: ['array, shape (n_features, ) ', ' None']\n        },\n        {\n          name: 'verbose',\n          default_value: null,\n          param_type: ['int', 'bool'],\n          expected_shape: null,\n          docstring: 'Amount of verbosity.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'return_n_iter',\n          default_value: null,\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring: 'whether to return the number of iterations or not.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'positive',\n          default_value: 'False',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'If set to True, forces coefficients to be positive. (Only allowed when ``y.ndim == 1``).',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'check_input',\n          default_value: 'True',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'Skip input validation checks, including the Gram matrix when provided assuming there are handled by the caller when check_input=False.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: '**params',\n          default_value: null,\n          param_type: [null],\n          expected_shape: null,\n          docstring:\n            'keyword arguments passed to the coordinate descent solver.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ]\n    },\n    {\n      name: 'lars_path',\n      outputs: [\n        {\n          name: 'alphas',\n          returned: true,\n          param_type: ['array'],\n          docstring:\n            'Maximum of covariances (in absolute value) at each iteration. ``n_alphas`` is either ``max_iter``, ``n_features`` or the number of nodes in the path with ``alpha >= alpha_min``, whichever is smaller.'\n        },\n        {\n          name: 'active',\n          returned: true,\n          param_type: ['array'],\n          docstring: 'Indices of active variables at the end of the path.'\n        },\n        {\n          name: 'coefs',\n          returned: true,\n          param_type: ['array'],\n          docstring: 'Coefficients along the path'\n        },\n        {\n          name: 'n_iter',\n          returned: true,\n          param_type: ['int'],\n          docstring:\n            'Number of iterations run. Returned only if return_n_iter is set to True.'\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ],\n      docstring:\n        \"Compute Least Angle Regression or Lasso path using LARS algorithm [1]\\n\\n    The optimization objective for the case method='lasso' is::\\n\\n    (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\\n\\n    in the case of method='lars', the objective function is only known in\\n    the form of an implicit equation (see discussion in [1])\\n\\n    Read more in the :ref:`User Guide <least_angle_regression>`.\\n\\n    Parameters\\n    -----------\\n    X : array, shape: (n_samples, n_features)\\n        Input data.\\n\\n    y : array, shape: (n_samples)\\n        Input targets.\\n\\n    Xy : array-like, shape (n_samples,) or (n_samples, n_targets),             optional\\n        Xy = np.dot(X.T, y) that can be precomputed. It is useful\\n        only when the Gram matrix is precomputed.\\n\\n    Gram : None, 'auto', array, shape: (n_features, n_features), optional\\n        Precomputed Gram matrix (X' * X), if ``'auto'``, the Gram\\n        matrix is precomputed from the given X, if there are more samples\\n        than features.\\n\\n    max_iter : integer, optional (default=500)\\n        Maximum number of iterations to perform, set to infinity for no limit.\\n\\n    alpha_min : float, optional (default=0)\\n        Minimum correlation along the path. It corresponds to the\\n        regularization parameter alpha parameter in the Lasso.\\n\\n    method : {'lar', 'lasso'}, optional (default='lar')\\n        Specifies the returned model. Select ``'lar'`` for Least Angle\\n        Regression, ``'lasso'`` for the Lasso.\\n\\n    copy_X : bool, optional (default=True)\\n        If ``False``, ``X`` is overwritten.\\n\\n    eps : float, optional (default=``np.finfo(np.float).eps``)\\n        The machine-precision regularization in the computation of the\\n        Cholesky diagonal factors. Increase this for very ill-conditioned\\n        systems.\\n\\n    copy_Gram : bool, optional (default=True)\\n        If ``False``, ``Gram`` is overwritten.\\n\\n    verbose : int (default=0)\\n        Controls output verbosity.\\n\\n    return_path : bool, optional (default=True)\\n        If ``return_path==True`` returns the entire path, else returns only the\\n        last point of the path.\\n\\n    return_n_iter : bool, optional (default=False)\\n        Whether to return the number of iterations.\\n\\n    positive : boolean (default=False)\\n        Restrict coefficients to be >= 0.\\n        This option is only allowed with method 'lasso'. Note that the model\\n        coefficients will not converge to the ordinary-least-squares solution\\n        for small values of alpha. Only coefficients up to the smallest alpha\\n        value (``alphas_[alphas_ > 0.].min()`` when fit_path=True) reached by\\n        the stepwise Lars-Lasso algorithm are typically in congruence with the\\n        solution of the coordinate descent lasso_path function.\\n\\n    Returns\\n    --------\\n    alphas : array, shape: [n_alphas + 1]\\n        Maximum of covariances (in absolute value) at each iteration.\\n        ``n_alphas`` is either ``max_iter``, ``n_features`` or the\\n        number of nodes in the path with ``alpha >= alpha_min``, whichever\\n        is smaller.\\n\\n    active : array, shape [n_alphas]\\n        Indices of active variables at the end of the path.\\n\\n    coefs : array, shape (n_features, n_alphas + 1)\\n        Coefficients along the path\\n\\n    n_iter : int\\n        Number of iterations run. Returned only if return_n_iter is set\\n        to True.\\n\\n    See also\\n    --------\\n    lasso_path\\n    LassoLars\\n    Lars\\n    LassoLarsCV\\n    LarsCV\\n    sklearn.decomposition.sparse_encode\\n\\n    References\\n    ----------\\n    .. [1] \\\"Least Angle Regression\\\", Effron et al.\\n           http://statweb.stanford.edu/~tibs/ftp/lars.pdf\\n\\n    .. [2] `Wikipedia entry on the Least-angle regression\\n           <https://en.wikipedia.org/wiki/Least-angle_regression>`_\\n\\n    .. [3] `Wikipedia entry on the Lasso\\n           <https://en.wikipedia.org/wiki/Lasso_(statistics)>`_\\n\\n    \",\n      inputs: [\n        {\n          name: 'X',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: ': (n_samples, n_features)',\n          docstring: 'Input data.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'y',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: ': (n_samples)',\n          docstring: 'Input targets.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'Xy',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape:\n            '(n_samples,) or (n_samples, n_targets),             optional',\n          docstring:\n            'Xy = np.dot(X.T, y) that can be precomputed. It is useful only when the Gram matrix is precomputed.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'Gram',\n          default_value: null,\n          param_type: ['array', null],\n          expected_shape: ': (n_features, n_features), optional',\n          docstring:\n            \"Precomputed Gram matrix (X' * X), if ``'auto'``, the Gram matrix is precomputed from the given X, if there are more samples than features.\",\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'max_iter',\n          default_value: '500',\n          param_type: ['int'],\n          expected_shape: null,\n          docstring:\n            'Maximum number of iterations to perform, set to infinity for no limit.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'alpha_min',\n          default_value: '0',\n          param_type: ['float'],\n          expected_shape: null,\n          docstring:\n            'Minimum correlation along the path. It corresponds to the regularization parameter alpha parameter in the Lasso.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'method',\n          default_value: 'lar',\n          param_type: ['LIST_VALID_OPTIONS'],\n          expected_shape: null,\n          docstring:\n            \"Specifies the returned model. Select ``'lar'`` for Least Angle Regression, ``'lasso'`` for the Lasso.\",\n          is_optional: true,\n          options: ['lar', \" 'lasso'}\", \" optional (default='lar')\"]\n        },\n        {\n          name: 'copy_X',\n          default_value: 'True',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring: 'If ``False``, ``X`` is overwritten.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'eps',\n          default_value: '``np.finfonp.float.eps``',\n          param_type: ['float'],\n          expected_shape: null,\n          docstring:\n            'The machine-precision regularization in the computation of the Cholesky diagonal factors. Increase this for very ill-conditioned systems.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'copy_Gram',\n          default_value: 'True',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring: 'If ``False``, ``Gram`` is overwritten.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'verbose',\n          default_value: '0',\n          param_type: ['int'],\n          expected_shape: null,\n          docstring: 'Controls output verbosity.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'return_path',\n          default_value: 'True',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'If ``return_path==True`` returns the entire path, else returns only the last point of the path.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'return_n_iter',\n          default_value: 'False',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring: 'Whether to return the number of iterations.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'positive',\n          default_value: 'False',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            \"Restrict coefficients to be >= 0. This option is only allowed with method 'lasso'. Note that the model coefficients will not converge to the ordinary-least-squares solution for small values of alpha. Only coefficients up to the smallest alpha value (``alphas_[alphas_ > 0.].min()`` when fit_path=True) reached by the stepwise Lars-Lasso algorithm are typically in congruence with the solution of the coordinate descent lasso_path function.\",\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ]\n    },\n    {\n      name: 'lasso_path',\n      outputs: [\n        {\n          name: 'alphas',\n          returned: true,\n          param_type: ['array'],\n          docstring: 'The alphas along the path where models are computed.'\n        },\n        {\n          name: 'coefs',\n          returned: true,\n          param_type: ['array'],\n          docstring: 'Coefficients along the path.'\n        },\n        {\n          name: 'dual_gaps',\n          returned: true,\n          param_type: ['array'],\n          docstring:\n            'The dual gaps at the end of the optimization for each alpha.'\n        },\n        {\n          name: 'n_iters',\n          returned: true,\n          param_type: ['array'],\n          docstring:\n            'The number of iterations taken by the coordinate descent optimizer to reach the specified tolerance for each alpha.'\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ],\n      docstring:\n        \"Compute Lasso path with coordinate descent\\n\\n    The Lasso optimization function varies for mono and multi-outputs.\\n\\n    For mono-output tasks it is::\\n\\n        (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\\n\\n    For multi-output tasks it is::\\n\\n        (1 / (2 * n_samples)) * ||Y - XW||^2_Fro + alpha * ||W||_21\\n\\n    Where::\\n\\n        ||W||_21 = \\\\sum_i \\\\sqrt{\\\\sum_j w_{ij}^2}\\n\\n    i.e. the sum of norm of each row.\\n\\n    Read more in the :ref:`User Guide <lasso>`.\\n\\n    Parameters\\n    ----------\\n    X : {array-like, sparse matrix}, shape (n_samples, n_features)\\n        Training data. Pass directly as Fortran-contiguous data to avoid\\n        unnecessary memory duplication. If ``y`` is mono-output then ``X``\\n        can be sparse.\\n\\n    y : ndarray, shape (n_samples,), or (n_samples, n_outputs)\\n        Target values\\n\\n    eps : float, optional\\n        Length of the path. ``eps=1e-3`` means that\\n        ``alpha_min / alpha_max = 1e-3``\\n\\n    n_alphas : int, optional\\n        Number of alphas along the regularization path\\n\\n    alphas : ndarray, optional\\n        List of alphas where to compute the models.\\n        If ``None`` alphas are set automatically\\n\\n    precompute : True | False | 'auto' | array-like\\n        Whether to use a precomputed Gram matrix to speed up\\n        calculations. If set to ``'auto'`` let us decide. The Gram\\n        matrix can also be passed as argument.\\n\\n    Xy : array-like, optional\\n        Xy = np.dot(X.T, y) that can be precomputed. It is useful\\n        only when the Gram matrix is precomputed.\\n\\n    copy_X : boolean, optional, default True\\n        If ``True``, X will be copied; else, it may be overwritten.\\n\\n    coef_init : array, shape (n_features, ) | None\\n        The initial values of the coefficients.\\n\\n    verbose : bool or integer\\n        Amount of verbosity.\\n\\n    return_n_iter : bool\\n        whether to return the number of iterations or not.\\n\\n    positive : bool, default False\\n        If set to True, forces coefficients to be positive.\\n        (Only allowed when ``y.ndim == 1``).\\n\\n    **params : kwargs\\n        keyword arguments passed to the coordinate descent solver.\\n\\n    Returns\\n    -------\\n    alphas : array, shape (n_alphas,)\\n        The alphas along the path where models are computed.\\n\\n    coefs : array, shape (n_features, n_alphas) or             (n_outputs, n_features, n_alphas)\\n        Coefficients along the path.\\n\\n    dual_gaps : array, shape (n_alphas,)\\n        The dual gaps at the end of the optimization for each alpha.\\n\\n    n_iters : array-like, shape (n_alphas,)\\n        The number of iterations taken by the coordinate descent optimizer to\\n        reach the specified tolerance for each alpha.\\n\\n    Notes\\n    -----\\n    For an example, see\\n    :ref:`examples/linear_model/plot_lasso_coordinate_descent_path.py\\n    <sphx_glr_auto_examples_linear_model_plot_lasso_coordinate_descent_path.py>`.\\n\\n    To avoid unnecessary memory duplication the X argument of the fit method\\n    should be directly passed as a Fortran-contiguous numpy array.\\n\\n    Note that in certain cases, the Lars solver may be significantly\\n    faster to implement this functionality. In particular, linear\\n    interpolation can be used to retrieve model coefficients between the\\n    values output by lars_path\\n\\n    Examples\\n    ---------\\n\\n    Comparing lasso_path and lars_path with interpolation:\\n\\n    >>> X = np.array([[1, 2, 3.1], [2.3, 5.4, 4.3]]).T\\n    >>> y = np.array([1, 2, 3.1])\\n    >>> # Use lasso_path to compute a coefficient path\\n    >>> _, coef_path, _ = lasso_path(X, y, alphas=[5., 1., .5])\\n    >>> print(coef_path)\\n    [[0.         0.         0.46874778]\\n     [0.2159048  0.4425765  0.23689075]]\\n\\n    >>> # Now use lars_path and 1D linear interpolation to compute the\\n    >>> # same path\\n    >>> from sklearn.linear_model import lars_path\\n    >>> alphas, active, coef_path_lars = lars_path(X, y, method='lasso')\\n    >>> from scipy import interpolate\\n    >>> coef_path_continuous = interpolate.interp1d(alphas[::-1],\\n    ...                                             coef_path_lars[:, ::-1])\\n    >>> print(coef_path_continuous([5., 1., .5]))\\n    [[0.         0.         0.46915237]\\n     [0.2159048  0.4425765  0.23668876]]\\n\\n\\n    See also\\n    --------\\n    lars_path\\n    Lasso\\n    LassoLars\\n    LassoCV\\n    LassoLarsCV\\n    sklearn.decomposition.sparse_encode\\n    \",\n      inputs: [\n        {\n          name: 'X',\n          default_value: null,\n          param_type: ['LIST_VALID_OPTIONS', 'array'],\n          expected_shape: '(n_samples, n_features)',\n          docstring:\n            'Training data. Pass directly as Fortran-contiguous data to avoid unnecessary memory duplication. If ``y`` is mono-output then ``X`` can be sparse.',\n          is_optional: false,\n          options: [\n            'array-like',\n            ' sparse matrix}',\n            ' shape (n_samples',\n            ' n_features)'\n          ]\n        },\n        {\n          name: 'y',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: '(n_samples,), or (n_samples, n_outputs)',\n          docstring: 'Target values',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'eps',\n          default_value: null,\n          param_type: ['float'],\n          expected_shape: null,\n          docstring:\n            'Length of the path. ``eps=1e-3`` means that ``alpha_min / alpha_max = 1e-3``',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'n_alphas',\n          default_value: null,\n          param_type: ['int'],\n          expected_shape: null,\n          docstring: 'Number of alphas along the regularization path',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'alphas',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: null,\n          docstring:\n            'List of alphas where to compute the models. If ``None`` alphas are set automatically',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'precompute',\n          default_value: null,\n          param_type: ['LIST_VALID_OPTIONS', 'array'],\n          expected_shape: null,\n          docstring:\n            \"Whether to use a precomputed Gram matrix to speed up calculations. If set to ``'auto'`` let us decide. The Gram matrix can also be passed as argument.\",\n          is_optional: false,\n          options: ['True ', ' False ', \" 'auto' \", ' array-like']\n        },\n        {\n          name: 'Xy',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: null,\n          docstring:\n            'Xy = np.dot(X.T, y) that can be precomputed. It is useful only when the Gram matrix is precomputed.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'copy_X',\n          default_value: 'True',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'If ``True``, X will be copied; else, it may be overwritten.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'coef_init',\n          default_value: null,\n          param_type: ['LIST_VALID_OPTIONS', 'array', null],\n          expected_shape: '(n_features, ) | None',\n          docstring: 'The initial values of the coefficients.',\n          is_optional: false,\n          options: ['array, shape (n_features, ) ', ' None']\n        },\n        {\n          name: 'verbose',\n          default_value: null,\n          param_type: ['int', 'bool'],\n          expected_shape: null,\n          docstring: 'Amount of verbosity.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'return_n_iter',\n          default_value: null,\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring: 'whether to return the number of iterations or not.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'positive',\n          default_value: 'False',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'If set to True, forces coefficients to be positive. (Only allowed when ``y.ndim == 1``).',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: '**params',\n          default_value: null,\n          param_type: [null],\n          expected_shape: null,\n          docstring:\n            'keyword arguments passed to the coordinate descent solver.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ]\n    },\n    {\n      name: 'lasso_stability_path',\n      outputs: [\n        {\n          name: 'alphas_grid',\n          returned: true,\n          param_type: ['array'],\n          docstring:\n            'The grid points between 0 and 1: alpha/alpha_max  scores_path : array, shape = [n_features, n_grid]     The scores for each feature along the path.'\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ],\n      docstring:\n        'DEPRECATED: The function lasso_stability_path is deprecated in 0.19 and will be removed in 0.21.\\n\\nStability path based on randomized Lasso estimates\\n\\n    Parameters\\n    ----------\\n    X : array-like, shape = [n_samples, n_features]\\n        training data.\\n\\n    y : array-like, shape = [n_samples]\\n        target values.\\n\\n    scaling : float, optional, default=0.5\\n        The alpha parameter in the stability selection article used to\\n        randomly scale the features. Should be between 0 and 1.\\n\\n    random_state : int, RandomState instance or None, optional, default=None\\n        The generator used to randomize the design.  If int, random_state is\\n        the seed used by the random number generator; If RandomState instance,\\n        random_state is the random number generator; If None, the random number\\n        generator is the RandomState instance used by `np.random`.\\n\\n    n_resampling : int, optional, default=200\\n        Number of randomized models.\\n\\n    n_grid : int, optional, default=100\\n        Number of grid points. The path is linearly reinterpolated\\n        on a grid between 0 and 1 before computing the scores.\\n\\n    sample_fraction : float, optional, default=0.75\\n        The fraction of samples to be used in each randomized design.\\n        Should be between 0 and 1. If 1, all samples are used.\\n\\n    eps : float, optional\\n        Smallest value of alpha / alpha_max considered\\n\\n    n_jobs : int or None, optional (default=None)\\n        Number of CPUs to use during the resampling.\\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\\n        for more details.\\n\\n    verbose : boolean or integer, optional\\n        Sets the verbosity amount\\n\\n    Returns\\n    -------\\n    alphas_grid : array, shape ~ [n_grid]\\n        The grid points between 0 and 1: alpha/alpha_max\\n\\n    scores_path : array, shape = [n_features, n_grid]\\n        The scores for each feature along the path.\\n    ',\n      inputs: [\n        {\n          name: 'X',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: '[n_samples, n_features]',\n          docstring:\n            'training data.  y : array-like, shape = [n_samples]     target values.  scaling : float, optional, default=0.5     The alpha parameter in the stability selection article used to     randomly scale the features. Should be between 0 and 1.  random_state : int, RandomState instance or None, optional, default=None     The generator used to randomize the design.  If int, random_state is     the seed used by the random number generator; If RandomState instance,     random_state is the random number generator; If None, the random number     generator is the RandomState instance used by `np.random`.  n_resampling : int, optional, default=200     Number of randomized models.  n_grid : int, optional, default=100     Number of grid points. The path is linearly reinterpolated     on a grid between 0 and 1 before computing the scores.  sample_fraction : float, optional, default=0.75     The fraction of samples to be used in each randomized design.     Should be between 0 and 1. If 1, all samples are used.  eps : float, optional     Smallest value of alpha / alpha_max considered  n_jobs : int or None, optional (default=None)     Number of CPUs to use during the resampling.     ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.     ``-1`` means using all processors. See :term:`Glossary <n_jobs>`     for more details.  verbose : boolean or integer, optional     Sets the verbosity amount',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ]\n    },\n    {\n      name: 'logistic_regression_path',\n      outputs: [\n        {\n          name: 'coefs',\n          returned: true,\n          param_type: ['array'],\n          docstring:\n            \"List of coefficients for the Logistic Regression model. If fit_intercept is set to True then the second dimension will be n_features + 1, where the last item represents the intercept. For ``multiclass='multinomial'``, the shape is (n_classes, n_cs, n_features) or (n_classes, n_cs, n_features + 1).\"\n        },\n        {\n          name: 'Cs',\n          returned: true,\n          param_type: ['array'],\n          docstring: 'Grid of Cs used for cross-validation.'\n        },\n        {\n          name: 'n_iter',\n          returned: true,\n          param_type: ['array'],\n          docstring: 'Actual number of iteration for each Cs.'\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ],\n      docstring:\n        \"Compute a Logistic Regression model for a list of regularization\\n    parameters.\\n\\n    This is an implementation that uses the result of the previous model\\n    to speed up computations along the set of solutions, making it faster\\n    than sequentially calling LogisticRegression for the different parameters.\\n    Note that there will be no speedup with liblinear solver, since it does\\n    not handle warm-starting.\\n\\n    Read more in the :ref:`User Guide <logistic_regression>`.\\n\\n    Parameters\\n    ----------\\n    X : array-like or sparse matrix, shape (n_samples, n_features)\\n        Input data.\\n\\n    y : array-like, shape (n_samples,) or (n_samples, n_targets)\\n        Input data, target values.\\n\\n    pos_class : int, None\\n        The class with respect to which we perform a one-vs-all fit.\\n        If None, then it is assumed that the given problem is binary.\\n\\n    Cs : int | array-like, shape (n_cs,)\\n        List of values for the regularization parameter or integer specifying\\n        the number of regularization parameters that should be used. In this\\n        case, the parameters will be chosen in a logarithmic scale between\\n        1e-4 and 1e4.\\n\\n    fit_intercept : bool\\n        Whether to fit an intercept for the model. In this case the shape of\\n        the returned array is (n_cs, n_features + 1).\\n\\n    max_iter : int\\n        Maximum number of iterations for the solver.\\n\\n    tol : float\\n        Stopping criterion. For the newton-cg and lbfgs solvers, the iteration\\n        will stop when ``max{|g_i | i = 1, ..., n} <= tol``\\n        where ``g_i`` is the i-th component of the gradient.\\n\\n    verbose : int\\n        For the liblinear and lbfgs solvers set verbose to any positive\\n        number for verbosity.\\n\\n    solver : {'lbfgs', 'newton-cg', 'liblinear', 'sag', 'saga'}\\n        Numerical solver to use.\\n\\n    coef : array-like, shape (n_features,), default None\\n        Initialization value for coefficients of logistic regression.\\n        Useless for liblinear solver.\\n\\n    class_weight : dict or 'balanced', optional\\n        Weights associated with classes in the form ``{class_label: weight}``.\\n        If not given, all classes are supposed to have weight one.\\n\\n        The \\\"balanced\\\" mode uses the values of y to automatically adjust\\n        weights inversely proportional to class frequencies in the input data\\n        as ``n_samples / (n_classes * np.bincount(y))``.\\n\\n        Note that these weights will be multiplied with sample_weight (passed\\n        through the fit method) if sample_weight is specified.\\n\\n    dual : bool\\n        Dual or primal formulation. Dual formulation is only implemented for\\n        l2 penalty with liblinear solver. Prefer dual=False when\\n        n_samples > n_features.\\n\\n    penalty : str, 'l1' or 'l2'\\n        Used to specify the norm used in the penalization. The 'newton-cg',\\n        'sag' and 'lbfgs' solvers support only l2 penalties.\\n\\n    intercept_scaling : float, default 1.\\n        Useful only when the solver 'liblinear' is used\\n        and self.fit_intercept is set to True. In this case, x becomes\\n        [x, self.intercept_scaling],\\n        i.e. a \\\"synthetic\\\" feature with constant value equal to\\n        intercept_scaling is appended to the instance vector.\\n        The intercept becomes ``intercept_scaling * synthetic_feature_weight``.\\n\\n        Note! the synthetic feature weight is subject to l1/l2 regularization\\n        as all other features.\\n        To lessen the effect of regularization on synthetic feature weight\\n        (and therefore on the intercept) intercept_scaling has to be increased.\\n\\n    multi_class : str, {'ovr', 'multinomial', 'auto'}, default: 'ovr'\\n        If the option chosen is 'ovr', then a binary problem is fit for each\\n        label. For 'multinomial' the loss minimised is the multinomial loss fit\\n        across the entire probability distribution, *even when the data is\\n        binary*. 'multinomial' is unavailable when solver='liblinear'.\\n        'auto' selects 'ovr' if the data is binary, or if solver='liblinear',\\n        and otherwise selects 'multinomial'.\\n\\n        .. versionadded:: 0.18\\n           Stochastic Average Gradient descent solver for 'multinomial' case.\\n        .. versionchanged:: 0.20\\n            Default will change from 'ovr' to 'auto' in 0.22.\\n\\n    random_state : int, RandomState instance or None, optional, default None\\n        The seed of the pseudo random number generator to use when shuffling\\n        the data.  If int, random_state is the seed used by the random number\\n        generator; If RandomState instance, random_state is the random number\\n        generator; If None, the random number generator is the RandomState\\n        instance used by `np.random`. Used when ``solver`` == 'sag' or\\n        'liblinear'.\\n\\n    check_input : bool, default True\\n        If False, the input arrays X and y will not be checked.\\n\\n    max_squared_sum : float, default None\\n        Maximum squared sum of X over samples. Used only in SAG solver.\\n        If None, it will be computed, going through all the samples.\\n        The value should be precomputed to speed up cross validation.\\n\\n    sample_weight : array-like, shape(n_samples,) optional\\n        Array of weights that are assigned to individual samples.\\n        If not provided, then each sample is given unit weight.\\n\\n    Returns\\n    -------\\n    coefs : ndarray, shape (n_cs, n_features) or (n_cs, n_features + 1)\\n        List of coefficients for the Logistic Regression model. If\\n        fit_intercept is set to True then the second dimension will be\\n        n_features + 1, where the last item represents the intercept. For\\n        ``multiclass='multinomial'``, the shape is (n_classes, n_cs,\\n        n_features) or (n_classes, n_cs, n_features + 1).\\n\\n    Cs : ndarray\\n        Grid of Cs used for cross-validation.\\n\\n    n_iter : array, shape (n_cs,)\\n        Actual number of iteration for each Cs.\\n\\n    Notes\\n    -----\\n    You might get slightly different results with the solver liblinear than\\n    with the others since this uses LIBLINEAR which penalizes the intercept.\\n\\n    .. versionchanged:: 0.19\\n        The \\\"copy\\\" parameter was removed.\\n    \",\n      inputs: [\n        {\n          name: 'X',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: '(n_samples, n_features)',\n          docstring: 'Input data.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'y',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: '(n_samples,) or (n_samples, n_targets)',\n          docstring: 'Input data, target values.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'pos_class',\n          default_value: null,\n          param_type: ['int', null],\n          expected_shape: null,\n          docstring:\n            'The class with respect to which we perform a one-vs-all fit. If None, then it is assumed that the given problem is binary.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'Cs',\n          default_value: null,\n          param_type: ['LIST_VALID_OPTIONS', 'array', 'int'],\n          expected_shape: '(n_cs,)',\n          docstring:\n            'List of values for the regularization parameter or integer specifying the number of regularization parameters that should be used. In this case, the parameters will be chosen in a logarithmic scale between 1e-4 and 1e4.',\n          is_optional: false,\n          options: ['int ', ' array-like, shape (n_cs,)']\n        },\n        {\n          name: 'fit_intercept',\n          default_value: null,\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'Whether to fit an intercept for the model. In this case the shape of the returned array is (n_cs, n_features + 1).',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'max_iter',\n          default_value: null,\n          param_type: ['int'],\n          expected_shape: null,\n          docstring: 'Maximum number of iterations for the solver.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'tol',\n          default_value: null,\n          param_type: ['float'],\n          expected_shape: null,\n          docstring:\n            'Stopping criterion. For the newton-cg and lbfgs solvers, the iteration will stop when ``max{|g_i | i = 1, ..., n} <= tol`` where ``g_i`` is the i-th component of the gradient.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'verbose',\n          default_value: null,\n          param_type: ['int'],\n          expected_shape: null,\n          docstring:\n            'For the liblinear and lbfgs solvers set verbose to any positive number for verbosity.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'solver',\n          default_value: null,\n          param_type: ['LIST_VALID_OPTIONS'],\n          expected_shape: null,\n          docstring: 'Numerical solver to use.',\n          is_optional: false,\n          options: ['lbfgs', \" 'newton-cg\", \" 'liblinear\", \" 'sag\", \" 'saga\"]\n        },\n        {\n          name: 'coef',\n          default_value: 'None',\n          param_type: ['array', null],\n          expected_shape: '(n_features,), default None',\n          docstring:\n            'Initialization value for coefficients of logistic regression. Useless for liblinear solver.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'class_weight',\n          default_value: null,\n          param_type: ['dict'],\n          expected_shape: null,\n          docstring:\n            'Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one.  The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``.  Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'dual',\n          default_value: null,\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'Dual or primal formulation. Dual formulation is only implemented for l2 penalty with liblinear solver. Prefer dual=False when n_samples > n_features.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'penalty',\n          default_value: null,\n          param_type: ['str'],\n          expected_shape: null,\n          docstring:\n            \"Used to specify the norm used in the penalization. The 'newton-cg', 'sag' and 'lbfgs' solvers support only l2 penalties.\",\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'intercept_scaling',\n          default_value: '1.',\n          param_type: ['float'],\n          expected_shape: null,\n          docstring:\n            'Useful only when the solver \\'liblinear\\' is used and self.fit_intercept is set to True. In this case, x becomes [x, self.intercept_scaling], i.e. a \"synthetic\" feature with constant value equal to intercept_scaling is appended to the instance vector. The intercept becomes ``intercept_scaling * synthetic_feature_weight``.  Note! the synthetic feature weight is subject to l1/l2 regularization as all other features. To lessen the effect of regularization on synthetic feature weight (and therefore on the intercept) intercept_scaling has to be increased.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'multi_class',\n          default_value: 'ovr',\n          param_type: ['LIST_VALID_OPTIONS', 'str'],\n          expected_shape: null,\n          docstring:\n            \"If the option chosen is 'ovr', then a binary problem is fit for each label. For 'multinomial' the loss minimised is the multinomial loss fit across the entire probability distribution, *even when the data is binary*. 'multinomial' is unavailable when solver='liblinear'. 'auto' selects 'ovr' if the data is binary, or if solver='liblinear', and otherwise selects 'multinomial'.  .. versionadded:: 0.18    Stochastic Average Gradient descent solver for 'multinomial' case. .. versionchanged:: 0.20     Default will change from 'ovr' to 'auto' in 0.22.\",\n          is_optional: true,\n          options: [\n            'str',\n            \" {'ovr\",\n            \" 'multinomial\",\n            \" 'auto'}\",\n            \" default: 'ovr\"\n          ]\n        },\n        {\n          name: 'random_state',\n          default_value: 'None',\n          param_type: ['int', null],\n          expected_shape: null,\n          docstring:\n            \"The seed of the pseudo random number generator to use when shuffling the data.  If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`. Used when ``solver`` == 'sag' or 'liblinear'.\",\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'check_input',\n          default_value: 'True',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring: 'If False, the input arrays X and y will not be checked.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'max_squared_sum',\n          default_value: 'None',\n          param_type: ['float', null],\n          expected_shape: null,\n          docstring:\n            'Maximum squared sum of X over samples. Used only in SAG solver. If None, it will be computed, going through all the samples. The value should be precomputed to speed up cross validation.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'sample_weight',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: '(n_samples,) optional',\n          docstring:\n            'Array of weights that are assigned to individual samples. If not provided, then each sample is given unit weight.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ]\n    },\n    {\n      name: 'orthogonal_mp',\n      outputs: [\n        {\n          name: 'coef',\n          returned: true,\n          param_type: ['array'],\n          docstring:\n            'Coefficients of the OMP solution. If `return_path=True`, this contains the whole coefficient path. In this case its shape is (n_features, n_features) or (n_features, n_targets, n_features) and iterating over the last axis yields coefficients in increasing order of active features.'\n        },\n        {\n          name: 'n_iters',\n          returned: true,\n          param_type: ['array', 'int'],\n          docstring:\n            'Number of active features across every target. Returned only if `return_n_iter` is set to True.'\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ],\n      docstring:\n        \"Orthogonal Matching Pursuit (OMP)\\n\\n    Solves n_targets Orthogonal Matching Pursuit problems.\\n    An instance of the problem has the form:\\n\\n    When parametrized by the number of non-zero coefficients using\\n    `n_nonzero_coefs`:\\n    argmin ||y - X\\\\gamma||^2 subject to ||\\\\gamma||_0 <= n_{nonzero coefs}\\n\\n    When parametrized by error using the parameter `tol`:\\n    argmin ||\\\\gamma||_0 subject to ||y - X\\\\gamma||^2 <= tol\\n\\n    Read more in the :ref:`User Guide <omp>`.\\n\\n    Parameters\\n    ----------\\n    X : array, shape (n_samples, n_features)\\n        Input data. Columns are assumed to have unit norm.\\n\\n    y : array, shape (n_samples,) or (n_samples, n_targets)\\n        Input targets\\n\\n    n_nonzero_coefs : int\\n        Desired number of non-zero entries in the solution. If None (by\\n        default) this value is set to 10% of n_features.\\n\\n    tol : float\\n        Maximum norm of the residual. If not None, overrides n_nonzero_coefs.\\n\\n    precompute : {True, False, 'auto'},\\n        Whether to perform precomputations. Improves performance when n_targets\\n        or n_samples is very large.\\n\\n    copy_X : bool, optional\\n        Whether the design matrix X must be copied by the algorithm. A false\\n        value is only helpful if X is already Fortran-ordered, otherwise a\\n        copy is made anyway.\\n\\n    return_path : bool, optional. Default: False\\n        Whether to return every value of the nonzero coefficients along the\\n        forward path. Useful for cross-validation.\\n\\n    return_n_iter : bool, optional default False\\n        Whether or not to return the number of iterations.\\n\\n    Returns\\n    -------\\n    coef : array, shape (n_features,) or (n_features, n_targets)\\n        Coefficients of the OMP solution. If `return_path=True`, this contains\\n        the whole coefficient path. In this case its shape is\\n        (n_features, n_features) or (n_features, n_targets, n_features) and\\n        iterating over the last axis yields coefficients in increasing order\\n        of active features.\\n\\n    n_iters : array-like or int\\n        Number of active features across every target. Returned only if\\n        `return_n_iter` is set to True.\\n\\n    See also\\n    --------\\n    OrthogonalMatchingPursuit\\n    orthogonal_mp_gram\\n    lars_path\\n    decomposition.sparse_encode\\n\\n    Notes\\n    -----\\n    Orthogonal matching pursuit was introduced in S. Mallat, Z. Zhang,\\n    Matching pursuits with time-frequency dictionaries, IEEE Transactions on\\n    Signal Processing, Vol. 41, No. 12. (December 1993), pp. 3397-3415.\\n    (http://blanche.polytechnique.fr/~mallat/papiers/MallatPursuit93.pdf)\\n\\n    This implementation is based on Rubinstein, R., Zibulevsky, M. and Elad,\\n    M., Efficient Implementation of the K-SVD Algorithm using Batch Orthogonal\\n    Matching Pursuit Technical Report - CS Technion, April 2008.\\n    http://www.cs.technion.ac.il/~ronrubin/Publications/KSVD-OMP-v2.pdf\\n\\n    \",\n      inputs: [\n        {\n          name: 'X',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: '(n_samples, n_features)',\n          docstring: 'Input data. Columns are assumed to have unit norm.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'y',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: '(n_samples,) or (n_samples, n_targets)',\n          docstring: 'Input targets',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'n_nonzero_coefs',\n          default_value: null,\n          param_type: ['int'],\n          expected_shape: null,\n          docstring:\n            'Desired number of non-zero entries in the solution. If None (by default) this value is set to 10% of n_features.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'tol',\n          default_value: null,\n          param_type: ['float'],\n          expected_shape: null,\n          docstring:\n            'Maximum norm of the residual. If not None, overrides n_nonzero_coefs.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'precompute',\n          default_value: null,\n          param_type: ['LIST_VALID_OPTIONS'],\n          expected_shape: null,\n          docstring:\n            'Whether to perform precomputations. Improves performance when n_targets or n_samples is very large.',\n          is_optional: false,\n          options: ['True', ' False', \" 'auto'}\", '']\n        },\n        {\n          name: 'copy_X',\n          default_value: null,\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'Whether the design matrix X must be copied by the algorithm. A false value is only helpful if X is already Fortran-ordered, otherwise a copy is made anyway.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'return_path',\n          default_value: null,\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'Whether to return every value of the nonzero coefficients along the forward path. Useful for cross-validation.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'return_n_iter',\n          default_value: 'False',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring: 'Whether or not to return the number of iterations.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ]\n    },\n    {\n      name: 'orthogonal_mp_gram',\n      outputs: [\n        {\n          name: 'coef',\n          returned: true,\n          param_type: ['array'],\n          docstring:\n            'Coefficients of the OMP solution. If `return_path=True`, this contains the whole coefficient path. In this case its shape is (n_features, n_features) or (n_features, n_targets, n_features) and iterating over the last axis yields coefficients in increasing order of active features.'\n        },\n        {\n          name: 'n_iters',\n          returned: true,\n          param_type: ['array', 'int'],\n          docstring:\n            'Number of active features across every target. Returned only if `return_n_iter` is set to True.'\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ],\n      docstring:\n        'Gram Orthogonal Matching Pursuit (OMP)\\n\\n    Solves n_targets Orthogonal Matching Pursuit problems using only\\n    the Gram matrix X.T * X and the product X.T * y.\\n\\n    Read more in the :ref:`User Guide <omp>`.\\n\\n    Parameters\\n    ----------\\n    Gram : array, shape (n_features, n_features)\\n        Gram matrix of the input data: X.T * X\\n\\n    Xy : array, shape (n_features,) or (n_features, n_targets)\\n        Input targets multiplied by X: X.T * y\\n\\n    n_nonzero_coefs : int\\n        Desired number of non-zero entries in the solution. If None (by\\n        default) this value is set to 10% of n_features.\\n\\n    tol : float\\n        Maximum norm of the residual. If not None, overrides n_nonzero_coefs.\\n\\n    norms_squared : array-like, shape (n_targets,)\\n        Squared L2 norms of the lines of y. Required if tol is not None.\\n\\n    copy_Gram : bool, optional\\n        Whether the gram matrix must be copied by the algorithm. A false\\n        value is only helpful if it is already Fortran-ordered, otherwise a\\n        copy is made anyway.\\n\\n    copy_Xy : bool, optional\\n        Whether the covariance vector Xy must be copied by the algorithm.\\n        If False, it may be overwritten.\\n\\n    return_path : bool, optional. Default: False\\n        Whether to return every value of the nonzero coefficients along the\\n        forward path. Useful for cross-validation.\\n\\n    return_n_iter : bool, optional default False\\n        Whether or not to return the number of iterations.\\n\\n    Returns\\n    -------\\n    coef : array, shape (n_features,) or (n_features, n_targets)\\n        Coefficients of the OMP solution. If `return_path=True`, this contains\\n        the whole coefficient path. In this case its shape is\\n        (n_features, n_features) or (n_features, n_targets, n_features) and\\n        iterating over the last axis yields coefficients in increasing order\\n        of active features.\\n\\n    n_iters : array-like or int\\n        Number of active features across every target. Returned only if\\n        `return_n_iter` is set to True.\\n\\n    See also\\n    --------\\n    OrthogonalMatchingPursuit\\n    orthogonal_mp\\n    lars_path\\n    decomposition.sparse_encode\\n\\n    Notes\\n    -----\\n    Orthogonal matching pursuit was introduced in G. Mallat, Z. Zhang,\\n    Matching pursuits with time-frequency dictionaries, IEEE Transactions on\\n    Signal Processing, Vol. 41, No. 12. (December 1993), pp. 3397-3415.\\n    (http://blanche.polytechnique.fr/~mallat/papiers/MallatPursuit93.pdf)\\n\\n    This implementation is based on Rubinstein, R., Zibulevsky, M. and Elad,\\n    M., Efficient Implementation of the K-SVD Algorithm using Batch Orthogonal\\n    Matching Pursuit Technical Report - CS Technion, April 2008.\\n    http://www.cs.technion.ac.il/~ronrubin/Publications/KSVD-OMP-v2.pdf\\n\\n    ',\n      inputs: [\n        {\n          name: 'Gram',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: '(n_features, n_features)',\n          docstring: 'Gram matrix of the input data: X.T * X',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'Xy',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: '(n_features,) or (n_features, n_targets)',\n          docstring: 'Input targets multiplied by X: X.T * y',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'n_nonzero_coefs',\n          default_value: null,\n          param_type: ['int'],\n          expected_shape: null,\n          docstring:\n            'Desired number of non-zero entries in the solution. If None (by default) this value is set to 10% of n_features.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'tol',\n          default_value: null,\n          param_type: ['float'],\n          expected_shape: null,\n          docstring:\n            'Maximum norm of the residual. If not None, overrides n_nonzero_coefs.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'norms_squared',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: '(n_targets,)',\n          docstring:\n            'Squared L2 norms of the lines of y. Required if tol is not None.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'copy_Gram',\n          default_value: null,\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'Whether the gram matrix must be copied by the algorithm. A false value is only helpful if it is already Fortran-ordered, otherwise a copy is made anyway.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'copy_Xy',\n          default_value: null,\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'Whether the covariance vector Xy must be copied by the algorithm. If False, it may be overwritten.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'return_path',\n          default_value: null,\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'Whether to return every value of the nonzero coefficients along the forward path. Useful for cross-validation.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'return_n_iter',\n          default_value: 'False',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring: 'Whether or not to return the number of iterations.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ]\n    },\n    {\n      name: 'ridge_regression',\n      outputs: [\n        {\n          name: 'coef',\n          returned: true,\n          param_type: ['array'],\n          docstring: 'Weight vector(s).'\n        },\n        {\n          name: 'n_iter',\n          returned: true,\n          param_type: ['int'],\n          docstring:\n            'The actual number of iteration performed by the solver. Only returned if `return_n_iter` is True.'\n        },\n        {\n          name: 'intercept',\n          returned: true,\n          param_type: ['array', 'float'],\n          docstring:\n            'The intercept of the model. Only returned if `return_intercept` is True and if X is a scipy sparse array.'\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ],\n      docstring:\n        \"Solve the ridge equation by the method of normal equations.\\n\\n    Read more in the :ref:`User Guide <ridge_regression>`.\\n\\n    Parameters\\n    ----------\\n    X : {array-like, sparse matrix, LinearOperator},\\n        shape = [n_samples, n_features]\\n        Training data\\n\\n    y : array-like, shape = [n_samples] or [n_samples, n_targets]\\n        Target values\\n\\n    alpha : {float, array-like},\\n        shape = [n_targets] if array-like\\n        Regularization strength; must be a positive float. Regularization\\n        improves the conditioning of the problem and reduces the variance of\\n        the estimates. Larger values specify stronger regularization.\\n        Alpha corresponds to ``C^-1`` in other linear models such as\\n        LogisticRegression or LinearSVC. If an array is passed, penalties are\\n        assumed to be specific to the targets. Hence they must correspond in\\n        number.\\n\\n    sample_weight : float or numpy array of shape [n_samples]\\n        Individual weights for each sample. If sample_weight is not None and\\n        solver='auto', the solver will be set to 'cholesky'.\\n\\n        .. versionadded:: 0.17\\n\\n    solver : {'auto', 'svd', 'cholesky', 'lsqr', 'sparse_cg', 'sag', 'saga'}\\n        Solver to use in the computational routines:\\n\\n        - 'auto' chooses the solver automatically based on the type of data.\\n\\n        - 'svd' uses a Singular Value Decomposition of X to compute the Ridge\\n          coefficients. More stable for singular matrices than\\n          'cholesky'.\\n\\n        - 'cholesky' uses the standard scipy.linalg.solve function to\\n          obtain a closed-form solution via a Cholesky decomposition of\\n          dot(X.T, X)\\n\\n        - 'sparse_cg' uses the conjugate gradient solver as found in\\n          scipy.sparse.linalg.cg. As an iterative algorithm, this solver is\\n          more appropriate than 'cholesky' for large-scale data\\n          (possibility to set `tol` and `max_iter`).\\n\\n        - 'lsqr' uses the dedicated regularized least-squares routine\\n          scipy.sparse.linalg.lsqr. It is the fastest and uses an iterative\\n          procedure.\\n\\n        - 'sag' uses a Stochastic Average Gradient descent, and 'saga' uses\\n          its improved, unbiased version named SAGA. Both methods also use an\\n          iterative procedure, and are often faster than other solvers when\\n          both n_samples and n_features are large. Note that 'sag' and\\n          'saga' fast convergence is only guaranteed on features with\\n          approximately the same scale. You can preprocess the data with a\\n          scaler from sklearn.preprocessing.\\n\\n\\n        All last five solvers support both dense and sparse data. However, only\\n        'sag' and 'saga' supports sparse input when`fit_intercept` is True.\\n\\n        .. versionadded:: 0.17\\n           Stochastic Average Gradient descent solver.\\n        .. versionadded:: 0.19\\n           SAGA solver.\\n\\n    max_iter : int, optional\\n        Maximum number of iterations for conjugate gradient solver.\\n        For the 'sparse_cg' and 'lsqr' solvers, the default value is determined\\n        by scipy.sparse.linalg. For 'sag' and saga solver, the default value is\\n        1000.\\n\\n    tol : float\\n        Precision of the solution.\\n\\n    verbose : int\\n        Verbosity level. Setting verbose > 0 will display additional\\n        information depending on the solver used.\\n\\n    random_state : int, RandomState instance or None, optional, default None\\n        The seed of the pseudo random number generator to use when shuffling\\n        the data.  If int, random_state is the seed used by the random number\\n        generator; If RandomState instance, random_state is the random number\\n        generator; If None, the random number generator is the RandomState\\n        instance used by `np.random`. Used when ``solver`` == 'sag'.\\n\\n    return_n_iter : boolean, default False\\n        If True, the method also returns `n_iter`, the actual number of\\n        iteration performed by the solver.\\n\\n        .. versionadded:: 0.17\\n\\n    return_intercept : boolean, default False\\n        If True and if X is sparse, the method also returns the intercept,\\n        and the solver is automatically changed to 'sag'. This is only a\\n        temporary fix for fitting the intercept with sparse data. For dense\\n        data, use sklearn.linear_model._preprocess_data before your regression.\\n\\n        .. versionadded:: 0.17\\n\\n    Returns\\n    -------\\n    coef : array, shape = [n_features] or [n_targets, n_features]\\n        Weight vector(s).\\n\\n    n_iter : int, optional\\n        The actual number of iteration performed by the solver.\\n        Only returned if `return_n_iter` is True.\\n\\n    intercept : float or array, shape = [n_targets]\\n        The intercept of the model. Only returned if `return_intercept`\\n        is True and if X is a scipy sparse array.\\n\\n    Notes\\n    -----\\n    This function won't compute the intercept.\\n    \",\n      inputs: [\n        {\n          name: 'X',\n          default_value: null,\n          param_type: ['LIST_VALID_OPTIONS', 'array'],\n          expected_shape: null,\n          docstring: 'shape = [n_samples, n_features] Training data',\n          is_optional: false,\n          options: ['array-like', ' sparse matrix', ' LinearOperator}', '']\n        },\n        {\n          name: 'y',\n          default_value: null,\n          param_type: ['array'],\n          expected_shape: '[n_samples] or [n_samples, n_targets]',\n          docstring: 'Target values',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'alpha',\n          default_value: null,\n          param_type: ['LIST_VALID_OPTIONS', 'array', 'float'],\n          expected_shape: null,\n          docstring:\n            'shape = [n_targets] if array-like Regularization strength; must be a positive float. Regularization improves the conditioning of the problem and reduces the variance of the estimates. Larger values specify stronger regularization. Alpha corresponds to ``C^-1`` in other linear models such as LogisticRegression or LinearSVC. If an array is passed, penalties are assumed to be specific to the targets. Hence they must correspond in number.',\n          is_optional: false,\n          options: ['float', ' array-like}', '']\n        },\n        {\n          name: 'sample_weight',\n          default_value: null,\n          param_type: ['array', 'float'],\n          expected_shape: '[n_samples]',\n          docstring:\n            \"Individual weights for each sample. If sample_weight is not None and solver='auto', the solver will be set to 'cholesky'.  .. versionadded:: 0.17\",\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'solver',\n          default_value: null,\n          param_type: ['LIST_VALID_OPTIONS'],\n          expected_shape: null,\n          docstring:\n            \"Solver to use in the computational routines:  - 'auto' chooses the solver automatically based on the type of data.  - 'svd' uses a Singular Value Decomposition of X to compute the Ridge   coefficients. More stable for singular matrices than   'cholesky'.  - 'cholesky' uses the standard scipy.linalg.solve function to   obtain a closed-form solution via a Cholesky decomposition of   dot(X.T, X)  - 'sparse_cg' uses the conjugate gradient solver as found in   scipy.sparse.linalg.cg. As an iterative algorithm, this solver is   more appropriate than 'cholesky' for large-scale data   (possibility to set `tol` and `max_iter`).  - 'lsqr' uses the dedicated regularized least-squares routine   scipy.sparse.linalg.lsqr. It is the fastest and uses an iterative   procedure.  - 'sag' uses a Stochastic Average Gradient descent, and 'saga' uses   its improved, unbiased version named SAGA. Both methods also use an   iterative procedure, and are often faster than other solvers when   both n_samples and n_features are large. Note that 'sag' and   'saga' fast convergence is only guaranteed on features with   approximately the same scale. You can preprocess the data with a   scaler from sklearn.preprocessing.  All last five solvers support both dense and sparse data. However, only 'sag' and 'saga' supports sparse input when`fit_intercept` is True.  .. versionadded:: 0.17    Stochastic Average Gradient descent solver. .. versionadded:: 0.19    SAGA solver.\",\n          is_optional: false,\n          options: [\n            'auto',\n            \" 'svd\",\n            \" 'cholesky\",\n            \" 'lsqr\",\n            \" 'sparse_cg\",\n            \" 'sag\",\n            \" 'saga\"\n          ]\n        },\n        {\n          name: 'max_iter',\n          default_value: null,\n          param_type: ['int'],\n          expected_shape: null,\n          docstring:\n            \"Maximum number of iterations for conjugate gradient solver. For the 'sparse_cg' and 'lsqr' solvers, the default value is determined by scipy.sparse.linalg. For 'sag' and saga solver, the default value is 1000.\",\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'tol',\n          default_value: null,\n          param_type: ['float'],\n          expected_shape: null,\n          docstring: 'Precision of the solution.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'verbose',\n          default_value: null,\n          param_type: ['int'],\n          expected_shape: null,\n          docstring:\n            'Verbosity level. Setting verbose > 0 will display additional information depending on the solver used.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'random_state',\n          default_value: 'None',\n          param_type: ['int', null],\n          expected_shape: null,\n          docstring:\n            \"The seed of the pseudo random number generator to use when shuffling the data.  If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`. Used when ``solver`` == 'sag'.\",\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'return_n_iter',\n          default_value: 'False',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'If True, the method also returns `n_iter`, the actual number of iteration performed by the solver.  .. versionadded:: 0.17',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'return_intercept',\n          default_value: 'False',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            \"If True and if X is sparse, the method also returns the intercept, and the solver is automatically changed to 'sag'. This is only a temporary fix for fitting the intercept with sparse data. For dense data, use sklearn.linear_model._preprocess_data before your regression.  .. versionadded:: 0.17\",\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ]\n    }\n  ],\n  nodes: [\n    {\n      name: 'ElasticNet',\n      outputs: [\n        {\n          name: 'coef_',\n          returned: false,\n          param_type: ['array'],\n          docstring: 'parameter vector (w in the cost function formula)'\n        },\n        {\n          name: 'sparse_coef_',\n          returned: false,\n          param_type: ['scipy.sparse.matrix'],\n          docstring:\n            '``sparse_coef_`` is a readonly property derived from ``coef_``'\n        },\n        {\n          name: 'intercept_',\n          returned: false,\n          param_type: ['array', 'float'],\n          docstring: 'independent term in decision function.'\n        },\n        {\n          name: 'n_iter_',\n          returned: false,\n          param_type: ['array'],\n          docstring:\n            'number of iterations run by the coordinate descent solver to reach the specified tolerance.'\n        }\n      ],\n      docstring:\n        'Linear regression with combined L1 and L2 priors as regularizer.\\n\\n    Minimizes the objective function::\\n\\n            1 / (2 * n_samples) * ||y - Xw||^2_2\\n            + alpha * l1_ratio * ||w||_1\\n            + 0.5 * alpha * (1 - l1_ratio) * ||w||^2_2\\n\\n    If you are interested in controlling the L1 and L2 penalty\\n    separately, keep in mind that this is equivalent to::\\n\\n            a * L1 + b * L2\\n\\n    where::\\n\\n            alpha = a + b and l1_ratio = a / (a + b)\\n\\n    The parameter l1_ratio corresponds to alpha in the glmnet R package while\\n    alpha corresponds to the lambda parameter in glmnet. Specifically, l1_ratio\\n    = 1 is the lasso penalty. Currently, l1_ratio <= 0.01 is not reliable,\\n    unless you supply your own sequence of alpha.',\n      inputs: [\n        {\n          name: 'alpha',\n          default_value: '1.0',\n          param_type: ['float'],\n          expected_shape: null,\n          docstring:\n            'Constant that multiplies the penalty terms. Defaults to 1.0. See the notes for the exact mathematical meaning of this parameter.``alpha = 0`` is equivalent to an ordinary least square, solved by the :class:`LinearRegression` object. For numerical reasons, using ``alpha = 0`` with the ``Lasso`` object is not advised. Given this, you should use the :class:`LinearRegression` object.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'l1_ratio',\n          default_value: null,\n          param_type: ['float'],\n          expected_shape: null,\n          docstring:\n            'The ElasticNet mixing parameter, with ``0 <= l1_ratio <= 1``. For ``l1_ratio = 0`` the penalty is an L2 penalty. ``For l1_ratio = 1`` it is an L1 penalty.  For ``0 < l1_ratio < 1``, the penalty is a combination of L1 and L2.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'fit_intercept',\n          default_value: null,\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'Whether the intercept should be estimated or not. If ``False``, the data is assumed to be already centered.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'normalize',\n          default_value: 'False',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'precompute',\n          default_value: null,\n          param_type: ['bool', 'array'],\n          expected_shape: null,\n          docstring:\n            'Whether to use a precomputed Gram matrix to speed up calculations. The Gram matrix can also be passed as argument. For sparse input this option is always ``True`` to preserve sparsity.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'max_iter',\n          default_value: null,\n          param_type: ['int'],\n          expected_shape: null,\n          docstring: 'The maximum number of iterations',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'copy_X',\n          default_value: 'True',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'If ``True``, X will be copied; else, it may be overwritten.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'tol',\n          default_value: null,\n          param_type: ['float'],\n          expected_shape: null,\n          docstring:\n            'The tolerance for the optimization: if the updates are smaller than ``tol``, the optimization code checks the dual gap for optimality and continues until it is smaller than ``tol``.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'warm_start',\n          default_value: false,\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'When set to ``True``, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. See :term:`the Glossary <warm_start>`.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'positive',\n          default_value: false,\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'When set to ``True``, forces the coefficients to be positive.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'selection',\n          default_value: 'cyclic',\n          param_type: ['str'],\n          expected_shape: null,\n          docstring:\n            \"If set to 'random', a random coefficient is updated every iteration rather than looping over features sequentially by default. This (setting to 'random') often leads to significantly faster convergence especially when tol is higher than 1e-4.\",\n          is_optional: true,\n          options: ['random', 'cyclic']\n        }\n      ],\n      node_functions: [\n        {\n          name: '__init__',\n          outputs: [],\n          docstring: 'None',\n          inputs: []\n        },\n        {\n          name: '_decision_function',\n          outputs: [\n            {\n              name: 'T',\n              returned: true,\n              param_type: ['array'],\n              docstring: 'The predicted decision function'\n            }\n          ],\n          docstring:\n            'Decision function of the linear model\\n\\n        Parameters\\n        ----------\\n        X : numpy array or scipy.sparse matrix of shape (n_samples, n_features)\\n\\n        Returns\\n        -------\\n        T : array, shape (n_samples,)\\n            The predicted decision function\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              docstring: '',\n              is_optional: false,\n              options: null\n            }\n          ]\n        },\n        {\n          name: '_get_param_names',\n          outputs: [],\n          docstring: 'Get parameter names for the estimator',\n          inputs: []\n        },\n        {\n          name: '_preprocess_data',\n          outputs: [],\n          docstring:\n            '\\n    Centers data to have mean zero along axis 0. If fit_intercept=False or if\\n    the X is a sparse matrix, no centering is done, but normalization can still\\n    be applied. The function returns the statistics necessary to reconstruct\\n    the input data, which are X_offset, y_offset, X_scale, such that the output\\n\\n        X = (X - X_offset) / X_scale\\n\\n    X_scale is the L2 norm of X - X_offset. If sample_weight is not None,\\n    then the weighted mean of X and y is zero, and not the mean itself. If\\n    return_mean=True, the mean, eventually weighted, is returned, independently\\n    of whether X was centered (option used for optimization with sparse data in\\n    coordinate_descend).\\n\\n    This is here because nearly all linear models will want their data to be\\n    centered. This function also systematically makes y consistent with X.dtype\\n    ',\n          inputs: []\n        },\n        {\n          name: '_set_intercept',\n          outputs: [],\n          docstring: 'Set the intercept_\\n        ',\n          inputs: []\n        },\n        {\n          name: 'fit',\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring: 'Fit model with coordinate descent.',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: null,\n              docstring: 'Data',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'y',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples,) or (n_samples, n_targets)',\n              docstring: \"Target. Will be cast to X's dtype if necessary\",\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'check_input',\n              default_value: 'True',\n              param_type: ['bool'],\n              expected_shape: null,\n              docstring:\n                \"Allow to bypass several input checking. Don't use this parameter unless you know what you do.\",\n              is_optional: true,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        },\n        {\n          name: 'predict',\n          outputs: [\n            {\n              name: 'C',\n              returned: true,\n              param_type: ['array'],\n              docstring: 'Returns predicted values.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring: 'Predict using the linear model',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              docstring: 'Samples.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        },\n        {\n          name: 'score',\n          outputs: [\n            {\n              name: 'score',\n              returned: true,\n              param_type: ['float'],\n              docstring: 'R^2 of self.predict(X) wrt. y.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring:\n            'Returns the coefficient of determination R^2 of the prediction.\\n\\n        The coefficient R^2 is defined as (1 - u/v), where u is the residual\\n        sum of squares ((y_true - y_pred) ** 2).sum() and v is the total\\n        sum of squares ((y_true - y_true.mean()) ** 2).sum().\\n        The best possible score is 1.0 and it can be negative (because the\\n        model can be arbitrarily worse). A constant model that always\\n        predicts the expected value of y, disregarding the input features,\\n        would get a R^2 score of 0.0.',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              docstring:\n                'Test samples. For some estimators this may be a precomputed kernel matrix instead, shape = (n_samples, n_samples_fitted], where n_samples_fitted is the number of samples used in the fitting for the estimator.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'y',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples) or (n_samples, n_outputs)',\n              docstring: 'True values for X.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'sample_weight',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '[n_samples], optional',\n              docstring: 'Sample weights.',\n              is_optional: true,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'Lasso',\n      outputs: [\n        {\n          name: 'coef_',\n          returned: false,\n          param_type: ['array'],\n          docstring: 'parameter vector (w in the cost function formula)'\n        },\n        {\n          name: 'sparse_coef_',\n          returned: false,\n          param_type: ['scipy.sparse.matrix'],\n          docstring:\n            '``sparse_coef_`` is a readonly property derived from ``coef_``'\n        },\n        {\n          name: 'intercept_',\n          returned: false,\n          param_type: ['array', 'float'],\n          docstring: 'independent term in decision function.'\n        },\n        {\n          name: 'n_iter_',\n          returned: false,\n          param_type: ['array', 'int'],\n          docstring:\n            'number of iterations run by the coordinate descent solver to reach the specified tolerance.'\n        }\n      ],\n      docstring:\n        'Linear Model trained with L1 prior as regularizer (aka the Lasso)\\n\\n    The optimization objective for Lasso is::\\n\\n        (1 / (2 * n_samples)) * ||y - Xw||^2_2 + alpha * ||w||_1\\n\\n    Technically the Lasso model is optimizing the same objective function as\\n    the Elastic Net with ``l1_ratio=1.0`` (no L2 penalty).',\n      inputs: [\n        {\n          name: 'alpha',\n          default_value: '1.0',\n          param_type: ['float'],\n          expected_shape: null,\n          docstring:\n            'Constant that multiplies the L1 term. Defaults to 1.0. ``alpha = 0`` is equivalent to an ordinary least square, solved by the :class:`LinearRegression` object. For numerical reasons, using ``alpha = 0`` with the ``Lasso`` object is not advised. Given this, you should use the :class:`LinearRegression` object.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'fit_intercept',\n          default_value: 'True',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'Whether to calculate the intercept for this model. If set to False, no intercept will be used in calculations (e.g. data is expected to be already centered).',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'normalize',\n          default_value: 'False',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'precompute',\n          default_value: 'False',\n          param_type: ['bool', 'array'],\n          expected_shape: null,\n          docstring:\n            \"Whether to use a precomputed Gram matrix to speed up calculations. If set to ``'auto'`` let us decide. The Gram matrix can also be passed as argument. For sparse input this option is always ``True`` to preserve sparsity.\",\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'copy_X',\n          default_value: 'True',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'If ``True``, X will be copied; else, it may be overwritten.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'max_iter',\n          default_value: null,\n          param_type: ['int'],\n          expected_shape: null,\n          docstring: 'The maximum number of iterations',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'tol',\n          default_value: null,\n          param_type: ['float'],\n          expected_shape: null,\n          docstring:\n            'The tolerance for the optimization: if the updates are smaller than ``tol``, the optimization code checks the dual gap for optimality and continues until it is smaller than ``tol``.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'warm_start',\n          default_value: null,\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. See :term:`the Glossary <warm_start>`.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'positive',\n          default_value: null,\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'When set to ``True``, forces the coefficients to be positive.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'selection',\n          default_value: 'cyclic',\n          param_type: ['LIST_VALID_OPTIONS'],\n          expected_shape: null,\n          docstring:\n            \"If set to 'random', a random coefficient is updated every iteration rather than looping over features sequentially by default. This (setting to 'random') often leads to significantly faster convergence especially when tol is higher than 1e-4.\",\n          is_optional: true,\n          options: ['random', 'cyclic']\n        }\n      ],\n      node_functions: [\n        {\n          name: '__init__',\n          outputs: [],\n          docstring: 'None',\n          inputs: []\n        },\n        {\n          name: '_decision_function',\n          outputs: [\n            {\n              name: 'T',\n              returned: true,\n              param_type: ['array'],\n              docstring: 'The predicted decision function'\n            }\n          ],\n          docstring:\n            'Decision function of the linear model\\n\\n        Parameters\\n        ----------\\n        X : numpy array or scipy.sparse matrix of shape (n_samples, n_features)\\n\\n        Returns\\n        -------\\n        T : array, shape (n_samples,)\\n            The predicted decision function\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              docstring: '',\n              is_optional: false,\n              options: null\n            }\n          ]\n        },\n        {\n          name: '_get_param_names',\n          outputs: [],\n          docstring: 'Get parameter names for the estimator',\n          inputs: []\n        },\n        {\n          name: '_preprocess_data',\n          outputs: [],\n          docstring:\n            '\\n    Centers data to have mean zero along axis 0. If fit_intercept=False or if\\n    the X is a sparse matrix, no centering is done, but normalization can still\\n    be applied. The function returns the statistics necessary to reconstruct\\n    the input data, which are X_offset, y_offset, X_scale, such that the output\\n\\n        X = (X - X_offset) / X_scale\\n\\n    X_scale is the L2 norm of X - X_offset. If sample_weight is not None,\\n    then the weighted mean of X and y is zero, and not the mean itself. If\\n    return_mean=True, the mean, eventually weighted, is returned, independently\\n    of whether X was centered (option used for optimization with sparse data in\\n    coordinate_descend).\\n\\n    This is here because nearly all linear models will want their data to be\\n    centered. This function also systematically makes y consistent with X.dtype\\n    ',\n          inputs: []\n        },\n        {\n          name: '_set_intercept',\n          outputs: [],\n          docstring: 'Set the intercept_\\n        ',\n          inputs: []\n        },\n        {\n          name: 'fit',\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring: 'Fit model with coordinate descent.',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              docstring: 'Data',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'y',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples,) or (n_samples, n_targets)',\n              docstring: \"Target. Will be cast to X's dtype if necessary\",\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'check_input',\n              default_value: 'True',\n              param_type: ['bool'],\n              expected_shape: null,\n              docstring:\n                \"Allow to bypass several input checking. Don't use this parameter unless you know what you do.\",\n              is_optional: true,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        },\n        {\n          name: 'predict',\n          outputs: [\n            {\n              name: 'C',\n              returned: true,\n              param_type: ['array'],\n              docstring: 'Returns predicted values.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring:\n            'Predict using the linear model\\n\\n        Parameters\\n        ----------\\n        X : array_like or sparse matrix, shape (n_samples, n_features)\\n            Samples.\\n\\n        Returns\\n        -------\\n        C : array, shape (n_samples,)\\n            Returns predicted values.\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              docstring: 'Samples.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        },\n        {\n          name: 'score',\n          outputs: [\n            {\n              name: 'score',\n              returned: true,\n              param_type: ['float'],\n              docstring: 'R^2 of self.predict(X) wrt. y.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring:\n            'Returns the coefficient of determination R^2 of the prediction.\\n\\n        The coefficient R^2 is defined as (1 - u/v), where u is the residual\\n        sum of squares ((y_true - y_pred) ** 2).sum() and v is the total\\n        sum of squares ((y_true - y_true.mean()) ** 2).sum().\\n        The best possible score is 1.0 and it can be negative (because the\\n        model can be arbitrarily worse). A constant model that always\\n        predicts the expected value of y, disregarding the input features,\\n        would get a R^2 score of 0.0.',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              docstring: 'Test samples.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'y',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples) or (n_samples, n_outputs)',\n              docstring: 'True values for X.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'sample_weight',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '[n_samples], optional',\n              docstring: 'Sample weights.',\n              is_optional: true,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'LinearRegression',\n      outputs: [\n        {\n          name: 'coef_',\n          returned: false,\n          param_type: ['array'],\n          docstring:\n            'Estimated coefficients for the linear regression problem. If multiple targets are passed during the fit (y 2D), this is a 2D array of shape (n_targets, n_features), while if only one target is passed, this is a 1D array of length n_features.'\n        },\n        {\n          name: 'intercept_',\n          returned: false,\n          param_type: ['array'],\n          docstring: 'Independent term in the linear model.'\n        }\n      ],\n      docstring: 'Ordinary least squares Linear Regression.',\n      inputs: [\n        {\n          name: 'fit_intercept',\n          default_value: 'True',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'whether to calculate the intercept for this model. If set to False, no intercept will be used in calculations (e.g. data is expected to be already centered).',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'normalize',\n          default_value: 'False',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'copy_X',\n          default_value: 'True',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring: 'If True, X will be copied; else, it may be overwritten.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'n_jobs',\n          default_value: 'None',\n          param_type: ['int', null],\n          expected_shape: null,\n          docstring:\n            'The number of jobs to use for the computation. This will only provide speedup for n_targets > 1 and sufficient large problems. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.',\n          is_optional: true,\n          options: null\n        }\n      ],\n      node_functions: [\n        {\n          name: '__init__',\n          outputs: [],\n          docstring: 'None',\n          inputs: []\n        },\n        {\n          name: '_decision_function',\n          outputs: [],\n          docstring: 'None',\n          inputs: []\n        },\n        {\n          name: '_get_param_names',\n          outputs: [],\n          docstring: 'Get parameter names for the estimator',\n          inputs: []\n        },\n        {\n          name: '_preprocess_data',\n          outputs: [],\n          docstring:\n            '\\n    Centers data to have mean zero along axis 0. If fit_intercept=False or if\\n    the X is a sparse matrix, no centering is done, but normalization can still\\n    be applied. The function returns the statistics necessary to reconstruct\\n    the input data, which are X_offset, y_offset, X_scale, such that the output\\n\\n        X = (X - X_offset) / X_scale\\n\\n    X_scale is the L2 norm of X - X_offset. If sample_weight is not None,\\n    then the weighted mean of X and y is zero, and not the mean itself. If\\n    return_mean=True, the mean, eventually weighted, is returned, independently\\n    of whether X was centered (option used for optimization with sparse data in\\n    coordinate_descend).\\n\\n    This is here because nearly all linear models will want their data to be\\n    centered. This function also systematically makes y consistent with X.dtype\\n    ',\n          inputs: []\n        },\n        {\n          name: '_set_intercept',\n          outputs: [],\n          docstring: 'Set the intercept_\\n        ',\n          inputs: []\n        },\n        {\n          name: 'fit',\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring: 'Fit linear model',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              docstring: 'Training data',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'y',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_targets)',\n              docstring:\n                \"Target values. Will be cast to X's dtype if necessary\",\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'sample_weight',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '[n_samples]',\n              docstring:\n                'Individual weights for each sample  .. versionadded:: 0.17    parameter *sample_weight* support to LinearRegression.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        },\n        {\n          name: 'predict',\n          outputs: [\n            {\n              name: 'C',\n              returned: true,\n              param_type: ['array'],\n              docstring: 'Returns predicted values.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring: 'Predict using the linear model',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              docstring: 'Samples.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        },\n        {\n          name: 'score',\n          outputs: [\n            {\n              name: 'score',\n              returned: true,\n              param_type: ['float'],\n              docstring: 'R^2 of self.predict(X) wrt. y.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring:\n            'Returns the coefficient of determination R^2 of the prediction.\\n\\n        The coefficient R^2 is defined as (1 - u/v), where u is the residual\\n        sum of squares ((y_true - y_pred) ** 2).sum() and v is the total\\n        sum of squares ((y_true - y_true.mean()) ** 2).sum().\\n        The best possible score is 1.0 and it can be negative (because the\\n        model can be arbitrarily worse). A constant model that always\\n        predicts the expected value of y, disregarding the input features,\\n        would get a R^2 score of 0.0.',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              docstring:\n                'Test samples. For some estimators this may be a precomputed kernel matrix instead, shape = (n_samples, n_samples_fitted], where n_samples_fitted is the number of samples used in the fitting for the estimator.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'y',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples) or (n_samples, n_outputs)',\n              docstring: 'True values for X.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'sample_weight',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '[n_samples], optional',\n              docstring: 'Sample weights.',\n              is_optional: true,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'LogisticRegression',\n      outputs: [\n        {\n          name: 'classes_',\n          returned: false,\n          param_type: ['array'],\n          docstring: 'A list of class labels known to the classifier.'\n        },\n        {\n          name: 'coef_',\n          returned: false,\n          param_type: ['array'],\n          docstring:\n            \"Coefficient of the features in the decision function.  `coef_` is of shape (1, n_features) when the given problem is binary. In particular, when `multi_class='multinomial'`, `coef_` corresponds to outcome 1 (True) and `-coef_` corresponds to outcome 0 (False).\"\n        },\n        {\n          name: 'intercept_',\n          returned: false,\n          param_type: ['array'],\n          docstring:\n            \"Intercept (a.k.a. bias) added to the decision function.  If `fit_intercept` is set to False, the intercept is set to zero. `intercept_` is of shape (1,) when the given problem is binary. In particular, when `multi_class='multinomial'`, `intercept_` corresponds to outcome 1 (True) and `-intercept_` corresponds to outcome 0 (False).\"\n        },\n        {\n          name: 'n_iter_',\n          returned: false,\n          param_type: ['array'],\n          docstring:\n            'Actual number of iterations for all classes. If binary or multinomial, it returns only 1 element. For liblinear solver, only the maximum number of iteration across all classes is given.  .. versionchanged:: 0.20      In SciPy <= 1.0.0 the number of lbfgs iterations may exceed     ``max_iter``. ``n_iter_`` will now report at most ``max_iter``.'\n        }\n      ],\n      docstring:\n        \"Logistic Regression (aka logit, MaxEnt) classifier.\\n\\n    In the multiclass case, the training algorithm uses the one-vs-rest (OvR)\\n    scheme if the 'multi_class' option is set to 'ovr', and uses the cross-\\n    entropy loss if the 'multi_class' option is set to 'multinomial'.\\n    (Currently the 'multinomial' option is supported only by the 'lbfgs',\\n    'sag' and 'newton-cg' solvers.)\\n\\n    This class implements regularized logistic regression using the\\n    'liblinear' library, 'newton-cg', 'sag' and 'lbfgs' solvers. It can handle\\n    both dense and sparse input. Use C-ordered arrays or CSR matrices\\n    containing 64-bit floats for optimal performance; any other input format\\n    will be converted (and copied).\\n\\n    The 'newton-cg', 'sag', and 'lbfgs' solvers support only L2 regularization\\n    with primal formulation. The 'liblinear' solver supports both L1 and L2\\n    regularization, with a dual formulation only for the L2 penalty.\",\n      inputs: [\n        {\n          name: 'penalty',\n          default_value: 'l2',\n          param_type: ['LIST_VALID_OPTIONS'],\n          expected_shape: null,\n          docstring:\n            \"Used to specify the norm used in the penalization. The 'newton-cg', 'sag' and 'lbfgs' solvers support only l2 penalties.  .. versionadded:: 0.19    l1 penalty with SAGA solver (allowing 'multinomial' + L1)\",\n          is_optional: true,\n          options: ['l1', 'l2', 'elasticnet', 'none']\n        },\n        {\n          name: 'dual',\n          default_value: 'False',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'Dual or primal formulation. Dual formulation is only implemented for l2 penalty with liblinear solver. Prefer dual=False when n_samples > n_features.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'tol',\n          default_value: '1e-4',\n          param_type: ['float'],\n          expected_shape: null,\n          docstring: 'Tolerance for stopping criteria.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'C',\n          default_value: '1.0',\n          param_type: ['float'],\n          expected_shape: null,\n          docstring:\n            'Inverse of regularization strength; must be a positive float. Like in support vector machines, smaller values specify stronger regularization.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'fit_intercept',\n          default_value: 'True',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'Specifies if a constant (a.k.a. bias or intercept) should be added to the decision function.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'intercept_scaling',\n          default_value: '1.',\n          param_type: ['float'],\n          expected_shape: null,\n          docstring:\n            'Useful only when the solver \\'liblinear\\' is used and self.fit_intercept is set to True. In this case, x becomes [x, self.intercept_scaling], i.e. a \"synthetic\" feature with constant value equal to intercept_scaling is appended to the instance vector. The intercept becomes ``intercept_scaling * synthetic_feature_weight``.  Note! the synthetic feature weight is subject to l1/l2 regularization as all other features. To lessen the effect of regularization on synthetic feature weight (and therefore on the intercept) intercept_scaling has to be increased.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'class_weight',\n          default_value: 'None',\n          param_type: ['dict', 'str', null],\n          expected_shape: null,\n          docstring:\n            'Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one.  The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``.  Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'solver',\n          default_value: 'liblinear.',\n          param_type: ['LIST_VALID_OPTIONS'],\n          expected_shape: null,\n          docstring:\n            \"Algorithm to use in the optimization problem.  - For small datasets, 'liblinear' is a good choice, whereas 'sag' and   'saga' are faster for large ones. - For multiclass problems, only 'newton-cg', 'sag', 'saga' and 'lbfgs'   handle multinomial loss; 'liblinear' is limited to one-versus-rest   schemes. - 'newton-cg', 'lbfgs' and 'sag' only handle L2 penalty, whereas   'liblinear' and 'saga' handle L1 penalty.  Note that 'sag' and 'saga' fast convergence is only guaranteed on features with approximately the same scale. You can preprocess the data with a scaler from sklearn.preprocessing.\",\n          is_optional: true,\n          options: ['newton-cg', 'lbfgs', 'liblinear', 'sag', \"saga'}\"]\n        },\n        {\n          name: 'max_iter',\n          default_value: '100',\n          param_type: ['int'],\n          expected_shape: null,\n          docstring:\n            'Useful only for the newton-cg, sag and lbfgs solvers. Maximum number of iterations taken for the solvers to converge.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'multi_class',\n          default_value: 'ovr',\n          param_type: ['LIST_VALID_OPTIONS'],\n          expected_shape: null,\n          docstring:\n            \"If the option chosen is 'ovr', then a binary problem is fit for each label. For 'multinomial' the loss minimised is the multinomial loss fit across the entire probability distribution, *even when the data is binary*. 'multinomial' is unavailable when solver='liblinear'. 'auto' selects 'ovr' if the data is binary, or if solver='liblinear', and otherwise selects 'multinomial'.\",\n          is_optional: true,\n          options: ['ovr', 'multinomial', 'auto']\n        },\n        {\n          name: 'verbose',\n          default_value: '0',\n          param_type: ['int'],\n          expected_shape: null,\n          docstring:\n            'For the liblinear and lbfgs solvers set verbose to any positive number for verbosity.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'warm_start',\n          default_value: 'False',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. Useless for liblinear solver.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'n_jobs',\n          default_value: 'None',\n          param_type: ['int', null],\n          expected_shape: null,\n          docstring:\n            \"Number of CPU cores used when parallelizing over classes if multi_class='ovr'\\\". This parameter is ignored when the ``solver`` is set to 'liblinear' regardless of whether 'multi_class' is specified or not. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.\",\n          is_optional: true,\n          options: null\n        }\n      ],\n      node_functions: [\n        {\n          name: '__init__',\n          outputs: [],\n          docstring: 'None',\n          inputs: []\n        },\n        {\n          name: '_get_param_names',\n          outputs: [],\n          docstring: 'Get parameter names for the estimator',\n          inputs: []\n        },\n        {\n          name: '_predict_proba_lr',\n          outputs: [],\n          docstring:\n            'Probability estimation for OvR logistic regression.\\n\\n        Positive class probabilities are computed as\\n        1. / (1. + np.exp(-self.decision_function(X)));\\n        multiclass is handled by normalizing that over all classes.\\n        ',\n          inputs: []\n        },\n        {\n          name: 'decision_function',\n          outputs: [\n            {\n              name:\n                'array, shape=(n_samples,) if n_classes == 2 else (n_samples, n_classes)',\n              returned: true,\n              param_type: [null],\n              docstring:\n                'Confidence scores per (sample, class) combination. In the binary case, confidence score for self.classes_[1] where >0 means this class would be predicted.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring:\n            'Predict confidence scores for samples.\\n\\n        The confidence score for a sample is the signed distance of that\\n        sample to the hyperplane.\\n\\n        Parameters\\n        ----------\\n        X : array_like or sparse matrix, shape (n_samples, n_features)\\n            Samples.\\n\\n        Returns\\n        -------\\n        array, shape=(n_samples,) if n_classes == 2 else (n_samples, n_classes)\\n            Confidence scores per (sample, class) combination. In the binary\\n            case, confidence score for self.classes_[1] where >0 means this\\n            class would be predicted.\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              docstring: 'Samples.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        },\n        {\n          name: 'fit',\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring: 'Fit the model according to the given training data.',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              docstring:\n                'Training vector, where n_samples is the number of samples and n_features is the number of features.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'y',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples,)',\n              docstring: 'Target vector relative to X.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'sample_weight',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples,) optional',\n              docstring:\n                'Array of weights that are assigned to individual samples. If not provided, then each sample is given unit weight.',\n              is_optional: true,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        },\n        {\n          name: 'predict',\n          outputs: [\n            {\n              name: 'C',\n              returned: true,\n              param_type: ['array'],\n              docstring: 'Predicted class label per sample.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring: 'Predict class labels for samples in X.',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              docstring: 'Samples.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        },\n        {\n          name: 'predict_log_proba',\n          outputs: [\n            {\n              name: 'T',\n              returned: true,\n              param_type: ['array'],\n              docstring:\n                'Returns the log-probability of the sample for each class in the model, where classes are ordered as they are in ``classes_``.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring:\n            'Log of probability estimates.\\n\\n        The returned estimates for all classes are ordered by the\\n        label of classes.',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              docstring: '',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        },\n        {\n          name: 'predict_proba',\n          outputs: [\n            {\n              name: 'T',\n              returned: true,\n              param_type: ['array'],\n              docstring:\n                'Returns the probability of the sample for each class in the model, where classes are ordered as they are in ``classes_``.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring:\n            'Probability estimates.\\n\\n        The returned estimates for all classes are ordered by the\\n        label of classes.\\n\\n        For a multi_class problem, if multi_class is set to be \"multinomial\"\\n        the softmax function is used to find the predicted probability of\\n        each class.\\n        Else use a one-vs-rest approach, i.e calculate the probability\\n        of each class assuming it to be positive using the logistic function.\\n        and normalize these values across all the classes.',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              docstring: '',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        },\n        {\n          name: 'score',\n          outputs: [\n            {\n              name: 'score',\n              returned: true,\n              param_type: ['float'],\n              docstring: 'Mean accuracy of self.predict(X) wrt. y.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring:\n            'Returns the mean accuracy on the given test data and labels.\\n\\n        In multi-label classification, this is the subset accuracy\\n        which is a harsh metric since you require for each sample that\\n        each label set be correctly predicted.',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              docstring: 'Test samples.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'y',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples) or (n_samples, n_outputs)',\n              docstring: 'True labels for X.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'sample_weight',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '[n_samples]',\n              docstring: 'Sample weights.',\n              is_optional: true,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'Ridge',\n      outputs: [\n        {\n          name: 'coef_',\n          returned: false,\n          param_type: ['array'],\n          docstring: 'Weight vector(s).'\n        },\n        {\n          name: 'intercept_',\n          returned: false,\n          param_type: ['LIST_VALID_OPTIONS', 'array', 'float'],\n          docstring:\n            'Independent term in decision function. Set to 0.0 if ``fit_intercept = False``.'\n        },\n        {\n          name: 'n_iter_',\n          returned: false,\n          param_type: ['array', null],\n          docstring:\n            'Actual number of iterations for each target. Available only for sag and lsqr solvers. Other solvers will return None.  .. versionadded:: 0.17'\n        }\n      ],\n      docstring:\n        'Linear least squares with l2 regularization.\\n\\n    Minimizes the objective function::\\n\\n    ||y - Xw||^2_2 + alpha * ||w||^2_2\\n\\n    This model solves a regression model where the loss function is\\n    the linear least squares function and regularization is given by\\n    the l2-norm. Also known as Ridge Regression or Tikhonov regularization.\\n    This estimator has built-in support for multi-variate regression\\n    (i.e., when y is a 2d-array of shape [n_samples, n_targets]).',\n      inputs: [\n        {\n          name: 'alpha',\n          default_value: null,\n          param_type: ['array', 'float'],\n          expected_shape: '(n_targets)',\n          docstring:\n            'Regularization strength; must be a positive float. Regularization improves the conditioning of the problem and reduces the variance of the estimates. Larger values specify stronger regularization. Alpha corresponds to ``C^-1`` in other linear models such as LogisticRegression or LinearSVC. If an array is passed, penalties are assumed to be specific to the targets. Hence they must correspond in number.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'fit_intercept',\n          default_value: null,\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (e.g. data is expected to be already centered).',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'normalize',\n          default_value: 'False',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring:\n            'This parameter is ignored when ``fit_intercept`` is set to False. If True, the regressors X will be normalized before regression by subtracting the mean and dividing by the l2-norm. If you wish to standardize, please use :class:`sklearn.preprocessing.StandardScaler` before calling ``fit`` on an estimator with ``normalize=False``.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'copy_X',\n          default_value: 'True',\n          param_type: ['bool'],\n          expected_shape: null,\n          docstring: 'If True, X will be copied; else, it may be overwritten.',\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'max_iter',\n          default_value: null,\n          param_type: ['int'],\n          expected_shape: null,\n          docstring:\n            \"Maximum number of iterations for conjugate gradient solver. For 'sparse_cg' and 'lsqr' solvers, the default value is determined by scipy.sparse.linalg. For 'sag' solver, the default value is 1000.\",\n          is_optional: true,\n          options: null\n        },\n        {\n          name: 'tol',\n          default_value: null,\n          param_type: ['float'],\n          expected_shape: null,\n          docstring: 'Precision of the solution.',\n          is_optional: false,\n          options: null\n        },\n        {\n          name: 'solver',\n          default_value: null,\n          param_type: ['LIST_VALID_OPTIONS'],\n          expected_shape: null,\n          docstring:\n            \"Solver to use in the computational routines:  - 'auto' chooses the solver automatically based on the type of data.  - 'svd' uses a Singular Value Decomposition of X to compute the Ridge   coefficients. More stable for singular matrices than   'cholesky'.  - 'cholesky' uses the standard scipy.linalg.solve function to   obtain a closed-form solution.  - 'sparse_cg' uses a conjugate gradient solver. As an iterative algorithm, this solver is   more appropriate than 'cholesky' for large-scale data   (possibility to set `tol` and `max_iter`).  - 'lsqr' uses a dedicated regularized least-squares routine. It is the fastest and uses an iterative   procedure.  - 'sag' uses a Stochastic Average Gradient descent, and 'saga' uses   its improved, unbiased version named SAGA. Both methods also use an   iterative procedure, and are often faster than other solvers when   both n_samples and n_features are large. Note that 'sag' and   'saga' fast convergence is only guaranteed on features with   approximately the same scale. You can preprocess the data with a   scaler from sklearn.preprocessing.\",\n          is_optional: false,\n          options: [\n            'auto',\n            'svd',\n            'cholesky',\n            'lsqr',\n            'sparse_cg',\n            'sag',\n            'saga'\n          ]\n        }\n      ],\n      node_functions: [\n        {\n          name: '__init__',\n          outputs: [],\n          docstring: 'None',\n          inputs: []\n        },\n        {\n          name: '_decision_function',\n          outputs: [],\n          docstring: 'None',\n          inputs: []\n        },\n        {\n          name: '_get_param_names',\n          outputs: [],\n          docstring: 'Get parameter names for the estimator',\n          inputs: []\n        },\n        {\n          name: '_preprocess_data',\n          outputs: [],\n          docstring:\n            '\\n    Centers data to have mean zero along axis 0. If fit_intercept=False or if\\n    the X is a sparse matrix, no centering is done, but normalization can still\\n    be applied. The function returns the statistics necessary to reconstruct\\n    the input data, which are X_offset, y_offset, X_scale, such that the output\\n\\n        X = (X - X_offset) / X_scale\\n\\n    X_scale is the L2 norm of X - X_offset. If sample_weight is not None,\\n    then the weighted mean of X and y is zero, and not the mean itself. If\\n    return_mean=True, the mean, eventually weighted, is returned, independently\\n    of whether X was centered (option used for optimization with sparse data in\\n    coordinate_descend).\\n\\n    This is here because nearly all linear models will want their data to be\\n    centered. This function also systematically makes y consistent with X.dtype\\n    ',\n          inputs: []\n        },\n        {\n          name: '_set_intercept',\n          outputs: [],\n          docstring: 'Set the intercept_\\n        ',\n          inputs: []\n        },\n        {\n          name: 'fit',\n          outputs: [\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring: 'Fit Ridge regression model',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              docstring: 'Training data',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'y',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '[n_samples] or [n_samples, n_targets]',\n              docstring: 'Target values',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'sample_weight',\n              default_value: null,\n              param_type: ['array', 'float'],\n              expected_shape: '[n_samples]',\n              docstring: 'Individual weights for each sample',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        },\n        {\n          name: 'predict',\n          outputs: [\n            {\n              name: 'C',\n              returned: true,\n              param_type: ['array'],\n              docstring: 'Returns predicted values.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring: 'Predict using the linear model',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              docstring: 'Samples.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        },\n        {\n          name: 'score',\n          outputs: [\n            {\n              name: 'score',\n              returned: true,\n              param_type: ['float'],\n              docstring: 'R^2 of self.predict(X) wrt. y.'\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              returned: true\n            }\n          ],\n          docstring:\n            'Returns the coefficient of determination R^2 of the prediction.\\n\\n        The coefficient R^2 is defined as (1 - u/v), where u is the residual\\n        sum of squares ((y_true - y_pred) ** 2).sum() and v is the total\\n        sum of squares ((y_true - y_true.mean()) ** 2).sum().\\n        The best possible score is 1.0 and it can be negative (because the\\n        model can be arbitrarily worse). A constant model that always\\n        predicts the expected value of y, disregarding the input features,\\n        would get a R^2 score of 0.0.',\n          inputs: [\n            {\n              name: 'X',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples, n_features)',\n              docstring: 'Test samples.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'y',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '(n_samples) or (n_samples, n_outputs)',\n              docstring: 'True values for X.',\n              is_optional: false,\n              options: null\n            },\n            {\n              name: 'sample_weight',\n              default_value: null,\n              param_type: ['array'],\n              expected_shape: '[n_samples], optional',\n              docstring: 'Sample weights.',\n              is_optional: true,\n              options: null\n            },\n            {\n              name: 'obj',\n              docstring:\n                'True/False flag to indicate reusing the same instance instead of creating a new one',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: false,\n              options: null\n            }\n          ]\n        }\n      ],\n      nodes: []\n    }\n  ],\n  library: 'sklearn'\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/jsons/sklearnLinearModel.js","export default {\n  name: 'sklearn.metrics',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [],\n  nodes: [\n    {\n      name: 'Regression Metrics',\n      docstring:\n        'Module to provide functions for most common metrics to evaluate Regression Models',\n      inputs: [],\n      outputs: [],\n      node_functions: [\n        {\n          name: 'r2_score',\n          docstring:\n            'R^2 (coefficient of determination) regression score function.\\n\\n    Best possible score is 1.0 and it can be negative (because the\\n    model can be arbitrarily worse). A constant model that always\\n    predicts the expected value of y, disregarding the input features,\\n    would get a R^2 score of 0.0.',\n          inputs: [\n            {\n              name: 'y_true',\n              docstring: 'Ground truth (correct) target values.',\n              param_type: ['array'],\n              expected_shape: '(n_samples) or (n_samples, n_outputs)',\n              is_optional: false,\n              default_value: null\n            },\n            {\n              name: 'y_pred',\n              docstring: 'Estimated target values.',\n              param_type: ['array'],\n              expected_shape: '(n_samples) or (n_samples, n_outputs)',\n              is_optional: false,\n              default_value: null\n            },\n            {\n              name: 'sample_weight',\n              docstring: 'Sample weights.',\n              param_type: ['array'],\n              expected_shape: '(n_samples), optional',\n              is_optional: true,\n              default_value: null\n            },\n            {\n              name: 'multioutput',\n              docstring:\n                \"Defines aggregating of multiple output scores. Array-like value defines weights used to average scores. Default is \\\"uniform_average\\\".  'raw_values' :     Returns a full set of scores in case of multioutput input.  'uniform_average' :     Scores of all outputs are averaged with uniform weight.  'variance_weighted' :     Scores of all outputs are averaged, weighted by the variances     of each individual output.\",\n              param_type: ['array', 'LIST_VALID_OPTIONS', null],\n              expected_shape: '(n_outputs)',\n              is_optional: true,\n              default_value: 'uniform_average',\n              options: ['raw_values', 'uniform_average', 'variance_weighted']\n            }\n          ],\n          outputs: [\n            {\n              name: 'z',\n              docstring:\n                \"The R^2 score or ndarray of scores if 'multioutput' is 'raw_values'.\",\n              param_type: ['array', 'float'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'mean_absolute_error',\n          docstring: 'Mean absolute error regression loss',\n          inputs: [\n            {\n              name: 'y_true',\n              docstring: 'Ground truth (correct) target values.',\n              param_type: ['array'],\n              expected_shape: '(n_samples) or (n_samples, n_outputs)',\n              is_optional: false,\n              default_value: null\n            },\n            {\n              name: 'y_pred',\n              docstring: 'Estimated target values.',\n              param_type: ['array'],\n              expected_shape: '(n_samples) or (n_samples, n_outputs)',\n              is_optional: false,\n              default_value: null\n            },\n            {\n              name: 'sample_weight',\n              docstring: 'Sample weights.',\n              param_type: ['array'],\n              expected_shape: '(n_samples), optional',\n              is_optional: true,\n              default_value: null\n            },\n            {\n              name: 'multioutput',\n              docstring:\n                \"Defines aggregating of multiple output scores. Array-like value defines weights used to average scores. Default is \\\"uniform_average\\\".  'raw_values' :     Returns a full set of scores in case of multioutput input.  'uniform_average' :     Scores of all outputs are averaged with uniform weight.\",\n              param_type: ['array', 'LIST_VALID_OPTIONS', null],\n              expected_shape: '(n_outputs)',\n              is_optional: true,\n              default_value: 'uniform_average',\n              options: ['raw_values', 'uniform_average']\n            }\n          ],\n          outputs: [\n            {\n              name: 'loss',\n              docstring:\n                \"If multioutput is 'raw_values', then mean absolute error is returned for each output separately. If multioutput is 'uniform_average' or an ndarray of weights, then the weighted average of all output errors is returned.  MAE output is non-negative floating point. The best value is 0.0.\",\n              param_type: ['array', 'float'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'mean_squared_error',\n          docstring: 'Mean squared error regression loss',\n          inputs: [\n            {\n              name: 'y_true',\n              docstring: 'Ground truth (correct) target values.',\n              param_type: ['array'],\n              expected_shape: '(n_samples) or (n_samples, n_outputs)',\n              is_optional: false,\n              default_value: null\n            },\n            {\n              name: 'y_pred',\n              docstring: 'Estimated target values.',\n              param_type: ['array'],\n              expected_shape: '(n_samples) or (n_samples, n_outputs)',\n              is_optional: false,\n              default_value: null\n            },\n            {\n              name: 'sample_weight',\n              docstring: 'Sample weights.',\n              param_type: ['array'],\n              expected_shape: '(n_samples), optional',\n              is_optional: true,\n              default_value: null\n            },\n            {\n              name: 'multioutput',\n              docstring:\n                \"Defines aggregating of multiple output scores. Array-like value defines weights used to average scores. Default is \\\"uniform_average\\\".  'raw_values' :     Returns a full set of scores in case of multioutput input.  'uniform_average' :     Scores of all outputs are averaged with uniform weight.\",\n              param_type: ['array', 'LIST_VALID_OPTIONS', null],\n              expected_shape: '(n_outputs)',\n              is_optional: true,\n              default_value: 'uniform_average',\n              options: ['raw_values', 'uniform_average']\n            }\n          ],\n          outputs: [\n            {\n              name: 'loss',\n              docstring:\n                'A non-negative floating point value (the best value is 0.0), or an array of floating point values, one for each individual target.',\n              param_type: ['array', 'float'],\n              returned: true\n            }\n          ]\n        }\n      ],\n      nodes: [],\n      placeholder: true\n    },\n    {\n      name: 'Classification Metrics',\n      docstring:\n        'Module to provide functions for most common metrics to evaluate Classification Models',\n      inputs: [],\n      outputs: [],\n      node_functions: [\n        {\n          name: 'accuracy_score',\n          docstring:\n            'Accuracy classification score.\\n\\n    In multilabel classification, this function computes subset accuracy:\\n    the set of labels predicted for a sample must *exactly* match the\\n    corresponding set of labels in y_true.',\n          inputs: [\n            {\n              name: 'y_true',\n              docstring: 'Ground truth (correct) labels.',\n              param_type: ['array'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            },\n            {\n              name: 'y_pred',\n              docstring: 'Predicted labels, as returned by a classifier.',\n              param_type: ['array'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null\n            },\n            {\n              name: 'normalize',\n              docstring:\n                'If ``False``, return the number of correctly classified samples. Otherwise, return the fraction of correctly classified samples.',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: 'True'\n            },\n            {\n              name: 'sample_weight',\n              docstring: 'Sample weights.',\n              param_type: ['array'],\n              expected_shape: '[n_samples], optional',\n              is_optional: true,\n              default_value: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'score',\n              docstring:\n                'If ``normalize == True``, return the fraction of correctly classified samples (float), else returns the number of correctly classified samples (int).  The best performance is 1 with ``normalize == True`` and the number of samples with ``normalize == False``.',\n              param_type: ['float'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'confusion_matrix',\n          docstring:\n            'Compute confusion matrix to evaluate the accuracy of a classification\\n\\n    By definition a confusion matrix :math:`C` is such that :math:`C_{i, j}`\\n    is equal to the number of observations known to be in group :math:`i` but\\n    predicted to be in group :math:`j`.\\n\\n    Thus in binary classification, the count of true negatives is\\n    :math:`C_{0,0}`, false negatives is :math:`C_{1,0}`, true positives is\\n    :math:`C_{1,1}` and false positives is :math:`C_{0,1}`.',\n          inputs: [\n            {\n              name: 'y_true',\n              docstring: 'Ground truth (correct) target values.',\n              param_type: ['array'],\n              expected_shape: '[n_samples]',\n              is_optional: false,\n              default_value: null\n            },\n            {\n              name: 'y_pred',\n              docstring: 'Estimated targets as returned by a classifier.',\n              param_type: ['array'],\n              expected_shape: '[n_samples]',\n              is_optional: false,\n              default_value: null\n            },\n            {\n              name: 'labels',\n              docstring:\n                'List of labels to index the matrix. This may be used to reorder or select a subset of labels. If none is given, those that appear at least once in ``y_true`` or ``y_pred`` are used in sorted order.',\n              param_type: ['array'],\n              expected_shape: '[n_classes], optional',\n              is_optional: true,\n              default_value: null\n            },\n            {\n              name: 'sample_weight',\n              docstring: 'Sample weights.',\n              param_type: ['array'],\n              expected_shape: '[n_samples], optional',\n              is_optional: true,\n              default_value: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'C',\n              docstring: 'Confusion matrix',\n              param_type: ['array'],\n              returned: true\n            }\n          ]\n        }\n      ],\n      nodes: [],\n      placeholder: true\n    }\n  ],\n  library: 'sklearn',\n  module: 'metrics'\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/jsons/sklearnMetrics.js","export default {\n  name: 'pandas',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [\n    {\n      name: 'read_csv',\n      docstring: '\\nRead a comma-separated values (csv) file into DataFrame.',\n      inputs: [\n        {\n          name: 'filepath_or_buffer',\n          docstring: 'Choose a CSV file to upload.',\n          param_type: ['object', 'str'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'sep',\n          docstring: 'Delimiter to use. Use \\\\s+ for whitespace',\n          param_type: ['str'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: ',',\n          options: null\n        },\n        {\n          name: 'header',\n          docstring:\n            'Row number(s) to use as the column names, and the start of the data.  Default behavior is to infer the column names: if no names are passed the behavior is identical to ``header=0`` and column names are inferred from the first line of the file, if column names are passed explicitly then the behavior is identical to ``header=None``. Explicitly pass ``header=0`` to be able to replace existing names. The header can be a list of integers that specify row locations for a multi-index on the columns e.g. [0,1,3]. Intervening rows that are not specified will be skipped (e.g. 2 in this example is skipped). Note that this parameter ignores commented lines and empty lines if ``skip_blank_lines=True``, so ``header=0`` denotes the first line of data rather than the first line of the file.',\n          param_type: ['int', 'list'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'infer',\n          options: null\n        },\n        {\n          name: 'names',\n          docstring:\n            'List of column names to use. If file contains no header row, then you should explicitly pass ``header=None``. Duplicates in this list are not allowed.',\n          param_type: ['array'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'index_col',\n          docstring:\n            'Column(s) to use as the row labels of the ``DataFrame``, either given as string name or column index. If a sequence of int / str is given, a MultiIndex is used.  Note: ``index_col=False`` can be used to force pandas to *not* use the first column as the index, e.g. when you have a malformed file with delimiters at the end of each line.',\n          param_type: ['int', 'str', null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '``None``',\n          options: null\n        },\n        {\n          name: 'usecols',\n          docstring:\n            \"Return a subset of the columns. If list-like, all elements must either be positional (i.e. integer indices into the document columns) or strings that correspond to column names provided either by the user in `names` or inferred from the document header row(s). For example, a valid list-like `usecols` parameter would be ``[0, 1, 2]`` or ``['foo', 'bar', 'baz']``. Element order is ignored, so ``usecols=[0, 1]`` is the same as ``[1, 0]``.\",\n          param_type: ['list', 'callable'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'mangle_dupe_cols',\n          docstring:\n            \"Duplicate columns will be specified as 'X', 'X.1', ...'X.N', rather than 'X'...'X'. Passing in False will cause data to be overwritten if there are duplicate names in the columns.\",\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'skiprows',\n          docstring:\n            'Line numbers to skip (0-indexed) or number of lines to skip (int) at the start of the file. By default no rows are skipped',\n          param_type: ['int', 'list', 'callable'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'skipfooter',\n          docstring:\n            \"Number of lines at bottom of file to skip (Unsupported with engine='c').\",\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '0',\n          options: null\n        },\n        {\n          name: 'nrows',\n          docstring:\n            'Number of rows of file to read. Useful for reading pieces of large files.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'na_values',\n          docstring:\n            \"Additional strings to recognize as NA/NaN. If dict passed, specific per-column NA values.  By default the following values are interpreted as NaN: '', '#N/A', '#N/A N/A', '#NA', '-1.#IND', '-1.#QNAN', '-NaN', '-nan', '1.#IND', '1.#QNAN', 'N/A', 'NA', 'NULL', 'NaN', 'n/a', 'nan', 'null'.\",\n          param_type: ['str', 'dict', 'list'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'keep_default_na',\n          docstring:\n            'Whether or not to include the default NaN values when parsing the data. Depending on whether `na_values` is passed in, the behavior is as follows:  * If `keep_default_na` is True, and `na_values` are specified, `na_values`   is appended to the default NaN values used for parsing. * If `keep_default_na` is True, and `na_values` are not specified, only   the default NaN values are used for parsing. * If `keep_default_na` is False, and `na_values` are specified, only   the NaN values specified `na_values` are used for parsing. * If `keep_default_na` is False, and `na_values` are not specified, no   strings will be parsed as NaN.  Note that if `na_filter` is passed in as False, the `keep_default_na` and `na_values` parameters will be ignored.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'na_filter',\n          docstring:\n            'Detect missing value markers (empty strings and the value of na_values). In data without any NAs, passing na_filter=False can improve the performance of reading a large file.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'skip_blank_lines',\n          docstring:\n            'If True, skip over blank lines rather than interpreting as NaN values.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'compression',\n          docstring:\n            \"For on-the-fly decompression of on-disk data. If 'infer' and `filepath_or_buffer` is path-like, then detect compression from the following extensions: '.gz', '.bz2', '.zip', or '.xz' (otherwise no decompression). If using 'zip', the ZIP file must contain only one data file to be read in. Set to None for no decompression.  .. versionadded:: 0.18.1 support for 'zip' and 'xz' compression.\",\n          param_type: ['LIST_VALID_OPTIONS', null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'infer',\n          options: ['infer', 'gzip', 'bz2', 'zip', 'xz', 'None']\n        },\n        {\n          name: 'thousands',\n          docstring: 'Thousands separator.',\n          param_type: ['str'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'decimal',\n          docstring:\n            \"Character to recognize as decimal point (e.g. use ',' for European data).\",\n          param_type: ['str'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '.',\n          options: null\n        },\n        {\n          name: 'comment',\n          docstring:\n            \"Indicates remainder of line should not be parsed. If found at the beginning of a line, the line will be ignored altogether. This parameter must be a single character. Like empty lines (as long as ``skip_blank_lines=True``), fully commented lines are ignored by the parameter `header` but not by `skiprows`. For example, if ``comment='#'``, parsing ``#empty\\\\na,b,c\\\\n1,2,3`` with ``header=0`` will result in 'a,b,c' being treated as the header.\",\n          param_type: ['str'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: false,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'data',\n          docstring:\n            'A comma-separated values (csv) file is returned as two-dimensional data structure with labeled axes.',\n          param_type: ['dataframe'],\n          returned: true\n        },\n        {\n          name: 'obj',\n          docstring:\n            'True/False flag to indicate reusing the same instance instead of creating a new one',\n          param_type: ['bool'],\n          returned: true\n        }\n      ]\n    }\n  ],\n  nodes: [],\n  library: 'pandas',\n  module: null\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/jsons/pandasAbbrv.js","export default {\n  name: 'chemml.chem',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [\n    {\n      name: 'atom_features',\n      docstring:\n        'This function encodes the RDKit atom to a binary vector.\\n\\n    Parameters\\n    ----------\\n    bond : rdkit.Chem.rdchem.Bond\\n        The bond must be an RDKit Bond object.\\n\\n    Returns\\n    -------\\n    features : array\\n        A binary array with length 6 that specifies the type of bond, if it is\\n        a single/double/triple/aromatic bond, a conjugated bond or belongs to a molecular ring.\\n\\n    ',\n      inputs: [\n        {\n          name: 'bond',\n          docstring: 'The bond must be an RDKit Bond object.',\n          param_type: [null],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'features',\n          docstring:\n            'A binary array with length 6 that specifies the type of bond, if it is a single/double/triple/aromatic bond, a conjugated bond or belongs to a molecular ring.',\n          param_type: ['array'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'bond_features',\n      docstring:\n        'This function encodes the RDKit bond to a binary vector.\\n\\n    Parameters\\n    ----------\\n    bond : rdkit.Chem.rdchem.Bond\\n        The bond must be an RDKit Bond object.\\n\\n    Returns\\n    -------\\n    features : array\\n        A binary array with length 6 that specifies the type of bond, if it is\\n        a single/double/triple/aromatic bond, a conjugated bond or belongs to a molecular ring.\\n\\n    ',\n      inputs: [\n        {\n          name: 'bond',\n          docstring: 'The bond must be an RDKit Bond object.',\n          param_type: [null],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'features',\n          docstring:\n            'A binary array with length 6 that specifies the type of bond, if it is a single/double/triple/aromatic bond, a conjugated bond or belongs to a molecular ring.',\n          param_type: ['array'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'num_atom_features',\n      docstring:\n        'This function returns the number of atomic features that are available by this module.\\n\\n    Returns\\n    -------\\n    n_features : int\\n        length of atomic feature vector.\\n    ',\n      inputs: [],\n      outputs: [\n        {\n          name: 'n_features',\n          docstring: 'length of atomic feature vector.',\n          param_type: ['int'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'num_bond_features',\n      docstring:\n        'This function returns the number of bond features that are available by this module.\\n\\n    Returns\\n    -------\\n    n_features : int\\n        length of bond feature vector.\\n    ',\n      inputs: [],\n      outputs: [\n        {\n          name: 'n_features',\n          docstring: 'length of bond feature vector.',\n          param_type: ['int'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'tensorise_molecules',\n      docstring:\n        \"Takes a list of molecules and provides tensor representation of atom and bond features.\\n    This representation is based on the \\\"convolutional networks on graphs for learning molecular fingerprints\\\" by\\n    David Duvenaud et al., NIPS 2015.\\n\\n    Parameters\\n    ----------\\n    molecules : chemml.chem.Molecule object or array\\n        If list, it must be a list of chemml.chem.Molecule objects, otherwise we raise a ValueError.\\n        In addition, all the molecule objects must provide the SMILES representation.\\n        We try to create the SMILES representation if it's not available.\\n\\n    max_degree : int, optional (default=5)\\n        The maximum number of neighbour per atom that each molecule can have\\n        (to which all molecules will be padded), use 'None' for auto\\n\\n    max_atoms : int, optional (default=None)\\n        The maximum number of atoms per molecule (to which all\\n        molecules will be padded), use 'None' for auto\\n\\n    n_jobs : int, optional(default=-1)\\n        The number of parallel processes. If -1, uses all the available processes.\\n\\n    batch_size : int, optional(default=3000)\\n        The number of molecules per process, bigger chunksize is preffered as each process will preallocate np.arrays\\n\\n    verbose : bool, optional(default=True)\\n        The verbosity of messages.\\n\\n    Notes\\n    -----\\n        It is not recommended to set max_degree to `None`/auto when\\n        using `NeuralGraph` layers. Max_degree determines the number of\\n        trainable parameters and is essentially a hyperparameter.\\n        While models can be rebuilt using different `max_atoms`, they cannot\\n        be rebuild for different values of `max_degree`, as the architecture\\n        will be different.\\n\\n        For organic molecules `max_degree=5` is a good value (Duvenaud et. al, 2015)\\n\\n\\n    Returns\\n    -------\\n        atoms : array\\n            An atom feature array of shape (molecules, max_atoms, atom_features)\\n        bonds : array\\n            A bonds array of shape (molecules, max_atoms, max_degree)\\n        edges : array\\n        A connectivity array of shape (molecules, max_atoms, max_degree, bond_features)\\n    \",\n      inputs: [\n        {\n          name: 'molecules',\n          docstring:\n            \"If list, it must be a list of chemml.chem.Molecule objects, otherwise we raise a ValueError. In addition, all the molecule objects must provide the SMILES representation. We try to create the SMILES representation if it's not available.\",\n          param_type: ['array', 'object'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'max_degree',\n          docstring:\n            \"The maximum number of neighbour per atom that each molecule can have (to which all molecules will be padded), use 'None' for auto\",\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '5',\n          options: null\n        },\n        {\n          name: 'max_atoms',\n          docstring:\n            \"The maximum number of atoms per molecule (to which all molecules will be padded), use 'None' for auto\",\n          param_type: ['int', null],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'None',\n          options: null\n        },\n        {\n          name: 'n_jobs',\n          docstring:\n            'The number of parallel processes. If -1, uses all the available processes.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '-1',\n          options: null\n        },\n        {\n          name: 'batch_size',\n          docstring:\n            'The number of molecules per process, bigger chunksize is preffered as each process will preallocate np.arrays',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '3000',\n          options: null\n        },\n        {\n          name: 'verbose',\n          docstring: 'The verbosity of messages.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'atoms',\n          docstring:\n            'An atom feature array of shape (molecules, max_atoms, atom_features)',\n          param_type: ['array'],\n          returned: true\n        },\n        {\n          name: 'bonds',\n          docstring:\n            'A bonds array of shape (molecules, max_atoms, max_degree)',\n          param_type: ['array'],\n          returned: true\n        },\n        {\n          name: 'edges',\n          docstring:\n            'edges : array A connectivity array of shape (molecules, max_atoms, max_degree, bond_features)',\n          param_type: ['array'],\n          returned: true\n        }\n      ]\n    }\n  ],\n  nodes: [\n    {\n      name: 'BagofBonds',\n      docstring:\n        '\\n    The implementation of bag of bonds version of coulomb matrix by katja Hansen et. al. 2015, JPCL.',\n      inputs: [\n        {\n          name: 'const',\n          docstring:\n            'The constant value for coordinates unit conversion to atomic unit if const=1.0, returns atomic unit if const=0.529, returns Angstrom  const/|Ri-Rj|, which denominator is the euclidean distance between two atoms',\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '1.0',\n          options: null\n        },\n        {\n          name: 'n_jobs',\n          docstring:\n            'The number of parallel processes. If -1, uses all the available processes.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '-1',\n          options: null\n        },\n        {\n          name: 'verbose',\n          docstring: 'The verbosity of messages.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'header_',\n          docstring:\n            'contains one nuclear charge (represents single atom) or a tuple of two nuclear charges (represents a bond)',\n          param_type: ['list'],\n          returned: false\n        }\n      ],\n      node_functions: [\n        {\n          name: 'represent',\n          docstring:\n            '\\n        provides bag of bonds representation for input molecules.',\n          inputs: [\n            {\n              name: 'molecules',\n              docstring:\n                'If list, it must be a list of chemml.chem.Molecule objects, otherwise we raise a ValueError. In addition, all the molecule objects must provide the XYZ information. Please make sure the XYZ geometry has been stored or optimized in advance.',\n              param_type: ['array', 'object'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'features',\n              docstring: 'The bag of bond features.',\n              param_type: [null],\n              returned: true\n            }\n          ]\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'CoulombMatrix',\n      docstring:\n        '\\n    The implementation of coulomb matrix descriptors by Matthias Rupp et. al. 2012, PRL (All 3 different variations).',\n      inputs: [\n        {\n          name: 'cm_type',\n          docstring:\n            \"The coulomb matrix type, one of the following types:     * 'Unsorted_Matrix' or 'UM'     * 'Unsorted_Triangular' or 'UT'     * 'Eigenspectrum' or 'E'      * 'Sorted_Coulomb' or 'SC'     * 'Random_Coulomb' or 'RC'\",\n          param_type: ['str'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'SC',\n          options: ['UM', 'UT', 'E', 'SC', 'RC']\n        },\n        {\n          name: 'max_n_atoms',\n          docstring:\n            \"Set the maximum number of atoms per molecule (to which all representations will be padded). If 'auto', we find it based on all input molecules.\",\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'auto',\n          options: null\n        },\n        {\n          name: 'nPerm',\n          docstring:\n            'Number of permutation of coulomb matrix per molecule for Random_Coulomb (RC)  type of representation.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '3',\n          options: null\n        },\n        {\n          name: 'const',\n          docstring:\n            'The constant value for coordinates unit conversion to atomic unit example: atomic unit -> const=1, Angstrom -> const=0.529 const/|Ri-Rj|, which denominator is the euclidean distance between atoms i and j',\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '1',\n          options: null\n        },\n        {\n          name: 'n_jobs',\n          docstring:\n            'The number of parallel processes. If -1, uses all the available processes.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '-1',\n          options: null\n        },\n        {\n          name: 'verbose',\n          docstring: 'The verbosity of messages.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'n_molecules_',\n          docstring: 'Total number of molecules.',\n          param_type: ['int'],\n          returned: false\n        },\n        {\n          name: 'max_n_atoms_',\n          docstring: 'Maximum number of atoms in all molecules.',\n          param_type: ['int'],\n          returned: false\n        }\n      ],\n      node_functions: [\n        {\n          name: 'represent',\n          docstring:\n            '\\n        provides coulomb matrix representation for input molecules.',\n          inputs: [\n            {\n              name: 'molecules',\n              docstring:\n                'If list, it must be a list of chemml.chem.Molecule objects, otherwise we raise a ValueError. In addition, all the molecule objects must provide the XYZ information. Please make sure the XYZ geometry has been stored or optimized in advance.',\n              param_type: ['array', 'object'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'features',\n              docstring:\n                'A data frame with same number of rows as number of molecules will be returned. The exact shape of the dataframe depends on the type of CM as follows:     - shape of Unsorted_Matrix (UM): (n_molecules, max_n_atoms**2)     - shape of Unsorted_Triangular (UT): (n_molecules, max_n_atoms*(max_n_atoms+1)/2)     - shape of eigenspectrums (E): (n_molecules, max_n_atoms)     - shape of Sorted_Coulomb (SC): (n_molecules, max_n_atoms*(max_n_atoms+1)/2)     - shape of Random_Coulomb (RC): (n_molecules, nPerm * max_n_atoms * (max_n_atoms+1)/2)',\n              param_type: ['dataframe'],\n              returned: true\n            }\n          ]\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'Dragon',\n      docstring:\n        '\\n    An interface to Dragon 6 and 7 chemoinformatics software. Dragon is a commercial software and\\n    you should provide API Key',\n      inputs: [\n        {\n          name: 'version',\n          docstring:\n            \"The version of available Dragon on the user's system. (available versions: 6 or 7)\",\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '7',\n          options: null\n        },\n        {\n          name: 'Weights',\n          docstring: 'A list of weights to be used',\n          param_type: ['list'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'blocks',\n          docstring:\n            \"A list of integers as descriptor blocks' id. There are totally 29 and 30 blocks available in version 6 and 7, respectively. This module is not atimed to cherry pick descriptors in each block. For doing so, please use Script Wizard in Drgon GUI.\",\n          param_type: ['list'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'external',\n          docstring:\n            'If True, include external variables at the end of each saved file.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'False',\n          options: null\n        }\n      ],\n      outputs: [],\n      node_functions: [\n        {\n          name: '__init__',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: '_save_script',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'convert_to_csv',\n          docstring:\n            '\\n        This function converts the tab-delimited txt file from Dragon to pandas dataframe.\\n        Note that this process might require large memory based on the number of data points and features.',\n          inputs: [\n            {\n              name: 'remove',\n              docstring:\n                'if True, the original descriptors file (Dragon_descriptors.txt) will be removed.',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: 'True',\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'features',\n              docstring:\n                \"The 2D dataframe of the descriptors. Note that the first two columns are 'No.' and 'NAME'.\",\n              param_type: ['dataframe'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'printout',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'run',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'script_wizard',\n          docstring:\n            \"\\n        The script_wizard is designed to build a Dragon script file. The name and\\n        the functionality of this function is the same as available Script wizard\\n        in the Dragon Graphic User Interface.\\n        Note: All reported nodes are mandatory, except the <EXTERNAL> tag\\n        Note: Script for version 7 doesn't support fingerprints block\",\n          inputs: [\n            {\n              name: 'script',\n              docstring:\n                'If \"new\" start creating a new script from scratch. If you want to load an existing script, pass the filename with drs format.',\n              param_type: ['str'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: '\"new\"',\n              options: null\n            },\n            {\n              name: 'output_directory',\n              docstring:\n                'the path to the working directory to store output files.',\n              param_type: ['str'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: './',\n              options: null\n            },\n            {\n              name: 'dragon',\n              docstring: 'Dragon script in  xml format.',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'drs',\n              docstring: 'Dragon script file name',\n              param_type: ['str'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'data_path',\n              docstring:\n                \"The path+name of saved data file in any format. If saveType is 'block' or 'subblock' data_path is just the path to the directory that all data files have been saved.\",\n              param_type: ['str'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: []\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'Molecule',\n      docstring:\n        'The central class to construct a molecule from different chemical input formats.\\n    This module is built on top of RDKit and OpenBabel python API.\\n    We join the forces and strength of these two cheminformatic libraris for a consistent user experience.\\n\\n    Almost all the molecular descriptors and molecule-based ML models require the chemical informatin as a Molecule object.\\n    Several methods are available in this module to facilitate the manipulation of chemical data.',\n      inputs: [\n        {\n          name: 'input',\n          docstring: 'The representation string or path to a file.',\n          param_type: ['str'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'input_type',\n          docstring:\n            'The input type. The available types are enlisted here:     - smiles: The input must be SMILES representation of a molecule.     - smarts: The input must be SMARTS representation of a molecule.     - inchi: The input must be InChi representation of a molecule.     - xyz:  The input must be the path to an xyz file.',\n          param_type: ['str'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: ['smiles', 'smarts', 'inchi', 'xyz']\n        },\n        {\n          name: 'kwargs',\n          docstring:\n            'The corresponding RDKit arguments for each of the input types:     - smiles: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolFromSmiles     - smarts: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolFromSmarts     - inchi: http://rdkit.org/docs/source/rdkit.Chem.inchi.html?highlight=inchi#rdkit.Chem.inchi.MolFromInchi',\n          param_type: [null],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'rdkit_molecule',\n          docstring: 'The `rdkit.Chem.rdchem.Mol` object',\n          param_type: ['object'],\n          returned: false\n        },\n        {\n          name: 'smiles',\n          docstring:\n            'The SMILES string that you get by running the `to_smiles` method.',\n          param_type: ['str'],\n          returned: false\n        },\n        {\n          name: 'smarts',\n          docstring:\n            'The SMARTS string that you get by running the `to_smarts` method.',\n          param_type: ['str'],\n          returned: false\n        },\n        {\n          name: 'inchi',\n          docstring:\n            'The InChi string that you get by running the `to_inchi` method.',\n          param_type: ['str'],\n          returned: false\n        },\n        {\n          name: 'xyz',\n          docstring:\n            \"The class object that stores the 3D info. The available attributes in the class are 'geometry', 'atomic_numbers', and 'atomic_symbols'.\",\n          param_type: [null],\n          returned: false\n        }\n      ],\n      node_functions: [\n        {\n          name: 'hydrogens',\n          docstring:\n            \"\\n        This function adds/removes hydrogens to/from a prebuilt molecule object.\\n\\n        Parameters\\n        ----------\\n        action : str\\n            Either 'add' or 'remove', to add hydrogns or remove them from the rdkit molecule.\\n\\n        kwargs :\\n            The arguments that can be passed to the rdkit functions:\\n            - `Chem.AddHs`: documentation at http://rdkit.org/docs/source/rdkit.Chem.rdmolops.html?highlight=addhs#rdkit.Chem.rdmolops.AddHs\\n            - `Chem.RemoveHs`: documentation at http://rdkit.org/docs/source/rdkit.Chem.rdmolops.html?highlight=addhs#rdkit.Chem.rdmolops.RemoveHs\\n\\n        Notes\\n        -----\\n            - The rdkit or pybel molecule object must be created in advance.\\n            - Only rdkit or pybel molecule object will be modified in place.\\n            - If you remove hydrogens from molecules, the atomic 3D coordinates might not be accurate for the conversion to xyz representation.\\n\\n        \",\n          inputs: [\n            {\n              name: 'action',\n              docstring:\n                \"Either 'add' or 'remove', to add hydrogns or remove them from the rdkit molecule.\",\n              param_type: ['str'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'kwargs :',\n              docstring:\n                'The arguments that can be passed to the rdkit functions: - `Chem.AddHs`: documentation at http://rdkit.org/docs/source/rdkit.Chem.rdmolops.html?highlight=addhs#rdkit.Chem.rdmolops.AddHs - `Chem.RemoveHs`: documentation at http://rdkit.org/docs/source/rdkit.Chem.rdmolops.html?highlight=addhs#rdkit.Chem.rdmolops.RemoveHs',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'to_inchi',\n          docstring:\n            '\\n        This function creates and stores the InChi string for a pre-built molecule.\\n\\n        Parameters\\n        ----------\\n        kwargs :\\n            The arguments that can be passed to the rdkit.Chem.MolToInchi function (will be used only if rdkit molecule is available).\\n            The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.inchi.html?highlight=inchi#rdkit.Chem.inchi.MolToInchi\\n\\n        Notes\\n        -----\\n            - The rdkit or pybel molecule object must be created in advance.\\n            - The molecule will be modified in place.\\n\\n        ',\n          inputs: [\n            {\n              name: 'kwargs :',\n              docstring:\n                'The arguments that can be passed to the rdkit.Chem.MolToInchi function (will be used only if rdkit molecule is available). The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.inchi.html?highlight=inchi#rdkit.Chem.inchi.MolToInchi',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'to_smarts',\n          docstring:\n            '\\n        This function creates and stores the SMARTS string for a pre-built molecule.\\n\\n        Parameters\\n        ----------\\n        kwargs :\\n            All the arguments that can be passed to the rdkit.Chem.MolToSmarts function.\\n            The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolToSmarts\\n\\n        Notes\\n        -----\\n            - The rdkit or pybel molecule object must be created in advance.\\n            - If only pybel molecule is available, we create an rdkit molecule using its SMILES representation, and then create the SMARTS string using rdkit arguments.\\n            - The molecule will be modified in place.\\n\\n        ',\n          inputs: [\n            {\n              name: 'kwargs :',\n              docstring:\n                'All the arguments that can be passed to the rdkit.Chem.MolToSmarts function. The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolToSmarts',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'to_smiles',\n          docstring:\n            '\\n        This function creates and stores the SMILES string for a pre-built molecule.\\n\\n        Parameters\\n        ----------\\n        kwargs :\\n            The arguments for the rdkit.Chem.MolToSmiles function.\\n            The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolToSmiles\\n\\n        Notes\\n        -----\\n            - The rdkit or pybel molecule object must be created in advance.\\n            - If only pybel molecule is available, we create an rdkit molecule using its SMILES representation, and then recreate the SMILES string using rdkit arguments.\\n            - The molecule will be modified in place.\\n            - For rdkit molecule the SMILES string is canocical by default, unless when one requests kekuleSmiles.\\n\\n        ',\n          inputs: [\n            {\n              name: 'kwargs :',\n              docstring:\n                'The arguments for the rdkit.Chem.MolToSmiles function. The documentation is available at: http://rdkit.org/docs/source/rdkit.Chem.rdmolfiles.html#rdkit.Chem.rdmolfiles.MolToSmiles',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'to_xyz',\n          docstring:\n            \"\\n        This function creates and stores the xyz coordinates for a pre-built molecule object.\\n\\n        Parameters\\n        ----------\\n        optimizer : None or str, optional (default: None)\\n            If None, the geometries will be extracted from the available source of 3D structure (if any).\\n            Otherwise, any of the 'UFF' or 'MMFF' force fileds should be passed to embed and optimize geometries using 'rdkit.Chem.AllChem.UFFOptimizeMolecule' or\\n            'rdkit.Chem.AllChem.MMFFOptimizeMolecule' methods, respectively.\\n\\n        kwargs :\\n            The arguments that can be passed to the corresponding forcefileds.\\n            The documentation is available at:\\n                - UFFOptimizeMolecule: http://rdkit.org/docs/source/rdkit.Chem.rdForceFieldHelpers.html?highlight=mmff#rdkit.Chem.rdForceFieldHelpers.UFFOptimizeMolecule\\n                - MMFFOptimizeMolecule: http://rdkit.org/docs/source/rdkit.Chem.rdForceFieldHelpers.html?highlight=mmff#rdkit.Chem.rdForceFieldHelpers.MMFFOptimizeMolecule\\n\\n        Notes\\n        -----\\n            - The geometry will be stored in the `xyz` attribute.\\n            - The molecule object must be created in advance.\\n            - The hydrogens won't be added to the molecule automatically. You should add it manually using `hydrogens` method.\\n            - If the molecule object has been built using 2D representations (e.g., SMILES or InChi), the conformer\\n            doesn't exist and you nedd to set the optimizer parameter to any of the force fields.\\n            - If the 3D info exist but you still need to run optimization, the 3D structure will be embedded from scratch (i.e., the current atom coordinates will be removed.)\\n\\n\\n        \",\n          inputs: [\n            {\n              name: 'optimizer',\n              docstring:\n                \"If None, the geometries will be extracted from the available source of 3D structure (if any). Otherwise, any of the 'UFF' or 'MMFF' force fileds should be passed to embed and optimize geometries using 'rdkit.Chem.AllChem.UFFOptimizeMolecule' or 'rdkit.Chem.AllChem.MMFFOptimizeMolecule' methods, respectively.\",\n              param_type: ['str', null],\n              expected_shape: null,\n              is_optional: true,\n              default_value: 'None',\n              options: null\n            },\n            {\n              name: 'kwargs :',\n              docstring:\n                'The arguments that can be passed to the corresponding forcefileds. The documentation is available at:     - UFFOptimizeMolecule: http://rdkit.org/docs/source/rdkit.Chem.rdForceFieldHelpers.html?highlight=mmff#rdkit.Chem.rdForceFieldHelpers.UFFOptimizeMolecule     - MMFFOptimizeMolecule: http://rdkit.org/docs/source/rdkit.Chem.rdForceFieldHelpers.html?highlight=mmff#rdkit.Chem.rdForceFieldHelpers.MMFFOptimizeMolecule',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'visualize',\n          docstring:\n            '\\n        This function visualizes the molecule. If both rdkit and pybel objects are avaialble, the rdkit object\\n        will be used for visualization.\\n\\n        Parameters\\n        ----------\\n        filename: str, optional (default = None)\\n            This is the path to the file that you want write the image in it.\\n            Tkinter and Python Imaging Library are required for writing the image.\\n\\n        kwargs:\\n            any extra parameter that you want to pass to the rdkit or pybel draw tool.\\n            Additional information at:\\n                - https://www.rdkit.org/docs/source/rdkit.Chem.Draw.html\\n                - http://openbabel.org/docs/dev/UseTheLibrary/Python_PybelAPI.html#pybel.Molecule.draw\\n\\n        Returns\\n        -------\\n        fig : object\\n            You will be able to display this object, e.g., inside the Jupyter Notebook.\\n\\n        ',\n          inputs: [\n            {\n              name: 'filename: str, optional (default = None)',\n              docstring:\n                'This is the path to the file that you want write the image in it. Tkinter and Python Imaging Library are required for writing the image.',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'kwargs:',\n              docstring:\n                'any extra parameter that you want to pass to the rdkit or pybel draw tool. Additional information at:     - https://www.rdkit.org/docs/source/rdkit.Chem.Draw.html     - http://openbabel.org/docs/dev/UseTheLibrary/Python_PybelAPI.html#pybel.Molecule.draw',\n              param_type: [null],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'fig',\n              docstring:\n                'You will be able to display this object, e.g., inside the Jupyter Notebook.',\n              param_type: ['object'],\n              returned: true\n            }\n          ]\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'RDKitFingerprint',\n      docstring:\n        '\\n    This is an interface to the available molecular fingerprints in the RDKit package.',\n      inputs: [\n        {\n          name: 'fingerprint_type',\n          docstring:\n            \"The type of fingerprint. Available fingerprint types:     - 'hashed_atom_pair' or 'hap'     - 'MACCS' or 'maccs'     - 'morgan'     - 'hashed_topological_torsion' or 'htt'     - 'topological_torsion' or 'tt'\",\n          param_type: ['str'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'Morgan',\n          options: [\n            'hashed_atom_pair',\n            'MACCS',\n            'morgan',\n            'hashed_topological_torsion',\n            'topological_torsion'\n          ]\n        },\n        {\n          name: 'vector',\n          docstring:\n            \"Available options for vector:     - 'int' : represent counts for each fragment instead of bits             It is not available for 'MACCS'.     - 'bit' : only zeros and ones             It is not available for 'Topological_torsion'.\",\n          param_type: ['str'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'bit',\n          options: ['int', 'bit']\n        },\n        {\n          name: 'n_bits',\n          docstring:\n            \"It sets number of elements/bits in the 'bit' type of fingerprint vectors. Not available for:     - 'MACCS' - (MACCS keys have a fixed length of 167 bits)     - 'Topological_torsion' - doesn't return a bit vector at all.\",\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '1024',\n          options: null\n        },\n        {\n          name: 'radius',\n          docstring: \"only applicable if calculating 'Morgan' fingerprint.\",\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '2',\n          options: null\n        },\n        {\n          name: 'kwargs :',\n          docstring:\n            'Any additional argument that should be passed to the rdkit fingerprint function.',\n          param_type: [null],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        }\n      ],\n      outputs: [\n        {\n          name: 'n_molecules_',\n          docstring: 'The number of molecules that are received.',\n          param_type: ['int'],\n          returned: false\n        },\n        {\n          name: 'fps_',\n          docstring: 'The list of rdkit fingerprint objects.',\n          param_type: ['list'],\n          returned: false\n        }\n      ],\n      node_functions: [\n        {\n          name: 'represent',\n          docstring:\n            '\\n        The main function to provide fingerprint representation of input molecule(s).',\n          inputs: [\n            {\n              name: 'molecules',\n              docstring:\n                'It must be an instance of chemml.chem.Molecule object or a list of those objects, otherwise a ValueError will be raised. If smiles representation of the molecule (or rdkit molecule object) is not available, we convert the molecule to smiles automatically. However, the automatic conversion may ignore your manual settings, for example removed hydrogens, kekulized, or canonical smiles.',\n              param_type: ['object', 'list'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'features',\n              docstring:\n                'A 2-dimensional pandas dataframe of fingerprint features with same number of rows as number of molecules.',\n              param_type: ['dataframe'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'store_sparse',\n          docstring:\n            '\\n        This function helps you to store higly sparse fingerprint feature sets using `.npz` format for memory efficiency and\\n        less store/load time.\\n        Another method of this class, `load_sparse`, enables you to load your `.npz` files and convert it back to pandas dataframe.\\n\\n        Parameters\\n        ----------\\n        file : str\\n            Must be a path to the file with .npz format.\\n\\n        features : pandas DataFrame\\n            Must be the pandas dataframe as you receive it from `represent` method.\\n\\n        ',\n          inputs: [\n            {\n              name: 'file',\n              docstring: 'Must be a path to the file with .npz format.',\n              param_type: ['str'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'features',\n              docstring:\n                'Must be the pandas dataframe as you receive it from `represent` method.',\n              param_type: ['dataframe'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: []\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'XYZ',\n      docstring:\n        '\\n    This class stores the information that is typically carried by standard XYZ files.',\n      inputs: [\n        {\n          name: 'geometry',\n          docstring:\n            'The numpy array of shape (number_of_atoms, 3). It stores the xyz coordinates for each atom of the molecule.',\n          param_type: ['array'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'atomic_numbers',\n          docstring:\n            'The numpy array of shape (number_of_atoms, 1). It stores the atomic numbers of each atom in the molecule (in the same order as geometry).',\n          param_type: ['array'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'atomic_symbols',\n          docstring:\n            'The numpy array of shape (number_of_atoms, 1). It stores the atomic symbols of each atom in the molecule (in the same order as geometry).',\n          param_type: ['array'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        }\n      ],\n      outputs: [],\n      node_functions: [],\n      nodes: []\n    }\n  ],\n  library: 'chemml',\n  module: 'chem'\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/jsons/chemmlChemUi.js","export default {\n  name: 'chemml.models',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [],\n  nodes: [\n    {\n      name: 'MLP',\n      docstring:\n        '\\n    Class associated with Multi-Layer Perceptron (Neural Network)',\n      inputs: [\n        {\n          name: 'nhidden',\n          docstring:\n            'The number of hidden layers in the neural network (excluding input and output)',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '1',\n          options: null\n        },\n        {\n          name: 'nneurons',\n          docstring:\n            'The number of nodes in each hidden layer. Must be of same length as nhidden. default: [100] * nhidden',\n          param_type: ['list'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'activations',\n          docstring:\n            \"The activation type for each hidden layer. Must be of same length as nhidden. Refer https://keras.io/activations/ for list of valid activations. default: ['sigmoid'] * nhidden\",\n          param_type: ['list'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'nepochs',\n          docstring: 'Number of training epochs.',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '100',\n          options: null\n        },\n        {\n          name: 'batch_size',\n          docstring: 'Number of training samples in mini-batch',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '100',\n          options: null\n        },\n        {\n          name: 'loss',\n          docstring:\n            'Type of loss used to train the neural network. Refer https://keras.io/losses/ for list of valid losses',\n          param_type: ['str'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: 'mean_squared_error',\n          options: [\n            'mean_squared_error',\n            'mean_absolute_error',\n            'squared_hinge',\n            'hinge',\n            'categorical_hinge',\n            'categorical_crossentropy',\n            'binary_crossentropy',\n            'kullback_liebler_divergence'\n          ]\n        },\n        {\n          name: 'regression',\n          docstring:\n            'Decides whether we are training for regression or classification task',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'True',\n          options: null\n        },\n        {\n          name: 'nclasses',\n          docstring:\n            'Number of classes labels needs to be specified if regression is False',\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'None',\n          options: null\n        }\n      ],\n      outputs: [],\n      node_functions: [\n        {\n          name: '__init__',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'fit',\n          docstring:\n            '\\n        Train the MLP for training data X and targets y',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'Training data',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'y',\n              docstring: 'Training targets',\n              param_type: ['array'],\n              expected_shape: '[n_samples,]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: []\n        },\n        {\n          name: 'predict',\n          docstring: '\\n        Return prediction for test data X',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'Testing data',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: '',\n              docstring: 'Predicted value from model',\n              param_type: ['float'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'score',\n          docstring:\n            '\\n        Predict results for test data X and compare with true targets y. Returns root mean square error if regression,\\n        accuracy if classification\\n\\n        Parameters\\n        ----------\\n        X: array_like, shape=[n_samples, n_features]\\n            Test data\\n\\n        y: array_like, shape=[n_samples,]\\n            True targets\\n\\n        Returns\\n        -------\\n        float\\n            root mean square error if regression, accuracy if classification\\n        ',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'Test data',\n              param_type: ['array'],\n              expected_shape: '[n_samples, n_features]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'y',\n              docstring: 'True targets',\n              param_type: ['array'],\n              expected_shape: '[n_samples,]',\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'score',\n              docstring:\n                'root mean square error if regression, accuracy if classification',\n              param_type: ['float'],\n              returned: true\n            }\n          ]\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'OrganicLorentzLorenz',\n      docstring:\n        '\\n    A machine learning model for Lorentz-Lorenz (LL) estimates of refractive index.\\n    The model predicts refractive index, polarizability, and density of an organic molecule using its\\n    SMILES representation.\\n\\n    The model is trained on 100K small organic molecules with their polarizabilities from DFT calculations, densities from\\n    molecular dynamics simulations, and refractive index by feeding calculated polarizabilities and densities into the\\n    LL model.\\n\\n    The model is a fully connected artificial neural network with 3 hidden layers. The number of neurons per layers from\\n    input layer to the output layer are as follow: 1024 --> 128 --> 64 --> 32 --> [1, 1, 1].\\n    ',\n      inputs: [],\n      outputs: [],\n      node_functions: [\n        {\n          name: '_OrganicLorentzLorenz__represent',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'get_hidden_layer',\n          docstring:\n            '\\n        This functions return the first hidden layer of the model.',\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'If 2D array, must be with 1024 dimension and numerical type. It is recommended to be Morgan fingerprint representation of the molecules. If 1D array, must be an array of `str` type, each element represents a molecule in the SMILES format.',\n              param_type: ['array'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'id',\n              docstring:\n                'This is the id of hidden layers. It can be any of 1, 2, or 3 for the first, second, or third hidden layer, respectively.',\n              param_type: ['int'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'layer_output',\n              docstring:\n                'The array of shape (length_of_X, 128) as the outputs of the first hidden layer (id=1). The array of shape (length_of_X, 64) as the outputs of the first hidden layer (id=2). The array of shape (length_of_X, 32) as the outputs of the first hidden layer (id=3).',\n              param_type: ['array'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'load',\n          docstring:\n            'This function loads the Keras model. The model consists of 3 hidden layers and more than 140K parameters.',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'predict',\n          docstring:\n            'After loading the model, this function predicts refractive index, polarizability, and density of the entery.',\n          inputs: [\n            {\n              name: 'smiles',\n              docstring: 'The SMILES representaion of a molecule.',\n              param_type: ['str'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'pprint',\n              docstring:\n                'If True, a short description of the predicted properties will be printed out.',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: 'True',\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'predictions',\n              docstring:\n                'includes estimates of refractive index, polarizability, and density, respectively.',\n              param_type: ['tuple'],\n              returned: true\n            }\n          ]\n        },\n        {\n          name: 'train',\n          docstring:\n            \"\\n        This function allows the user to retrain the model on a given data set for some further steps.\\n        Thus, all the parameters you are able to pass to a keras model's compile or fit methods can be passed to this\\n        function as well.\",\n          inputs: [\n            {\n              name: 'X',\n              docstring:\n                'If 2D array, must be with 1024 dimension and numerical type. It is recommended to be Morgan fingerprint representation of the molecules. If 1D array, must be an array of `str` type, each element represents a molecule in the SMILES format. If dataframe, it can be a 2D frame with one columnd of SMILES or 1024 columns of features.',\n              param_type: ['array'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'Y',\n              docstring:\n                'a list of three numpy arrays for refractive index, polarizability, and density, respectively. The length of arrays must be same as the length of X. If dataframe, it must be a 2D frame with 3 columns, each for one of the properties.',\n              param_type: ['array', 'list'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'scale: bool, optional (default: True)',\n              docstring:\n                'If True the X and Y will be scaled in the same fashion as the original traning process (recommended).',\n              param_type: ['bool'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: 'True',\n              options: null\n            }\n          ],\n          outputs: []\n        }\n      ],\n      nodes: []\n    }\n  ],\n  library: 'chemml',\n  module: 'models'\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/jsons/chemmlModelsUi.js","export default {\n  name: 'chemml.datasets',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [\n    {\n      name: 'load_cep_homo',\n      docstring:\n        \"Load and return a small sample of HOMO energies of organic photovoltaic candidates from CEP database (regression).\\n    Clean Energy Project (CEP) database is available at: https://cepdb.molecularspace.org\\n    The unit of HOMO (highest occupied molecular orbitals) energies is electron Volt (eV).\\n    The photovaltaic candidates are provided using SMILES representation.\\n\\n    =================   ==============\\n    rows                           500\\n    Columns                          2\\n    headers             smiles,homo_eV\\n    molecules rep.              SMILES\\n    Features                         0\\n    Returns               2 dataframes\\n    =================   ==============\\n\\n    Returns\\n    -------\\n    smiles: pandas dataframe\\n        The SMILES representation of molecules, shape: (500,1)\\n\\n    homo: pandas dataframe\\n        The HOMO energies of the molecules (eV), shape: (500,1)\\n\\n    Examples\\n    --------\\n    >>> from chemml.datasets import load_cep_homo\\n    >>> smi, homo  = load_cep_homo()\\n    >>> print(list(smi.columns))\\n    ['smiles']\\n    >>> print(homo.shape)\\n    (500, 1)\\n    \",\n      inputs: [],\n      outputs: [\n        {\n          name: 'smiles',\n          docstring: 'The SMILES representation of molecules, shape: (500,1)',\n          param_type: ['dataframe'],\n          returned: true\n        },\n        {\n          name: 'homo',\n          docstring: 'The HOMO energies of the molecules (eV), shape: (500,1)',\n          param_type: ['dataframe'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'load_comp_energy',\n      docstring:\n        'Load and return composition entries and formation energies (eV).\\n    From Magpie https://bitbucket.org/wolverton/magpie\\n\\n    =================   ======================\\n    rows                                   630\\n    header                    formation_energy\\n    molecules rep.                 composition\\n    Features                                 0\\n    Returns             1 dataframe and 1 list\\n    =================   ======================\\n\\n    Returns\\n    -------\\n    entries: list\\n        The list of composition entries from CompositionEntry class.\\n\\n    energy: pandas dataframe\\n        The formation energy for each composition.\\n\\n    Examples\\n    --------\\n    >>> from chemml.datasets import load_comp_energy\\n    >>> entries, df = load_comp_energy()\\n    >>> print(df.shape)\\n    (630, 1)\\n    ',\n      inputs: [],\n      outputs: [\n        {\n          name: 'entries',\n          docstring:\n            'The list of composition entries from CompositionEntry class.',\n          param_type: ['list'],\n          returned: true\n        },\n        {\n          name: 'energy',\n          docstring: 'The formation energy for each composition.',\n          param_type: ['dataframe'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'load_crystal_structures',\n      docstring:\n        'Load and return crystal structure entries.\\n    From Magpie https://bitbucket.org/wolverton/magpie\\n\\n    =================   ======================\\n    length                                  18\\n    header                    formation_energy\\n    molecules rep.                 composition\\n    Features                                 0\\n    Returns                             1 list\\n    =================   ======================\\n\\n    Returns\\n    -------\\n    entries: list\\n        The list of crystal structure entries from CrystalStructureEntry class.\\n\\n    Examples\\n    --------\\n    >>> from chemml.datasets import load_crystal_structures\\n    >>> entries = load_crystal_structures()\\n    >>> print(len(entries))\\n    18\\n    ',\n      inputs: [],\n      outputs: [\n        {\n          name: 'entries',\n          docstring:\n            'The list of crystal structure entries from CrystalStructureEntry class.',\n          param_type: ['list'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'load_organic_density',\n      docstring:\n        \"Load and return 500 small organic molecules with their density and molecular descriptors.\\n\\n    =================   ======================\\n    rows                                   500\\n    Columns                                202\\n    last twoo headers     smiles,density_Kg/m3\\n    molecules rep.                      SMILES\\n    Features                               200\\n    Returns                       3 dataframes\\n    =================   ======================\\n\\n    Returns\\n    -------\\n    smiles: pandas dataframe\\n        The SMILES representation of molecules, shape: (500,1)\\n\\n    density: pandas dataframe\\n        The density of molecules (Kg/m3), shape: (500,1)\\n\\n    features: pandas dataframe\\n        The molecular descriptors of molecules, shape: (500,200)\\n\\n    Examples\\n    --------\\n    >>> from chemml.datasets import load_organic_density\\n    >>> smi, density, features = load_organic_density()\\n    >>> print(list(smi.columns))\\n    ['smiles']\\n    >>> print(features.shape)\\n    (500, 200)\\n    \",\n      inputs: [],\n      outputs: [\n        {\n          name: 'smiles',\n          docstring: 'The SMILES representation of molecules, shape: (500,1)',\n          param_type: ['dataframe'],\n          returned: true\n        },\n        {\n          name: 'density',\n          docstring: 'The density of molecules (Kg/m3), shape: (500,1)',\n          param_type: ['dataframe'],\n          returned: true\n        },\n        {\n          name: 'features',\n          docstring: 'The molecular descriptors of molecules, shape: (500,200)',\n          param_type: ['dataframe'],\n          returned: true\n        }\n      ]\n    },\n    {\n      name: 'load_xyz_polarizability',\n      docstring:\n        'Load and return xyz files and polarizability (Bohr^3).\\n    The xyz coordinates of small organic molecules are optimized with BP86/def2svp level of theory.\\n    Polarizability of the molecules are also calcualted in the same level of thoery.\\n\\n    =================   ======================\\n    rows                                    50\\n    Columns                                  1\\n    header                      polarizability\\n    molecules rep.                         xyz\\n    Features                                 0\\n    Returns             1 dataframe and 1 dict\\n    =================   ======================\\n\\n    Returns\\n    -------\\n    molecules: list\\n        The list of molecule objects with xyz coordinates.\\n\\n    pol: pandas dataframe\\n        The polarizability of each molecule as a column of dataframe.\\n\\n    Examples\\n    --------\\n    >>> from chemml.datasets import load_xyz_polarizability\\n    >>> molecules, polarizabilities = load_xyz_polarizability()\\n    >>> print(len(molecules))\\n    50\\n    >>> print(polarizabilities.shape)\\n    (50, 1)\\n    ',\n      inputs: [],\n      outputs: [\n        {\n          name: 'molecules',\n          docstring: 'The list of molecule objects with xyz coordinates.',\n          param_type: ['list'],\n          returned: true\n        },\n        {\n          name: 'pol',\n          docstring:\n            'The polarizability of each molecule as a column of dataframe.',\n          param_type: ['dataframe'],\n          returned: true\n        }\n      ]\n    }\n  ],\n  nodes: [],\n  library: 'chemml',\n  module: 'datasets'\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/jsons/chemmlDatasetsUi.js","export default {\n  name: 'chemml.wrapper.preprocessing',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [],\n  nodes: [\n    {\n      name: 'SplitColumns',\n      docstring: '\\n    This method splits a data matrix by columns.',\n      inputs: [\n        {\n          name: 'selection',\n          docstring:\n            \"if positive integer, it's the number of columns to be selected from left side of dataframe and returns as first data frame (df1). if negative integer, it's the number of columns to be selected from right side of dataframe and returns as first data frame (df1).\",\n          param_type: ['int'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '1',\n          options: null\n        }\n      ],\n      outputs: [],\n      node_functions: [\n        {\n          name: '__init__',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'fit',\n          display_name: 'split_columns',\n          docstring:\n            '\\n        The main function to split the input dataframe.',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'the input array',\n              param_type: ['array'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'X1',\n              docstring: 'Left part of the split data matrix',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'X2',\n              docstring: 'Right part of the split data matrix',\n              param_type: ['array'],\n              returned: true\n            }\n          ]\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'TrainTestSplit',\n      docstring:\n        'A module to split a data matrix into train and test (or validation) samples',\n      inputs: [\n        {\n          name: 'test_fraction',\n          docstring:\n            'The fraction of samples to be selected for the test. If a value not in (0, 1.0) is provided we default to 0.25',\n          param_type: ['float'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: '0.25',\n          options: null\n        }\n      ],\n      outputs: [],\n      node_functions: [\n        {\n          name: '__init__',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'split',\n          display_name: 'train_test_split',\n          docstring:\n            'The function to call for performing the split of the data matrix',\n          inputs: [\n            {\n              name: 'X',\n              docstring: 'the input array',\n              param_type: ['array'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            }\n          ],\n          outputs: [\n            {\n              name: 'X1',\n              docstring:\n                'The training data matrix with ((1 - test_fraction) * n_samples) rows',\n              param_type: ['array'],\n              returned: true\n            },\n            {\n              name: 'X2',\n              docstring:\n                'The testing data matrix with (test_fraction * n_samples) rows',\n              param_type: ['array'],\n              returned: true\n            }\n          ]\n        }\n      ],\n      nodes: []\n    }\n  ],\n  library: 'chemml',\n  module: 'wrapper.preprocessing'\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/jsons/chemmlWrapperPreprocessing_ui_prepare.js","export default {\n  name: 'chemml.wrapper.preprocessing',\n  docstring: '',\n  inputs: [],\n  outputs: [],\n  node_functions: [],\n  nodes: [\n    {\n      name: 'SaveCSV',\n      docstring:\n        '\\n    Write pandas DataFrame to a comma-seprated-values(CSV) file.',\n      inputs: [\n        {\n          name: 'file_path',\n          docstring: 'The path for the CSV file',\n          param_type: ['str'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'record_time',\n          docstring:\n            'If True, the current time will be added to the file name.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'False',\n          options: null\n        },\n        {\n          name: 'index',\n          docstring:\n            'If True, the index of the dataframe will be also stored as the first column.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'False',\n          options: null\n        },\n        {\n          name: 'header',\n          docstring: 'If True, the header of the dataframe will be stored.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'False',\n          options: null\n        }\n      ],\n      outputs: [],\n      node_functions: [\n        {\n          name: '__init__',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'fit',\n          display_name: 'write',\n          docstring:\n            '\\n        Write DataFrame to a comma-seprated-values CSV) file.',\n          inputs: [\n            {\n              name: 'df',\n              docstring: 'The input pandas dataframe',\n              param_type: ['dataframe'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'main_directory',\n              docstring:\n                'if there is a main directory for entire chemml wrapper project',\n              param_type: ['str'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: '',\n              options: null\n            }\n          ],\n          outputs: []\n        }\n      ],\n      nodes: []\n    },\n    {\n      name: 'SaveFile',\n      docstring:\n        '\\n    Write any input data to a file in string format.\\n    This is good for making text files and keeping track of intermediate data.',\n      inputs: [\n        {\n          name: 'file_path',\n          docstring: 'The path for the CSV file',\n          param_type: ['str'],\n          expected_shape: null,\n          is_optional: false,\n          default_value: null,\n          options: null\n        },\n        {\n          name: 'record_time',\n          docstring:\n            'If True, the current time will be added to the file name.',\n          param_type: ['bool'],\n          expected_shape: null,\n          is_optional: true,\n          default_value: 'False',\n          options: null\n        }\n      ],\n      outputs: [],\n      node_functions: [\n        {\n          name: '__init__',\n          docstring: 'None',\n          inputs: [],\n          outputs: []\n        },\n        {\n          name: 'fit',\n          display_name: 'write',\n          docstring:\n            '\\n        This function Write an input data X to a file as a string.',\n          inputs: [\n            {\n              name: 'df',\n              docstring: 'The input pandas dataframe',\n              param_type: ['dataframe'],\n              expected_shape: null,\n              is_optional: false,\n              default_value: null,\n              options: null\n            },\n            {\n              name: 'main_directory',\n              docstring:\n                'if there is a main directory for entire chemml wrapper project',\n              param_type: ['str'],\n              expected_shape: null,\n              is_optional: true,\n              default_value: '',\n              options: null\n            }\n          ],\n          outputs: []\n        }\n      ],\n      nodes: []\n    }\n  ],\n  library: 'chemml',\n  module: 'wrapper.preprocessing'\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/jsons/chemmlWrapperPreprocessing_ui.js","var menu = {\n  Input: {\n    CSV: {\n      pandas: {\n        name: [],\n        functions: []\n      }\n    },\n    Chemical: {\n      chemml: {\n        name: [],\n        functions: []\n      }\n    }\n  },\n  Represent: {\n    'Dimensionality Reduction': {\n      sklearn: {\n        name: [],\n        functions: []\n      }\n    },\n    'Chemical': {\n      chemml: {\n        name: [],\n        functions: []\n      }\n    }\n  },\n  Prepare: {\n    'Preprocessing': {\n      sklearn: {\n        name: [],\n        functions: []\n      }\n    },\n    'Data Splitting': {\n      chemml: {\n        name: [],\n        functions: []\n      }\n    }\n  },\n  Model: {\n    'Linear': {\n      sklearn: {\n        name: [],\n        functions: []\n      }\n    },\n    'Neural Network': {\n      keras: {\n        name: [],\n        functions: []\n      }\n    },\n    'Support Vector Machines': {\n      sklearn: {\n        name: [],\n        functions: []\n      }\n    }\n  },\n  'Optimize': {\n    'Selection': {\n      'sklearn': {\n        name: [],\n        functions: []\n      }\n    },\n    'Metrics': {\n      'sklearn': {\n        name: [],\n        functions: []\n      }\n    }\n  },\n  Output: {\n    'Store Plot': {\n      chemml: {\n        name: [],\n        functions: []\n      }\n    },\n    'Store Data': {\n      chemml: {\n        name: [],\n        functions: []\n      }\n    }\n  }\n}\n\nexport default menu\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/jsons/menu.js","import _ from 'lodash'\n\nfunction getEditNodeOnClickFunction (self) {\n  return function (event) {\n    let target = event.target || event.cyTarget\n    let id = target.data().id\n    let node = {\n      group: 'nodes',\n      data: self.cy.getElementById(id).data(),\n      position: self.cy.getElementById(id).position()\n    }\n    self.$store.commit('setSelectedNodeId', id)\n    self.$store.commit('setSelectedNodeElem', node)\n    self.$store.commit('showEditNode')\n  }\n}\n\nfunction getEditEdgeOnClickFunction (self) {\n  return function (event) {\n    let target = event.target || event.cyTarget\n    let id = target.data().id\n    let edge = {\n      group: 'edges',\n      data: self.cy.getElementById(id).data()\n    }\n    self.$store.commit('setSelectedEdge', edge)\n    self.$store.commit('showEditEdge')\n  }\n}\n\nfunction getRemoveNodeOnClickFunction (self) {\n  return function (event) {\n    let target = event.target || event.cyTarget\n    let id = target.data().id\n    self.cy.remove(self.cy.$id(id))\n  }\n}\n\nfunction getRemoveEdgeOnClickFunction (self) {\n  return function (event) {\n    let target = event.target || event.cyTarget\n    let id = target.data().id\n    self.cy.remove(self.cy.$id(id))\n  }\n}\n\nfunction getAddNodeOnClickFunction (self) {\n  return function (event) {\n    self.$store.commit('showAddNode')\n    const pos = event.position || event.cyPosition\n    self.$store.commit('setCyClickPos', { x: pos.x, y: pos.y })\n  }\n}\n\nfunction getEdgeDropFunction (self) {\n  return function (sourceNode, targetNode, addedEles) {\n    // console.log('\"from mere\"')\n    // console.log(sourceNode.data())\n    // console.log(targetNode.data())\n    console.log(addedEles.data())\n    if (addedEles) {\n      // console.log(addedEles.data().source + '-' + addedEles.data().target)\n      // if (sourceNode.data().params.op.length === 0) {\n      //   sourceNode.data().params.op.push({'name': 'obj'})\n      // }\n      // if (targetNode.data().params.inp.length === 0) {\n      //   targetNode.data().params.inp.push({'name': 'obj'})\n      // }\n      console.log('source node data', sourceNode.data().params)\n      console.log('target node data', targetNode.data().params)\n      let sFunc = sourceNode.data().params.op\n      let tFunc = targetNode.data().params.inp\n      console.log('sfunc', sFunc)\n      console.log('tfnc', tFunc)\n      let edge = {\n        group: 'edges',\n        data: addedEles.data()\n      }\n      edge.data.inputs = _.cloneDeep(sFunc)\n      edge.data.outputs = _.cloneDeep(tFunc)\n\n      self.$store.commit('setSelectedEdge', edge)\n      self.$store.commit('showEditEdge')\n    }\n  }\n}\n\nexport default{\n  getEditNodeOnClickFunction,\n  getEditEdgeOnClickFunction,\n  getRemoveNodeOnClickFunction,\n  getRemoveEdgeOnClickFunction,\n  getAddNodeOnClickFunction,\n  getEdgeDropFunction\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/store/modules/_utils.js","\n// initial state\nconst state = {\n  addNodeVisible: false,\n  editNodeVisible: false,\n  editEdgeVisible: false,\n  loadGraphVisible: false,\n  saveGraphVisible: false,\n  helpVisible: false,\n  updateGraphVisible: false,\n  wizardVisible: false\n}\n\n// getters\nconst getters = {\n  addNodeVisible: state => state.addNodeVisible,\n  editNodeVisible: state => state.editNodeVisible,\n  editEdgeVisible: state => state.editEdgeVisible,\n  loadGraphVisible: state => state.loadGraphVisible,\n  saveGraphVisible: state => state.saveGraphVisible,\n  updateGraphVisible: state => state.updateGraphVisible,\n  wizardVisible: state => state.wizardVisible,\n  helpVisible: state => state.helpVisible\n}\n\n// actions\nconst actions = {\n  // setCytoscapeInitConfig ({ commit }, container) {\n  //   return new Promise((resolve, reject) => {\n  //     cytoscape.getCytoscapeInitConfig(cytoscapeConfig => {\n  //       cytoscapeConfig.container = container\n  //       commit('setCytoscapeConfig', cytoscapeConfig)\n  //       resolve()\n  //     })\n  //   })\n  // },\n  //\n  // setEdgehandlesConfig ({ commit }) {\n  //   return new Promise((resolve, reject) => {\n  //     cytoscape.getEdgehandlesConfig(edgehandlesConfig => {\n  //       commit('setEdgehandlesConfig', edgehandlesConfig)\n  //       resolve()\n  //     })\n  //   })\n  // },\n  //\n  // setContextMenusConfig ({ commit }) {\n  //   return new Promise((resolve, reject) => {\n  //     cytoscape.getContextMenusConfig(contextMenusConfig => {\n  //       commit('setContextMenusConfig', contextMenusConfig)\n  //       resolve()\n  //     })\n  //   })\n  // },\n  //\n  // setCy ({ commit }, cyObj) {\n  //   return new Promise((resolve, reject) => {\n  //     commit('setCy', cyObj)\n  //     resolve()\n  //   })\n  // }\n\n}\n\n// mutations\nconst mutations = {\n  showAddNode (state) {\n    state.addNodeVisible = true\n  },\n  showEditNode (state) {\n    state.editNodeVisible = true\n  },\n  showEditEdge (state) {\n    state.editEdgeVisible = true\n  },\n  showSaveGraph (state) {\n    state.saveGraphVisible = true\n  },\n  showHelp (state) {\n    state.helpVisible = true\n  },\n  hideHelp (state) {\n    state.helpVisible = false\n  },\n  showLoadGraph (state) {\n    state.loadGraphVisible = true\n  },\n  showUpdateGraph (state) {\n    state.updateGraphVisible = true\n  },\n  showWizard (state) {\n    state.wizardVisible = true\n  },\n  hideAddNode (state) {\n    state.addNodeVisible = false\n  },\n  hideEditNode (state) {\n    state.editNodeVisible = false\n  },\n  hideEditEdge (state) {\n    state.editEdgeVisible = false\n  },\n  hideSaveGraph (state) {\n    state.saveGraphVisible = false\n  },\n  hideLoadGraph (state) {\n    state.loadGraphVisible = false\n  },\n  hideUpdateGraph (state) {\n    state.updateGraphVisible = false\n  },\n  hideWizard (state) {\n    state.wizardVisible = false\n  }\n  // setAddNode (state, value) {\n  //   state.addNodeVisible = value\n  // },\n  // setEditNode (state, value) {\n  //   state.editNodeVisible = value\n  // },\n  // setEditEdge (state, value) {\n  //   state.editEdgeVisible = value\n  // }\n}\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/store/modules/modals.js","import auth from '../../api/auth'\nimport session from '../../api/session'\nimport {\n  LOGIN_BEGIN,\n  LOGIN_FAILURE,\n  LOGIN_SUCCESS,\n  LOGOUT,\n  REMOVE_TOKEN,\n  SET_TOKEN\n} from './types'\n\nconst TOKEN_STORAGE_KEY = 'TOKEN_STORAGE_KEY'\n\nconst initialState = {\n  authenticating: false,\n  error: false,\n  token: null\n}\n\nconst getters = {\n  isAuthenticated: state => !!state.token,\n  loginFailed: state => state.error\n}\n\nconst actions = {\n  login ({ commit }, { username, password }) {\n    commit(LOGIN_BEGIN)\n    return auth.login(username, password)\n      .then(({ data }) => commit(SET_TOKEN, data.key))\n      .then(() => commit(LOGIN_SUCCESS))\n      .catch(() => commit(LOGIN_FAILURE))\n  },\n  logout ({ commit }) {\n    return auth.logout()\n      .then(() => commit(LOGOUT))\n      .finally(() => commit(REMOVE_TOKEN))\n  },\n  initialize ({ commit }) {\n    const token = localStorage.getItem(TOKEN_STORAGE_KEY)\n\n    if (token) {\n      commit(SET_TOKEN, token)\n    } else {\n      commit(REMOVE_TOKEN)\n    }\n  }\n}\n\nconst mutations = {\n  [LOGIN_BEGIN] (state) {\n    state.authenticating = true\n    state.error = false\n  },\n  [LOGIN_FAILURE] (state) {\n    state.authenticating = false\n    state.error = true\n  },\n  [LOGIN_SUCCESS] (state) {\n    state.authenticating = false\n    state.error = false\n  },\n  [LOGOUT] (state) {\n    state.authenticating = false\n    state.error = false\n  },\n  [SET_TOKEN] (state, token) {\n    localStorage.setItem(TOKEN_STORAGE_KEY, token)\n    session.defaults.headers.Authorization = `Token ${token}`\n    state.token = token\n  },\n  [REMOVE_TOKEN] (state) {\n    localStorage.removeItem(TOKEN_STORAGE_KEY)\n    delete session.defaults.headers.Authorization\n    state.token = null\n  }\n}\n\nexport default {\n  namespaced: true,\n  state: initialState,\n  getters,\n  actions,\n  mutations\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/store/modules/auth.js","import auth from '../../api/auth'\n\nimport {\n  PASSWORD_RESET_BEGIN,\n  PASSWORD_RESET_CLEAR,\n  PASSWORD_RESET_FAILURE,\n  PASSWORD_RESET_SUCCESS,\n  PASSWORD_EMAIL_BEGIN,\n  PASSWORD_EMAIL_CLEAR,\n  PASSWORD_EMAIL_FAILURE,\n  PASSWORD_EMAIL_SUCCESS\n} from './types'\n\nexport default {\n  namespaced: true,\n  state: {\n    emailCompleted: false,\n    emailError: false,\n    emailLoading: false,\n    resetCompleted: false,\n    resetError: false,\n    resetLoading: false\n  },\n  actions: {\n    resetPassword ({ commit }, { uid, token, password1, password2 }) {\n      commit(PASSWORD_RESET_BEGIN)\n      return auth.resetAccountPassword(uid, token, password1, password2)\n        .then(() => commit(PASSWORD_RESET_SUCCESS))\n        .catch(() => commit(PASSWORD_RESET_FAILURE))\n    },\n    sendPasswordResetEmail ({ commit }, { email }) {\n      commit(PASSWORD_EMAIL_BEGIN)\n      return auth.sendAccountPasswordResetEmail(email)\n        .then(() => commit(PASSWORD_EMAIL_SUCCESS))\n        .catch(() => commit(PASSWORD_EMAIL_FAILURE))\n    },\n    clearResetStatus ({ commit }) {\n      commit(PASSWORD_RESET_CLEAR)\n    },\n    clearEmailStatus ({ commit }) {\n      commit(PASSWORD_EMAIL_CLEAR)\n    }\n  },\n  mutations: {\n    [PASSWORD_RESET_BEGIN] (state) {\n      state.resetLoading = true\n    },\n    [PASSWORD_RESET_CLEAR] (state) {\n      state.resetCompleted = false\n      state.resetError = false\n      state.resetLoading = false\n    },\n    [PASSWORD_RESET_FAILURE] (state) {\n      state.resetError = true\n      state.resetLoading = false\n    },\n    [PASSWORD_RESET_SUCCESS] (state) {\n      state.resetCompleted = true\n      state.resetError = false\n      state.resetLoading = false\n    },\n    [PASSWORD_EMAIL_BEGIN] (state) {\n      state.emailLoading = true\n    },\n    [PASSWORD_EMAIL_CLEAR] (state) {\n      state.emailCompleted = false\n      state.emailError = false\n      state.emailLoading = false\n    },\n    [PASSWORD_EMAIL_FAILURE] (state) {\n      state.emailError = true\n      state.emailLoading = false\n    },\n    [PASSWORD_EMAIL_SUCCESS] (state) {\n      state.emailCompleted = true\n      state.emailError = false\n      state.emailLoading = false\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/store/modules/password.js","import auth from '../../api/auth'\n\nimport {\n  ACTIVATION_BEGIN,\n  ACTIVATION_CLEAR,\n  ACTIVATION_FAILURE,\n  ACTIVATION_SUCCESS,\n  REGISTRATION_BEGIN,\n  REGISTRATION_CLEAR,\n  REGISTRATION_FAILURE,\n  REGISTRATION_SUCCESS\n} from './types'\n\nexport default {\n  namespaced: true,\n  state: {\n    activationCompleted: false,\n    activationError: false,\n    activationLoading: false,\n    registrationCompleted: false,\n    registrationError: false,\n    registrationLoading: false\n  },\n  actions: {\n    createAccount ({ commit }, { username, password1, password2, email }) {\n      commit(REGISTRATION_BEGIN)\n      return auth.createAccount(username, password1, password2, email)\n        .then(() => commit(REGISTRATION_SUCCESS))\n        .catch(() => commit(REGISTRATION_FAILURE))\n    },\n    activateAccount ({ commit }, { key }) {\n      commit(ACTIVATION_BEGIN)\n      return auth.verifyAccountEmail(key)\n        .then(() => commit(ACTIVATION_SUCCESS))\n        .catch(() => commit(ACTIVATION_FAILURE))\n    },\n    clearRegistrationStatus ({ commit }) {\n      commit(REGISTRATION_CLEAR)\n    },\n    clearActivationStatus ({ commit }) {\n      commit(ACTIVATION_CLEAR)\n    }\n  },\n  mutations: {\n    [ACTIVATION_BEGIN] (state) {\n      state.activationLoading = true\n    },\n    [ACTIVATION_CLEAR] (state) {\n      state.activationCompleted = false\n      state.activationError = false\n      state.activationLoading = false\n    },\n    [ACTIVATION_FAILURE] (state) {\n      state.activationError = true\n      state.activationLoading = false\n    },\n    [ACTIVATION_SUCCESS] (state) {\n      state.activationCompleted = true\n      state.activationError = false\n      state.activationLoading = false\n    },\n    [REGISTRATION_BEGIN] (state) {\n      state.registrationLoading = true\n    },\n    [REGISTRATION_CLEAR] (state) {\n      state.registrationCompleted = false\n      state.registrationError = false\n      state.registrationLoading = false\n    },\n    [REGISTRATION_FAILURE] (state) {\n      state.registrationError = true\n      state.registrationLoading = false\n    },\n    [REGISTRATION_SUCCESS] (state) {\n      state.registrationCompleted = true\n      state.registrationError = false\n      state.registrationLoading = false\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/store/modules/signup.js","import graph from '../../api/graph'\n\nconst state = {\n  usergraphs: null,\n  rootgraphs: null,\n  error: false,\n  currentGraphId: '48',\n  currentGraphType: 'root',\n  currentGraphTitle: 'Boston House Prices',\n  graphruns: null\n}\n\nconst getters = {\n  usergraphs: state => state.usergraphs,\n  rootgraphs: state => state.rootgraphs,\n  error: state => state.error,\n  currentGraphId: state => state.currentGraphId,\n  currentGraphType: state => state.currentGraphType,\n  currentGraphTitle: state => state.currentGraphTitle,\n  graphruns: state => state.graphruns\n}\n\nconst actions = {\n  updateRootGraphs ({ commit }) {\n    // console.log('in store')\n    return graph.getRootGraphs()\n      .then(({ data }) => commit('setRootGraphs', data))\n      .then(() => commit('apiSuccess'))\n      .catch(() => commit('apiError'))\n  },\n  updateUserGraphs ({ commit }) {\n    return graph.getUserGraphs()\n      .then(({ data }) => commit('setUserGraphs', data))\n      .then(() => commit('apiSuccess'))\n      .catch(() => commit('apiError'))\n  },\n  updateCurrentUserGraph ({ commit }, data) {\n    // console.log(state.currentGraphTitle)\n    return graph.updateCurrentUserGraph(data.id, {'title': state.currentGraphTitle, 'content': data.content})\n      .then(() => commit('apiSuccess'))\n      .catch(() => commit('apiError'))\n  },\n  saveCurrentUserGraph ({ commit }, data) {\n    return graph.saveCurrentUserGraph({'title': data.title, 'content': data.content})\n      .then(() => commit('apiSuccess'))\n      .catch(() => commit('apiError'))\n  },\n  setCurrentGraphId ({commit}, graphId) {\n    commit('setCurrentGraphId', graphId)\n  },\n  setCurrentGraphType ({commit}, graphType) {\n    commit('setCurrentGraphType', graphType)\n  },\n  setCurrentGraphTitle ({commit}, graphTitle) {\n    commit('setCurrentGraphTitle', graphTitle)\n  },\n  runCurrentGraph ({commit}) {\n    return graph.runGraph({'graph_id': state.currentGraphId})\n      .then(() => commit('apiSuccess'))\n      .catch(() => commit('apiError'))\n  },\n  setGraphRuns ({ commit }) {\n    return graph.getGraphRuns()\n      .then(({ data }) => commit('setGraphRuns', data))\n      .then(() => commit('apiSuccess'))\n      .catch(() => commit('apiError'))\n  }\n}\n\nconst mutations = {\n  setRootGraphs (state, data) {\n    state.rootgraphs = data\n  },\n  setUserGraphs (state, data) {\n    state.usergraphs = data\n  },\n  apiError (state) {\n    state.error = true\n  },\n  apiSuccess (state) {\n    state.error = false\n  },\n  setCurrentGraphId (state, graphId) {\n    state.currentGraphId = graphId\n  },\n  setCurrentGraphType (state, graphType) {\n    state.currentGraphType = graphType\n  },\n  setCurrentGraphTitle (state, graphTitle) {\n    // console.log('asdf : ' + graphTitle)\n    state.currentGraphTitle = graphTitle\n  },\n  setGraphRuns (state, data) {\n    var newData = []\n    data.forEach(function (item) {\n      var row = {\n        'id': item.content,\n        'graph': item.graph.title,\n        'start_time': item.created,\n        'status': item.state,\n        'actions': \"<a id='\" + item.content + \"' href='api/downloadGraphRun?run=\" + item.content + \"' download>download</a>\"\n      }\n      row.status = item.state === 0 ? 'Created'\n        : item.state === 1 ? 'Requested'\n          : item.state === 2 ? 'Queued'\n            : item.state === 3 ? 'Started'\n              : item.state === 4 ? 'Error'\n                : item.state === 5 ? 'Success'\n                  : item.state === 6 ? 'Error' : 'NA'\n      newData.push(row)\n    })\n    state.graphruns = newData\n  }\n}\n\nexport default {\n  namespaced: true,\n  state: state,\n  getters,\n  actions,\n  mutations\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/store/modules/graph.js","import session from './session'\n\nexport default {\n  getUserGraphs () {\n    return session.get('https://madeatub.buffalo.edu/mltoolkit/api/usergraphs/')\n  },\n  getRootGraphs () {\n    return session.get('https://madeatub.buffalo.edu/mltoolkit/api/rootgraphs/')\n  },\n  updateCurrentUserGraph (graphId, payload) {\n    return session.put('https://madeatub.buffalo.edu/mltoolkit/api/graphs/' + graphId + '/', payload)\n  },\n  saveCurrentUserGraph (data) {\n    return session.post('https://madeatub.buffalo.edu/mltoolkit/api/graphs/', data)\n  },\n  runGraph (data) {\n    return session.post('https://madeatub.buffalo.edu/mltoolkit/api/rungraph/', data)\n  },\n  getGraphRuns () {\n    return session.get('https://madeatub.buffalo.edu/mltoolkit/api/graphruns/')\n  }\n}\n// export default {\n//   getUserGraphs () {\n//     return session.get('/api/usergraphs/')\n//   },\n//   getRootGraphs () {\n//     return session.get('/api/rootgraphs/')\n//   },\n//   updateCurrentUserGraph (graphId, payload) {\n//     return session.put('/api/graphs/' + graphId + '/', payload)\n//   },\n//   saveCurrentUserGraph (data) {\n//     return session.post('/api/graphs/', data)\n//   },\n//   runGraph (data) {\n//     return session.post('/api/rungraph/', data)\n//   },\n//   getGraphRuns () {\n//     return session.get('/api/graphruns/')\n//   }\n// }\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/graph.js","/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Full.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Full.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4fd2d3e0\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Full.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/containers/Full.vue\n// module id = 1091\n// module chunks = 1","export default {\n  items: [\n    {\n      name: 'Home',\n      url: '/landing',\n      icon: 'icon-drawer'\n    },\n    {\n      name: 'Dashboard',\n      url: '/dashboard',\n      icon: 'icon-speedometer'\n    },\n    {\n      name: 'Results',\n      url: '/results',\n      icon: 'icon-direction'\n    },\n    {\n      name: 'Visualizations',\n      url: '/visual',\n      icon: 'icon-pie-chart'\n    }\n  ]\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/_nav.js","/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Aside.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Aside.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-441e579c\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Aside.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Aside.vue\n// module id = 1094\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('aside',{staticClass:\"aside-menu\"})}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-441e579c\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Aside.vue\n// module id = 1095\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Breadcrumb.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Breadcrumb.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-9c62087c\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Breadcrumb.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Breadcrumb.vue\n// module id = 1096\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ol',{staticClass:\"breadcrumb\"},_vm._l((_vm.list),function(item,index){return _c('li',{staticClass:\"breadcrumb-item\"},[(_vm.isLast(index))?_c('span',{staticClass:\"active\"},[_vm._v(_vm._s(_vm.showName(item)))]):_c('router-link',{attrs:{\"to\":item}},[_vm._v(_vm._s(_vm.showName(item)))])],1)}))}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-9c62087c\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Breadcrumb.vue\n// module id = 1097\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Callout.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Callout.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-46ade4be\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Callout.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Callout.vue\n// module id = 1098\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:_vm.classList},[_vm._t(\"default\")],2)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-46ade4be\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Callout.vue\n// module id = 1099\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Footer.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Footer.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6db2f18b\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Footer.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Footer.vue\n// module id = 1100\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('footer',{staticClass:\"app-footer\"})}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-6db2f18b\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Footer.vue\n// module id = 1101\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Header.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Header.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-54f5a076\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./Header.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Header/Header.vue\n// module id = 1102\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./HeaderDropdown.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./HeaderDropdown.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-39a26b66\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./HeaderDropdown.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Header/HeaderDropdown.vue\n// module id = 1103\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-nav-item-dropdown',{attrs:{\"right\":\"\",\"no-caret\":\"\"}},[_c('template',{slot:\"button-content\"},[_c('i',{staticClass:\"fa fa-user-circle fa-lg\"})]),_vm._v(\" \"),_c('b-dropdown-item',[_c('i',{staticClass:\"fa fa-lock\"}),_vm._v(\" \"),_c('router-link',{attrs:{\"to\":\"/logout\"}},[_vm._v(\"logout\")])],1)],2)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-39a26b66\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Header/HeaderDropdown.vue\n// module id = 1104\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('header',{staticClass:\"app-header navbar\"},[_c('button',{staticClass:\"navbar-toggler mobile-sidebar-toggler d-lg-none\",attrs:{\"type\":\"button\"},on:{\"click\":_vm.mobileSidebarToggle}},[_c('span',{staticClass:\"navbar-toggler-icon\"})]),_vm._v(\" \"),_c('b-link',{staticClass:\"navbar-brand\",attrs:{\"to\":\"#\"}}),_vm._v(\" \"),_c('button',{staticClass:\"navbar-toggler sidebar-toggler d-md-down-none mr-auto\",attrs:{\"type\":\"button\"},on:{\"click\":_vm.sidebarToggle}},[_c('span',{staticClass:\"navbar-toggler-icon\"})]),_vm._v(\" \"),_c('b-navbar-nav',{staticClass:\"ml-auto\"},[_c('HeaderDropdown')],1)],1)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-54f5a076\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Header/Header.vue\n// module id = 1105\n// module chunks = 1","function injectStyle (context) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true,\\\"alias\\\":{\\\"../img\\\":\\\"../static/img\\\"}}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1b899e65\\\",\\\"scoped\\\":false,\\\"sourceMap\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Sidebar.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Sidebar.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Sidebar.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1b899e65\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./Sidebar.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Sidebar/Sidebar.vue\n// module id = 1106\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarFooter.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarFooter.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-419727a5\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./SidebarFooter.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Sidebar/SidebarFooter.vue\n// module id = 1108\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\"div\")}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-419727a5\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Sidebar/SidebarFooter.vue\n// module id = 1109\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarForm.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarForm.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6bed3424\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./SidebarForm.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Sidebar/SidebarForm.vue\n// module id = 1110\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\"div\")}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-6bed3424\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Sidebar/SidebarForm.vue\n// module id = 1111\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarHeader.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarHeader.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-a0777a52\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./SidebarHeader.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Sidebar/SidebarHeader.vue\n// module id = 1112\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c(\"div\")}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-a0777a52\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Sidebar/SidebarHeader.vue\n// module id = 1113\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarMinimizer.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarMinimizer.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-a5c6b7ae\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./SidebarMinimizer.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Sidebar/SidebarMinimizer.vue\n// module id = 1114\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('button',{staticClass:\"sidebar-minimizer\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){_vm.sidebarMinimize();_vm.brandMinimize()}}})}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-a5c6b7ae\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Sidebar/SidebarMinimizer.vue\n// module id = 1115\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarNavDivider.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarNavDivider.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6d1c2ccd\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./SidebarNavDivider.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Sidebar/SidebarNavDivider.vue\n// module id = 1116\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',{class:_vm.classList})}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-6d1c2ccd\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Sidebar/SidebarNavDivider.vue\n// module id = 1121\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarNavDropdown.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarNavDropdown.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-536afe98\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./SidebarNavDropdown.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Sidebar/SidebarNavDropdown.vue\n// module id = 1122\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('router-link',{staticClass:\"nav-item nav-dropdown\",attrs:{\"tag\":\"li\",\"to\":_vm.url,\"disabled\":\"\"}},[_c('div',{staticClass:\"nav-link nav-dropdown-toggle\",on:{\"click\":_vm.handleClick}},[_c('i',{class:_vm.icon}),_vm._v(\" \"+_vm._s(_vm.name))]),_vm._v(\" \"),_c('ul',{staticClass:\"nav-dropdown-items\"},[_vm._t(\"default\")],2)])}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-536afe98\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Sidebar/SidebarNavDropdown.vue\n// module id = 1123\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.isExternalLink)?_c('div',[_c('a',{class:_vm.classList,attrs:{\"href\":_vm.url}},[_c('i',{class:_vm.icon}),_vm._v(\" \"+_vm._s(_vm.name)+\"\\n    \"),(_vm.badge && _vm.badge.text)?_c('b-badge',{attrs:{\"variant\":_vm.badge.variant}},[_vm._v(_vm._s(_vm.badge.text))]):_vm._e()],1)]):_c('div',[_c('router-link',{class:_vm.classList,attrs:{\"to\":_vm.url}},[_c('i',{class:_vm.icon}),_vm._v(\" \"+_vm._s(_vm.name)+\"\\n    \"),(_vm.badge && _vm.badge.text)?_c('b-badge',{attrs:{\"variant\":_vm.badge.variant}},[_vm._v(_vm._s(_vm.badge.text))]):_vm._e()],1)],1)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-67792580\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Sidebar/SidebarNavLink.vue\n// module id = 1124\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarNavTitle.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarNavTitle.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-5f92ee61\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./SidebarNavTitle.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Sidebar/SidebarNavTitle.vue\n// module id = 1125\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',{class:_vm.classList},[(_vm.wrapper && _vm.wrapper.element)?[_c(_vm.wrapper.element,_vm._b({tag:\"component\"},'component',_vm.wrapper.attributes,false),[_vm._v(\"\\n      \"+_vm._s(_vm.name)+\"\\n    \")])]:[_vm._v(\"\\n    \"+_vm._s(_vm.name)+\"\\n  \")]],2)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-5f92ee61\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Sidebar/SidebarNavTitle.vue\n// module id = 1126\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('li',{class:_vm.classList,on:{\"click\":_vm.hideMobile}},[_vm._t(\"default\")],2)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-7ed4d885\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Sidebar/SidebarNavItem.vue\n// module id = 1127\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarNavLabel.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarNavLabel.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-52cff4be\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./SidebarNavLabel.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Sidebar/SidebarNavLabel.vue\n// module id = 1128\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('SidebarNavItem',{attrs:{\"classes\":_vm.classList.navItem}},[_c('a',{class:_vm.classList.navLink,attrs:{\"href\":_vm.url}},[_c('i',{class:_vm.classList.icon}),_vm._v(\" \"+_vm._s(_vm.name))])])}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-52cff4be\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Sidebar/SidebarNavLabel.vue\n// module id = 1129\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"sidebar\"},[_c('SidebarHeader'),_vm._v(\" \"),_c('SidebarForm'),_vm._v(\" \"),_c('nav',{staticClass:\"sidebar-nav\"},[_c('div',{attrs:{\"slot\":\"header\"},slot:\"header\"}),_vm._v(\" \"),_c('ul',{staticClass:\"nav\"},[_vm._l((_vm.navItems),function(item,index){return [(item.title)?[_c('SidebarNavTitle',{attrs:{\"name\":item.name,\"classes\":item.class,\"wrapper\":item.wrapper}})]:(item.divider)?[_c('SidebarNavDivider',{attrs:{\"classes\":item.class}})]:(item.label)?[_c('SidebarNavLabel',{attrs:{\"name\":item.name,\"url\":item.url,\"icon\":item.icon,\"label\":item.label,\"classes\":item.class}})]:[(item.children)?[_c('SidebarNavDropdown',{attrs:{\"name\":item.name,\"url\":item.url,\"icon\":item.icon}},[_vm._l((item.children),function(childL1,index){return [(childL1.children)?[_c('SidebarNavDropdown',{attrs:{\"name\":childL1.name,\"url\":childL1.url,\"icon\":childL1.icon}},_vm._l((childL1.children),function(childL2,index){return _c('li',{staticClass:\"nav-item\"},[_c('SidebarNavLink',{attrs:{\"name\":childL2.name,\"url\":childL2.url,\"icon\":childL2.icon,\"badge\":childL2.badge,\"variant\":item.variant}})],1)}))]:[_c('SidebarNavItem',{attrs:{\"classes\":item.class}},[_c('SidebarNavLink',{attrs:{\"name\":childL1.name,\"url\":childL1.url,\"icon\":childL1.icon,\"badge\":childL1.badge,\"variant\":item.variant}})],1)]]})],2)]:[_c('SidebarNavItem',{attrs:{\"classes\":item.class}},[_c('SidebarNavLink',{attrs:{\"name\":item.name,\"url\":item.url,\"icon\":item.icon,\"badge\":item.badge,\"variant\":item.variant}})],1)]]]})],2),_vm._v(\" \"),_vm._t(\"default\")],2),_vm._v(\" \"),_c('SidebarFooter'),_vm._v(\" \"),_c('SidebarMinimizer')],1)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-1b899e65\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Sidebar/Sidebar.vue\n// module id = 1130\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Switch.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Switch.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-39197026\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Switch.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Switch.vue\n// module id = 1131\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',{class:_vm.classList},[_c('input',{staticClass:\"switch-input\",attrs:{\"type\":\"checkbox\"},domProps:{\"value\":_vm.value,\"checked\":_vm.isChecked},on:{\"change\":_vm.handleChange}}),_vm._v(\" \"),(_vm.isOn)?[_c('span',{staticClass:\"switch-label\",attrs:{\"data-on\":_vm.on,\"data-off\":_vm.off}})]:[_c('span',{staticClass:\"switch-label\"})],_vm._v(\" \"),_c('span',{staticClass:\"switch-handle\"})],2)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-39197026\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Switch.vue\n// module id = 1132\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"app\"},[_c('AppHeader'),_vm._v(\" \"),_c('div',{staticClass:\"app-body\"},[_c('Sidebar',{attrs:{\"navItems\":_vm.nav}}),_vm._v(\" \"),_c('main',{staticClass:\"main\"},[_c('breadcrumb',{attrs:{\"list\":_vm.list}}),_vm._v(\" \"),_c('div',{staticClass:\"container-fluid\"},[_c('router-view')],1)],1),_vm._v(\" \"),_c('AppAside')],1),_vm._v(\" \"),_c('AppFooter')],1)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-4fd2d3e0\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/containers/Full.vue\n// module id = 1133\n// module chunks = 1","/* script */\nvar __vue_script__ = null\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-38d7b71b\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Landing.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/Landing.vue\n// module id = 1134\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"animated fadeIn\"},[_c('b-row',[_c('b-col',{attrs:{\"lg\":\"12\"}},[_c('h1',[_vm._v(\"MaDE@UB Machine Learning Toolkit\")]),_vm._v(\" \"),_c('h3',[_vm._v(\"A toolkit to train and test statistical models from user defined data flows with a focus on data and methods from chemical and materials sciences.\")]),_vm._v(\" \"),_c('b-row',[_c('b-col',{attrs:{\"sm\":\"4\"}},[_c('b-img',{attrs:{\"height\":\"250\",\"src\":\"https://madeatub.buffalo.edu/mltk/static/img/banner.png\",\"rounded\":\"\",\"alt\":\"Banner\"}})],1)],1),_vm._v(\" \"),_c('p',[_vm._v(\"Welcome! Our ML Toolkit provides an online web application for desigining Machine Learning (ML) models without needing to have in-depth knowledge of programming.\")]),_vm._v(\" \"),_c('p',[_vm._v(\"The app just needs a user to provide input data and define data processing operations via nodes and edges on a graph. Each node corresponds to a module that takes in data as input, performs an operation and emits processed data as output. Connections between modules (edges) enable transfer of data.\")]),_vm._v(\" \"),_c('p',[_vm._v(\"Modules are taken from popular third-party machine learning packages such as \"),_c('a',{attrs:{\"href\":\"https://scikit-learn.org/stable/\"}},[_vm._v(\"scikit-learn\")]),_vm._v(\", \"),_c('a',{attrs:{\"href\":\"https://keras.io/\"}},[_vm._v(\"keras\")]),_vm._v(\" and \"),_c('a',{attrs:{\"href\":\"https://www.tensorflow.org/\"}},[_vm._v(\"tensorflow\")]),_vm._v(\". Modules for organic/inorganic data come from RDKit, Dragon and Magpie. We use \"),_c('a',{attrs:{\"href\":\"https://github.com/hachmannlab/chemml\"}},[_vm._v(\"ChemML\")]),_vm._v(\" in the background to handle running the ML tasks.\")]),_vm._v(\" \"),_c('p',[_vm._v(\"After completing a graph, the user can hit \\\"run\\\" and sit back while the results are computed. We provide resources to handle multiple experiments, so you can choose and compare from different ML models with a few clicks and see what works best for your data!\")]),_vm._v(\" \"),_c('p',[_vm._v(\"To get started:\")]),_vm._v(\" \"),_c('ol',[_c('li',[_vm._v(\"Go to \"),_c('a',{attrs:{\"href\":\"https://madeatub.buffalo.edu/mltoolkit/#/dashboard\"}},[_vm._v(\"Dashboard\")]),_vm._v(\" by clicking the link on the left pane.\")]),_vm._v(\" \"),_c('li',[_vm._v(\"We recommend starting from a pre-defined template where common data-flow operations have been set up, for example, splitting a training set into train and test, preprocessing by standard scaling. You can access the list of available templates using the button on the top right of your dashboard.\")]),_vm._v(\" \"),_c('li',[_vm._v(\"Make changes to the templates to suit your data. You can right click on any node to alter its properties. If you wish to use a new module right click on an empty part of the canvas to choose a node. Drawing an edge between nodes connects them and enables data transfer between the two modules - the edge UI wizard will help you transfer the data matrices in the right way.\")]),_vm._v(\" \"),_c('li',[_vm._v(\"Advanced users can also start from a blank canvas, create custom data flow graphs and save it for future use!\")]),_vm._v(\" \"),_c('li',[_vm._v(\"After creating a graph and setting up all node properties click on red button to run graph (top right of the dashboard). Multiple graphs can be run asynchronously in the background. Look in the \"),_c('a',{attrs:{\"href\":\"https://madeatub.buffalo.edu/mltoolkit/#/results\"}},[_vm._v(\"Results\")]),_vm._v(\" page (see left pane) to download any output files, plots or intermediate data.\")])]),_vm._v(\" \"),_c('p')],1)],1)],1)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-38d7b71b\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/Landing.vue\n// module id = 1135\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Dashboard.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Dashboard.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-03879230\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Dashboard.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/Dashboard.vue\n// module id = 1136\n// module chunks = 1","function injectStyle (context) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true,\\\"alias\\\":{\\\"../img\\\":\\\"../static/img\\\"}}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-15ab8855\\\",\\\"scoped\\\":false,\\\"sourceMap\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./CytoscapeGraph.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./CytoscapeGraph.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./CytoscapeGraph.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-15ab8855\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./CytoscapeGraph.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/dashboard/CytoscapeGraph.vue\n// module id = 1142\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"cy\"}})}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-15ab8855\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/dashboard/CytoscapeGraph.vue\n// module id = 1191\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-243b6ee4\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./index.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/dashboard/Modals/index.vue\n// module id = 1192\n// module chunks = 1","function injectStyle (context) {\n  require(\"!!../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true,\\\"alias\\\":{\\\"../img\\\":\\\"../static/img\\\"}}!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-6768a484\\\",\\\"scoped\\\":true,\\\"sourceMap\\\":false}!../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./AddNode.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./AddNode.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./AddNode.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6768a484\\\",\\\"hasScoped\\\":true,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./AddNode.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-6768a484\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/dashboard/Modals/AddNode.vue\n// module id = 1193\n// module chunks = 1","function s4 () {\n  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)\n}\n\nfunction guid () {\n  return this.s4() + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + this.s4() + this.s4()\n}\n\nexport default {\n  s4,\n  guid\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/views/dashboard/_utils.js","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-modal',{attrs:{\"title\":\"Add Node\",\"hide-header-close\":\"\"},on:{\"ok\":function($event){_vm.handleOk()},\"cancel\":function($event){_vm.hide()}},model:{value:(_vm.myModal),callback:function ($$v) {_vm.myModal=$$v},expression:\"myModal\"}},[_c('div',[_vm._l((_vm.libHierarchy),function(stage,key1){return [_c('b-form-group',{attrs:{\"label\":key1,\"label-for\":\"radios\",\"label-cols\":3,\"horizontal\":true}},[_c('b-form-radio-group',{attrs:{\"id\":\"radios\",\"name\":\"radiosInline\"}},_vm._l((stage),function(element,key2){return _c('div',{staticClass:\"custom-control custom-radio custom-control-inline\"},[_vm._v(\"\\n            \"+_vm._s(stage[\"name\"])+\"\\n            \"),_c('input',{staticClass:\"custom-control-input\",attrs:{\"type\":\"radio\",\"id\":key2,\"name\":\"radiosInline\",\"key1\":key1,\"key2\":key2},domProps:{\"value\":JSON.stringify(element)}}),_vm._v(\" \"),_c('label',{staticClass:\"custom-control-label\",attrs:{\"for\":\"radiosInline\"}},[_vm._v(_vm._s(key2))])])}))],1)]})],2)])}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-6768a484\",\"hasScoped\":true,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/dashboard/Modals/AddNode.vue\n// module id = 1196\n// module chunks = 1","function injectStyle (context) {\n  require(\"!!../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true,\\\"alias\\\":{\\\"../img\\\":\\\"../static/img\\\"}}!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-41b23607\\\",\\\"scoped\\\":true,\\\"sourceMap\\\":false}!../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./EditNode.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./EditNode.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./EditNode.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-41b23607\\\",\\\"hasScoped\\\":true,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./EditNode.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-41b23607\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/dashboard/Modals/EditNode.vue\n// module id = 1197\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-modal',{attrs:{\"title\":\"Edit Node\"},on:{\"ok\":_vm.handleOk,\"cancel\":_vm.handleCancel},model:{value:(_vm.myModal),callback:function ($$v) {_vm.myModal=$$v},expression:\"myModal\"}},[(_vm.selectedNode.hasOwnProperty('elem'))?_c('div',[_c('strong',[_vm._v(\"Node Type\")]),_vm._v(\" \"),_vm._l((_vm.selectedNode.elem.data.info),function(lib,key1){return [_c('b-form-group',{attrs:{\"label\":key1,\"label-for\":\"radios\",\"label-cols\":3,\"horizontal\":true}},[_c('b-form-radio-group',{attrs:{\"id\":\"radios\",\"name\":\"funcRadios\"}},_vm._l((lib.name),function(func){return _c('div',{staticClass:\"custom-control custom-radio custom-control-inline\"},[_c('input',{staticClass:\"custom-control-input\",attrs:{\"type\":\"radio\",\"id\":func,\"name\":\"funcRadios\"},domProps:{\"value\":func},on:{\"click\":function($event){_vm.handleFuncChange(key1,func, lib.functions[lib.name.indexOf(func)])}}}),_vm._v(\" \"),_c('label',{staticClass:\"custom-control-label\",attrs:{\"for\":\"radiosInline\"}},[_vm._v(_vm._s(func))])])}))],1)]}),_vm._v(\" \"),(_vm.meths !==undefined)?_c('strong',[_vm._v(\"Select Class Method\")]):_vm._e(),_vm._v(\" \"),_vm._l((_vm.meths),function(param){return [_c('b-form-radio-group',{attrs:{\"id\":\"radiosmeths\",\"name\":\"methRadios\"}},[_c('input',{attrs:{\"type\":\"radio\",\"id\":param,\"name\":\"methRadios\"},domProps:{\"value\":param},on:{\"click\":function($event){_vm.handleMethChange(param)}}}),_vm._v(\" \"),_c('label',{staticClass:\"custom-control-label\",attrs:{\"for\":\"radiosInline\"}},[_vm._v(_vm._s(param))])])]}),_vm._v(\" \"),_c('br'),_vm._v(\" \"),(_vm.fparams.length>0)?_c('div',[_c('button',{staticClass:\"btn btn-success\",on:{\"click\":function($event){_vm.isHidden = !_vm.isHidden}}},[_vm._v(\"Click to Set Base Parameter Values\")]),_vm._v(\" \"),_c('b-button',{staticClass:\"btn btn-outline-info\",on:{\"click\":function($event){_vm.isHidden2 = !_vm.isHidden2}}},[_c('i',{staticClass:\"fa fa-question\"})])],1):_vm._e(),_vm._v(\" \"),_vm._l((_vm.fparams),function(param){return (!_vm.isHidden)?[_c('b-form-group',[_c('dl',{staticClass:\"row\"},[_c('dt',{staticClass:\"col-sm-4 \"},[(!param.is_optional)?_c('div',{staticClass:\"form-group required\"},[_c('label',{staticClass:\"control-label\",attrs:{\"for\":param.name}},[_vm._v(_vm._s(param.name))])]):_c('div',[_c('label',{attrs:{\"for\":param.name}},[_vm._v(_vm._s(param.name))])])]),_vm._v(\" \"),_c('dd',{staticClass:\"col-sm-7\"},[(!_vm.isHidden2)?_c('div',{staticClass:\"alert alert-light\"},[_vm._v(\"\\n                  \"+_vm._s(param.desc)+\"\\n                \")]):_vm._e()]),_vm._v(\" \"),_c('dd',{staticClass:\"col-sm-12\"},[(param.name === 'filepath_or_buffer')?_c('b-form-file',{attrs:{\"id\":param.name,\"placeholder\":\"Enter Value\"},model:{value:(param.value),callback:function ($$v) {_vm.$set(param, \"value\", $$v)},expression:\"param.value\"}}):_c('b-form-input',{attrs:{\"type\":\"text\",\"id\":param.name,\"placeholder\":\"Enter Value\"},model:{value:(param.value),callback:function ($$v) {_vm.$set(param, \"value\", $$v)},expression:\"param.value\"}})],1)])])]:_vm._e()})],2):_vm._e()])}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-41b23607\",\"hasScoped\":true,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/dashboard/Modals/EditNode.vue\n// module id = 1199\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./EditEdge.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./EditEdge.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-ae382620\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./EditEdge.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/dashboard/Modals/EditEdge.vue\n// module id = 1200\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-modal',{attrs:{\"title\":\"Edit Edge\",\"hide-header-close\":\"\"},on:{\"ok\":function($event){_vm.handleOk()},\"cancel\":function($event){_vm.hide()}},model:{value:(_vm.myModal),callback:function ($$v) {_vm.myModal=$$v},expression:\"myModal\"}},[(_vm.inputs.length>0)?_c('strong',[_vm._v(\"Source Node Outputs\")]):_vm._e(),_vm._v(\" \"),_vm._l((_vm.inputs),function(input){return [_c('b-form-group',[_c('label',{attrs:{\"for\":input.name}},[_vm._v(_vm._s(input.name))]),_vm._v(\" \"),(!_vm.isHidden2)?_c('div',{staticClass:\"alert alert-light\"},[_vm._v(\"\\n                  \"+_vm._s(input.docstring)+\"\\n                \")]):_vm._e(),_vm._v(\" \"),_c('b-form-checkbox',{attrs:{\"type\":\"\",\"id\":input.name,\"placeholder\":\"Enter Value\",\"value\":\"true\",\"unchecked-value\":\"false\"},model:{value:(input.value),callback:function ($$v) {_vm.$set(input, \"value\", $$v)},expression:\"input.value\"}})],1)]}),_vm._v(\" \"),_c('br'),_vm._v(\" \"),(_vm.outputs.length>0)?_c('strong',[_vm._v(\"Target Node Inputs\")]):_vm._e(),_c('b-button',{staticClass:\"btn-xs btn-outline-info\",on:{\"click\":function($event){_vm.isHidden2 = !_vm.isHidden2}}},[_c('i',{staticClass:\"fa fa-question\"})]),_vm._v(\" \"),_c('br'),_vm._v(\" \"),(_vm.outputs.length>0)?_c('small',[_vm._v(\" Select unique values for each from dropdown output of previous node\")]):_vm._e(),_vm._v(\" \"),_vm._l((_vm.outputs),function(output){return [_c('b-form-group',[_c('label',{attrs:{\"for\":output.name}},[_vm._v(_vm._s(output.name))]),_vm._v(\" \"),(!_vm.isHidden2)?_c('div',{staticClass:\"alert alert-light\"},[_vm._v(\"\\n                  \"+_vm._s(output.docstring)+\"\\n                \")]):_vm._e(),_vm._v(\" \"),_c('b-form-select',{attrs:{\"id\":output.name},model:{value:(output.value),callback:function ($$v) {_vm.$set(output, \"value\", $$v)},expression:\"output.value\"}},_vm._l((_vm.inputs),function(input){return _c('option',{domProps:{\"value\":input.name}},[_vm._v(\"\\n          \"+_vm._s(input.name)+\"\\n        \")])}))],1)]})],2)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-ae382620\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/dashboard/Modals/EditEdge.vue\n// module id = 1201\n// module chunks = 1","function injectStyle (context) {\n  require(\"!!../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true,\\\"alias\\\":{\\\"../img\\\":\\\"../static/img\\\"}}!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-dd0c9334\\\",\\\"scoped\\\":true,\\\"sourceMap\\\":false}!../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./LoadGraph.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./LoadGraph.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./LoadGraph.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-dd0c9334\\\",\\\"hasScoped\\\":true,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./LoadGraph.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-dd0c9334\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/dashboard/Modals/LoadGraph.vue\n// module id = 1202\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-modal',{attrs:{\"title\":\"Load Graph\",\"size\":\"lg\",\"hide-header-close\":\"\"},on:{\"ok\":function($event){_vm.handleOk()},\"cancel\":function($event){_vm.hide()}},model:{value:(_vm.myModal),callback:function ($$v) {_vm.myModal=$$v},expression:\"myModal\"}},[_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-sm-2\",staticStyle:{\"border-right\":\"1px solid #a4b7c1\"}},[_c('b-list-group',[_c('b-list-group-item',{staticClass:\"sections btn-secondary btn-sm active\",attrs:{\"id\":\"root\",\"href\":\"#\",\"view\":\"rootgraphs\"},on:{\"click\":function($event){_vm.openView('rootgraphs')}}},[_vm._v(\"Templates\")]),_vm._v(\" \"),_c('b-list-group-item',{staticClass:\"sections btn-secondary btn-sm\",attrs:{\"id\":\"user\",\"href\":\"#\",\"view\":\"usergraphs\"},on:{\"click\":function($event){_vm.openView('usergraphs')}}},[_vm._v(\"Saved\")])],1)],1),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-10 graphviews\",attrs:{\"id\":\"rootgraphs\"}},[_c('div',{staticClass:\"col-sm-6\"},[_c('select',{staticClass:\"form-control\",attrs:{\"name\":\"user\",\"size\":\"8\"}},[_vm._l((_vm.rootgraphs),function(graph){return [_c('option',{domProps:{\"value\":graph.graph_id}},[_vm._v(_vm._s(graph.title))])]})],2)])]),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-10 graphviews hiddenView\",attrs:{\"id\":\"usergraphs\"}},[_c('div',{staticClass:\"col-sm-6\"},[_c('select',{staticClass:\"form-control\",attrs:{\"name\":\"user\",\"size\":\"8\"}},[_vm._l((_vm.usergraphs),function(graph){return [_c('option',{domProps:{\"value\":graph.graph_id}},[_vm._v(_vm._s(graph.title))])]})],2)])])])])}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-dd0c9334\",\"hasScoped\":true,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/dashboard/Modals/LoadGraph.vue\n// module id = 1204\n// module chunks = 1","function injectStyle (context) {\n  require(\"!!../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true,\\\"alias\\\":{\\\"../img\\\":\\\"../static/img\\\"}}!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-7ab72377\\\",\\\"scoped\\\":true,\\\"sourceMap\\\":false}!../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./SaveGraph.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SaveGraph.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SaveGraph.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-7ab72377\\\",\\\"hasScoped\\\":true,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./SaveGraph.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-7ab72377\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/dashboard/Modals/SaveGraph.vue\n// module id = 1205\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-modal',{attrs:{\"title\":\"Save Graph\",\"hide-header-close\":\"\"},on:{\"ok\":function($event){_vm.handleOk()},\"cancel\":function($event){_vm.hide()}},model:{value:(_vm.myModal),callback:function ($$v) {_vm.myModal=$$v},expression:\"myModal\"}},[_c('div',[_c('label',{attrs:{\"for\":\"name\"}},[_vm._v(\"Name\")]),_vm._v(\" \"),_c('b-form-input',{attrs:{\"type\":\"text\",\"id\":\"name\"},model:{value:(_vm.newGraphTitle),callback:function ($$v) {_vm.newGraphTitle=$$v},expression:\"newGraphTitle\"}})],1)])}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-7ab72377\",\"hasScoped\":true,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/dashboard/Modals/SaveGraph.vue\n// module id = 1208\n// module chunks = 1","function injectStyle (context) {\n  require(\"!!../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true,\\\"alias\\\":{\\\"../img\\\":\\\"../static/img\\\"}}!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-6af6e162\\\",\\\"scoped\\\":true,\\\"sourceMap\\\":false}!../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./UpdateGraph.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./UpdateGraph.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./UpdateGraph.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6af6e162\\\",\\\"hasScoped\\\":true,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./UpdateGraph.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-6af6e162\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/dashboard/Modals/UpdateGraph.vue\n// module id = 1209\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-modal',{attrs:{\"title\":\"Update Graph\",\"ok-title\":\"Yes\",\"cancel-title\":\"No\",\"no-close-on-esc\":\"\",\"no-close-on-backdrop\":\"\",\"hide-header-close\":\"\"},on:{\"ok\":function($event){_vm.handleOk()},\"cancel\":function($event){_vm.handleCancel()}},model:{value:(_vm.myModal),callback:function ($$v) {_vm.myModal=$$v},expression:\"myModal\"}},[_c('div',[_c('h5',[_vm._v(\"Do you want update/overwrite the current graph?\")])])])}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-6af6e162\",\"hasScoped\":true,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/dashboard/Modals/UpdateGraph.vue\n// module id = 1211\n// module chunks = 1","function injectStyle (context) {\n  require(\"!!../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true,\\\"alias\\\":{\\\"../img\\\":\\\"../static/img\\\"}}!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-12646eb7\\\",\\\"scoped\\\":true,\\\"sourceMap\\\":false}!../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Wizard.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Wizard.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Wizard.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-12646eb7\\\",\\\"hasScoped\\\":true,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./Wizard.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-12646eb7\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/dashboard/Modals/Wizard.vue\n// module id = 1212\n// module chunks = 1","function injectStyle (context) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true,\\\"alias\\\":{\\\"../img\\\":\\\"../static/img\\\"}}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-1faa7a9c\\\",\\\"scoped\\\":false,\\\"sourceMap\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./FileReader.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./FileReader.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./FileReader.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-1faa7a9c\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./FileReader.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/FileReader.vue\n// module id = 1216\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',{staticClass:\"text-reader\"},[_c('input',{attrs:{\"type\":\"file\"},on:{\"change\":_vm.loadTextFromFile}}),_vm._v(\" \"),_vm._v(\"\\n  filereader\\n\")])}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-1faa7a9c\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/FileReader.vue\n// module id = 1218\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-modal',{attrs:{\"title\":\"Wizard\",\"size\":\"lg\",\"hide-header\":\"\",\"hide-footer\":\"\",\"ok-title\":\"Yes\",\"cancel-title\":\"No\",\"hide-header-close\":\"\"},on:{\"ok\":_vm.handleOk,\"cancel\":_vm.handleCancel},model:{value:(_vm.myModal),callback:function ($$v) {_vm.myModal=$$v},expression:\"myModal\"}},[_c('div',[_c('form-wizard',{ref:\"formWizard\",attrs:{\"step-size\":\"sm\",\"title\":\"Startup Wizard\",\"color\":\"#184da3\"},on:{\"on-complete\":_vm.handleOk,\"on-change\":_vm.setActiveIndex}},[_vm._l((_vm.wizHierarchy),function(stage,key1){return [(key1!='Mix')?_c('tab-content',{attrs:{\"icon\":_vm.icon[key1],\"title\":key1}},[(key1!='Finish')?_c('div',[_c('div',{staticStyle:{\"border\":\"solid rgb(164, 183, 193)\",\"border-width\":\"1px 0px\",\"padding\":\"0px 5px 10px 5px\"}},[_vm._l((1),function(index){return _c('div',{staticClass:\"row\",staticStyle:{\"margin-top\":\"10px\"}},[_c('div',{staticClass:\"col-sm-6\"},[_c('select',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.selectedFunction[key1]),expression:\"selectedFunction[key1]\"}],staticClass:\"form-control\",attrs:{\"name\":\"user\",\"size\":\"5\"},on:{\"change\":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = \"_value\" in o ? o._value : o.value;return val}); _vm.$set(_vm.selectedFunction, key1, $event.target.multiple ? $$selectedVal : $$selectedVal[0])}}},[_vm._l((stage),function(info,key2){return [_c('option',{domProps:{\"value\":key2}},[_vm._v(_vm._s(_vm.libUINames[key2]))])]}),_vm._v(\" \"),_c('option',{attrs:{\"value\":\"NA\"}},[_vm._v(\" -- \")])],2)]),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-6\"},[_c('div',{staticClass:\"col-sm-12\",staticStyle:{\"border\":\"1px solid rgb(164, 183, 193)\",\"padding\":\"15px 15px\",\"height\":\"100%\"}},[_vm._v(\"\\n                  \"+_vm._s(_vm.selectedFunction[key1])+\"\\n                  \")])])])}),_vm._v(\" \"),_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-12\",staticStyle:{\"margin-top\":\"5px\"}},[_c('b-button',{staticClass:\"float-right\",staticStyle:{\"margin-left\":\"3px\"},attrs:{\"type\":\"button\",\"variant\":\"secondary\"}},[_c('i',{staticClass:\"fa fa-plus\"})])],1)])],2)]):_c('div',{staticStyle:{\"border\":\"solid rgb(164, 183, 193)\",\"border-width\":\"1px 0px\",\"padding\":\"15px 0px\"}},[_vm._v(\"\\n          This Wizard helps you get started on the workflow\\n          \"),_c('ul',[_c('li',[_vm._v(\"\\n              To select the functions used in each step and to configure the parameters for\\n              the same right click on the node and select the 'Edit' option from the context menu.\\n            \")]),_vm._v(\" \"),_c('li',[_vm._v(\"\\n              To configure the data is passed from one step to another, right click on the edge and\\n              select the 'Edit' option from the context menu\\n            \")]),_vm._v(\" \"),_c('li',[_vm._v(\"\\n              To create a new edge, hover over the source node, click and drag the edge-handle\\n              (red circle) to the destination node. Configure the parameters in the pop-up window.\\n            \")]),_vm._v(\" \"),_c('li',[_vm._v(\"\\n              To remove a node or a edge, right click on the same and select the 'Remove' option\\n              from the context menu.\\n            \")])])])]):_vm._e()]})],2),_vm._v(\" \"),_c('span')],1),_vm._v(\" \"),_c('textarea',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.text),expression:\"text\"}],attrs:{\"rows\":\"10\"},domProps:{\"value\":(_vm.text)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.text=$event.target.value}}}),_vm._v(\" \"),_c('br'),_vm._v(\" \"),_c('file-reader',{on:{\"load\":function($event){_vm.text = $event}}})],1)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-12646eb7\",\"hasScoped\":true,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/dashboard/Modals/Wizard.vue\n// module id = 1219\n// module chunks = 1","function injectStyle (context) {\n  require(\"!!../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true,\\\"alias\\\":{\\\"../img\\\":\\\"../static/img\\\"}}!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-5e885dd4\\\",\\\"scoped\\\":true,\\\"sourceMap\\\":false}!../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Help.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Help.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Help.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-5e885dd4\\\",\\\"hasScoped\\\":true,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./Help.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-5e885dd4\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/dashboard/Modals/Help.vue\n// module id = 1220\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-modal',{attrs:{\"title\":\"Help\",\"size\":\"lg\",\"hide-header-close\":\"\"},on:{\"ok\":function($event){_vm.handleOk()},\"cancel\":function($event){_vm.hide()}},model:{value:(_vm.myModal),callback:function ($$v) {_vm.myModal=$$v},expression:\"myModal\"}},[_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-lg-12\"},[_c('h2',[_vm._v(\"How To Do Stuff Goes here\")])])])])}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-5e885dd4\",\"hasScoped\":true,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/dashboard/Modals/Help.vue\n// module id = 1222\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"wrapper\"},[_c('add-node'),_vm._v(\" \"),_c('edit-node'),_vm._v(\" \"),_c('edit-edge'),_vm._v(\" \"),_c('load-graph'),_vm._v(\" \"),_c('save-graph'),_vm._v(\" \"),_c('update-graph'),_vm._v(\" \"),_c('help'),_vm._v(\" \"),_c('wizard')],1)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-243b6ee4\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/dashboard/Modals/index.vue\n// module id = 1223\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"animated fadeIn\"},[_c('b-card',[_c('b-row',[_c('b-col',{attrs:{\"sm\":\"5\"}},[_c('h4',{staticClass:\"card-title mb-0\",attrs:{\"id\":\"graph\"}},[_vm._v(\"Model Graph\")])]),_vm._v(\" \"),_c('b-col',{staticClass:\"d-md-block\",attrs:{\"sm\":\"7\"}},[_c('b-button',{staticClass:\"float-right\",staticStyle:{\"margin-left\":\"3px\"},attrs:{\"type\":\"button\",\"variant\":\"danger\",\"title\":\"Run Graph\"},on:{\"click\":function($event){_vm.handleRun()}}},[_c('i',{staticClass:\"fa fa-play\"})]),_vm._v(\" \"),_c('b-button',{staticClass:\"float-right\",staticStyle:{\"margin-left\":\"3px\"},attrs:{\"type\":\"button\",\"variant\":\"primary\",\"title\":\"Save Graph\"},on:{\"click\":function($event){_vm.handleSave()}}},[_c('i',{staticClass:\"fa fa-save\"})]),_vm._v(\" \"),_c('b-dropdown',{staticClass:\"float-right\",staticStyle:{\"margin-left\":\"3px\"},attrs:{\"right\":\"\",\"split\":\"\",\"variant\":\"primary\",\"title\":\"Set Layout\"},on:{\"click\":function($event){_vm.handleResetLayout('dagre')}}},[_c('template',{slot:\"button-content\"},[_c('i',{staticClass:\"fa fa-sitemap\",attrs:{\"title\":\"DAG Layout\"}})]),_vm._v(\" \"),_c('b-dropdown-item',{on:{\"click\":function($event){_vm.handleResetLayout('dagre')}}},[_vm._v(\"DAG Layout\")]),_vm._v(\" \"),_c('b-dropdown-item',{on:{\"click\":function($event){_vm.handleResetLayout('circle')}}},[_vm._v(\"Circle Layout\")]),_vm._v(\" \"),_c('b-dropdown-item',{on:{\"click\":function($event){_vm.handleResetLayout('breadthfirst')}}},[_vm._v(\"Breadth First Layout\")]),_vm._v(\" \"),_c('b-dropdown-item',{on:{\"click\":function($event){_vm.handleResetLayout('grid')}}},[_vm._v(\"Grid Layout\")]),_vm._v(\" \"),_c('b-dropdown-item',{on:{\"click\":function($event){_vm.handleResetLayout('concentric')}}},[_vm._v(\"Concentric Layout\")]),_vm._v(\" \"),_c('b-dropdown-item',{on:{\"click\":function($event){_vm.handleResetLayout('cose')}}},[_vm._v(\"CoSE Layout\")]),_vm._v(\" \"),_c('b-dropdown-item',{on:{\"click\":function($event){_vm.handleResetLayout('random')}}},[_vm._v(\"Random Layout\")])],2),_vm._v(\" \"),_c('b-button',{staticClass:\"float-right\",staticStyle:{\"margin-left\":\"3px\"},attrs:{\"type\":\"button\",\"variant\":\"success\",\"title\":\"Load Template\"},on:{\"click\":function($event){_vm.handleLoad()}}},[_c('i',{staticClass:\"fa fa-folder-open\"})])],1)],1),_vm._v(\" \"),_c('cytoscape-graph',{staticClass:\"chart-wrapper\",staticStyle:{\"height\":\"600px\",\"margin-top\":\"40px\"},attrs:{\"height\":\"600\"}}),_vm._v(\" \"),_c('div',{attrs:{\"slot\":\"footer\"},slot:\"footer\"})],1),_vm._v(\" \"),_c('modals')],1)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-03879230\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/Dashboard.vue\n// module id = 1224\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Results.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Results.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-18f4d491\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Results.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/Results.vue\n// module id = 1225\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Table.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Table.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-02df20c5\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Table.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/Table.vue\n// module id = 1226\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('b-card',{attrs:{\"header\":_vm.caption}},[_c('b-table',{attrs:{\"hover\":_vm.hover,\"striped\":_vm.striped,\"bordered\":_vm.bordered,\"small\":_vm.small,\"fixed\":_vm.fixed,\"responsive\":\"sm\",\"items\":_vm.graphruns,\"fields\":_vm.graphruns_fields,\"current-page\":_vm.currentPage,\"per-page\":_vm.perPage},scopedSlots:_vm._u([{key:\"status\",fn:function(data){return [_c('b-badge',{attrs:{\"variant\":_vm.getBadge(data.item.status)}},[_vm._v(_vm._s(data.item.status))])]}}])}),_vm._v(\" \"),_c('nav',[_c('b-pagination',{attrs:{\"total-rows\":_vm.getRowCount(_vm.items),\"per-page\":_vm.perPage,\"prev-text\":\"Prev\",\"next-text\":\"Next\",\"hide-goto-end-buttons\":\"\"},model:{value:(_vm.currentPage),callback:function ($$v) {_vm.currentPage=$$v},expression:\"currentPage\"}})],1)],1)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-02df20c5\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/Table.vue\n// module id = 1227\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"animated fadeIn\"},[_c('b-row',[_c('b-col',{attrs:{\"lg\":\"12\"}},[_c('c-table',{attrs:{\"striped\":\"\",\"caption\":\"<i class='fa fa-align-justify'></i> Executions\"}})],1)],1)],1)}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-18f4d491\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/Results.vue\n// module id = 1228\n// module chunks = 1","function injectStyle (context) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true,\\\"alias\\\":{\\\"../img\\\":\\\"../static/img\\\"}}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-d6d95310\\\",\\\"scoped\\\":true,\\\"sourceMap\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Visual.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Visual.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Visual.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-d6d95310\\\",\\\"hasScoped\\\":true,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Visual.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-d6d95310\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/Visual.vue\n// module id = 1229\n// module chunks = 1","module.exports = [\"xx-small\",\"x-small\",\"small\",\"medium\",\"large\",\"x-large\",\"xx-large\",\"larger\",\"smaller\"]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-font-size-keywords/index.json\n// module id = 1832\n// module chunks = 1","import axios from 'axios'\n\nconst CSRF_COOKIE_NAME = 'csrftoken'\nconst CSRF_HEADER_NAME = 'X-CSRFToken'\n\nconst session = axios.create({\n  xsrfCookieName: CSRF_COOKIE_NAME,\n  xsrfHeaderName: CSRF_HEADER_NAME\n})\n\nexport default session\n\n// /**\n//  * Mocking client-server processing\n//  */\n// const _loginSuccess = {\n//   authenticated: true,\n//   token: Math.random().toString(36).substring(7)\n// }\n// const _loginFailed = { authenticated: false }\n\n// export default {\n//   login (auth, cb) {\n//     if (auth.user === 'test' && auth.pass === 'pass') {\n//       setTimeout(() => cb(_loginSuccess), 100)\n//     } else {\n//       setTimeout(() => cb(_loginFailed), 100)\n//     }\n//   }\n// }\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/session.js","module.exports = {\"200\":\"healthy endpoint disconnect\",\"308\":\"stream had ended\",\"400\":\"invalid or malformed request syntax\",\"403\":\"stream token no longer associated with this plot\",\"404\":\"streamtoken not registered or valid\",\"405\":\"bad request method: use POST for streaming\",\"406\":\"bad request header: missing 'plotly-streamtoken'\",\"408\":\"timeout on active data\",\"422\":\"json parse error: please stream newline seperated JSON\",\"423\":\"connection limit associated with this token has been reached\",\"449\":\"stream content has changed, reloading clients\",\"500\":\"internal server error\",\"503\":\"internal database error\",\"520\":\"error in request stream\"}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/plotly/statusmsgs.json\n// module id = 2367\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"panel panel-sm\"},[_vm._m(0),_vm._v(\" \"),_c('div',{staticClass:\"panel-body\"},[_c('div',{staticClass:\"form-group\"},[_c('label',{staticClass:\"control-label col-sm-3 text-right\",attrs:{\"for\":\"csv_file\"}},[_vm._v(\"CSV file to import\")]),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-9\"},[_c('input',{staticClass:\"form-control\",attrs:{\"type\":\"file\",\"id\":\"csv_file\",\"name\":\"csv_file\"},on:{\"change\":function($event){_vm.loadCSV($event)}}})])]),_vm._v(\" \"),_vm._m(1),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-12\"},[_c('button',{staticClass:\"btn btn-primary\",on:{\"click\":function($event){_vm.selecTion(1)}}},[_vm._v(\"Parse CSV\")]),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-primary\",on:{\"click\":function($event){_vm.selecTion(2)}}},[_vm._v(\"Get EDA\")]),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-primary\",on:{\"click\":function($event){_vm.selecTion(3)}}},[_vm._v(\"Line Plot\")]),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-primary\",on:{\"click\":function($event){_vm.selecTion(4)}}},[_vm._v(\"Bar Plot\")]),_vm._v(\" \"),_c('button',{staticClass:\"btn btn-primary\",on:{\"click\":function($event){_vm.selecTion(5)}}},[_vm._v(\"Scatter Plot\")])]),_vm._v(\" \"),(!_vm.selec1ted)?_c('div',[(_vm.parse_csv)?_c('table',[_c('thead',[_c('tr',_vm._l((_vm.parse_header),function(key){return _c('th',{class:{ active: _vm.sortKey == key },on:{\"click\":function($event){_vm.sortBy(key)}}},[_vm._v(\"\\n                  \"+_vm._s(_vm._f(\"capitalize\")(key))+\"\\n                  \\n                \")])}))]),_vm._v(\" \"),_vm._l((_vm.parse_csv),function(csv){return _c('tr',_vm._l((_vm.parse_header),function(key){return _c('td',[_vm._v(\"\\n                \"+_vm._s(csv[key])+\"\\n              \")])}))})],2):_vm._e()]):_vm._e(),_vm._v(\" \"),(!_vm.selec2ted)?_c('div',[_c('div',{staticClass:\"panel\"},[_c('table',[_c('th',[_vm._v(\" Column\\n            \")]),_vm._v(\" \"),_c('th',[_vm._v(\"  Min - Max\\n            \")]),_vm._v(\" \"),_c('th',[_vm._v(\" Average\\n            \")]),_vm._v(\" \"),_c('th',[_vm._v(\" Median\\n            \")]),_vm._v(\" \"),_c('th',[_vm._v(\"  Standard Deviation\\n            \")]),_vm._v(\" \"),_vm._l((_vm.eda),function(col){return _c('tr',_vm._l((col),function(c){return _c('td',[_vm._v(\"\\n                \"+_vm._s(c)+\"\\n              \")])}))})],2)])]):_vm._e(),_vm._v(\" \"),(!_vm.selec3ted)?_c('div',[_c('span',{staticClass:\"Strong\"},[_vm._v(\" Select axis to plot \")]),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-3\"},[_vm._v(\"\\n            X Axis\"),_c('b-form-select',{attrs:{\"options\":_vm.parse_header},on:{\"change\":function($event){_vm.Plot($event, null)}},model:{value:(_vm.s1selected),callback:function ($$v) {_vm.s1selected=$$v},expression:\"s1selected\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-3\"},[_vm._v(\"\\n            Y Axis\"),_c('b-form-select',{attrs:{\"options\":_vm.parse_header},on:{\"change\":function($event){_vm.Plot(null, $event)}},model:{value:(_vm.s2selected),callback:function ($$v) {_vm.s2selected=$$v},expression:\"s2selected\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"panel\"},[_c('vue-plotly',{attrs:{\"data\":_vm.ata,\"layout\":_vm.layout,\"options\":_vm.options}})],1)]):_vm._e(),_vm._v(\" \"),(!_vm.selec4ted)?_c('div',[_c('span',{staticClass:\"Strong\"},[_vm._v(\" Select axis to plot \")]),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-3\"},[_vm._v(\"\\n            X Axis\"),_c('b-form-select',{attrs:{\"options\":_vm.parse_header},on:{\"change\":function($event){_vm.Plot($event, null)}},model:{value:(_vm.s1selected),callback:function ($$v) {_vm.s1selected=$$v},expression:\"s1selected\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-3\"},[_vm._v(\"\\n            Y Axis\"),_c('b-form-select',{attrs:{\"options\":_vm.parse_header},on:{\"change\":function($event){_vm.Plot(null, $event)}},model:{value:(_vm.s2selected),callback:function ($$v) {_vm.s2selected=$$v},expression:\"s2selected\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"panel\"},[_c('vue-plotly',{attrs:{\"data\":_vm.ata,\"layout\":_vm.layout,\"options\":_vm.options}})],1)]):_vm._e(),_vm._v(\" \"),(!_vm.selec5ted)?_c('div',[_c('span',{staticClass:\"Strong\"},[_vm._v(\" Select axis to plot \")]),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-3\"},[_vm._v(\"\\n            X Axis\"),_c('b-form-select',{attrs:{\"options\":_vm.parse_header},on:{\"change\":function($event){_vm.Plot($event, null)}},model:{value:(_vm.s1selected),callback:function ($$v) {_vm.s1selected=$$v},expression:\"s1selected\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"col-sm-3\"},[_vm._v(\"\\n            Y Axis\"),_c('b-form-select',{attrs:{\"options\":_vm.parse_header},on:{\"change\":function($event){_vm.Plot(null, $event)}},model:{value:(_vm.s2selected),callback:function ($$v) {_vm.s2selected=$$v},expression:\"s2selected\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"panel\"},[_c('vue-plotly',{attrs:{\"data\":_vm.ata,\"layout\":_vm.layout,\"options\":_vm.options}})],1)]):_vm._e()])])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"panel-heading\"},[_c('h4',[_vm._v(\"CSV Import\")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"col-sm-offset-3 col-sm-9\"},[_c('div',{staticClass:\"checkbox-inline\"},[_c('label',{attrs:{\"for\":\"header_rows\"}},[_c('input',{attrs:{\"type\":\"checkbox\",\"id\":\"header_rows\"}}),_vm._v(\" File contains header row?\")])])])}]\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-d6d95310\",\"hasScoped\":true,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/Visual.vue\n// module id = 2368\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Page404.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Page404.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-49e064e2\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./Page404.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/pages/Page404.vue\n// module id = 2369\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"app flex-row align-items-center\"},[_c('div',{staticClass:\"container\"},[_c('b-row',{staticClass:\"justify-content-center\"},[_c('b-col',{attrs:{\"md\":\"6\"}},[_c('div',{staticClass:\"clearfix\"},[_c('h1',{staticClass:\"float-left display-3 mr-4\"},[_vm._v(\"404\")]),_vm._v(\" \"),_c('h4',{staticClass:\"pt-3\"},[_vm._v(\"Oops! You're lost.\")]),_vm._v(\" \"),_c('p',{staticClass:\"text-muted\"},[_vm._v(\"The page you are looking for was not found.\")])]),_vm._v(\" \"),_c('b-input-group',[_c('b-input-group-prepend',[_c('b-input-group-text',[_c('i',{staticClass:\"fa fa-search\"})])],1),_vm._v(\" \"),_c('input',{staticClass:\"form-control\",attrs:{\"id\":\"prependedInput\",\"size\":\"16\",\"type\":\"text\",\"placeholder\":\"What are you looking for?\"}}),_vm._v(\" \"),_c('b-input-group-append',[_c('b-button',{attrs:{\"variant\":\"info\"}},[_vm._v(\"Search\")])],1)],1)],1)],1)],1)])}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-49e064e2\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/pages/Page404.vue\n// module id = 2370\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Page500.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Page500.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-5b5c6502\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./Page500.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/pages/Page500.vue\n// module id = 2371\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"app flex-row align-items-center\"},[_c('div',{staticClass:\"container\"},[_c('b-row',{staticClass:\"justify-content-center\"},[_c('b-col',{attrs:{\"md\":\"6\"}},[_c('div',{staticClass:\"clearfix\"},[_c('h1',{staticClass:\"float-left display-3 mr-4\"},[_vm._v(\"500\")]),_vm._v(\" \"),_c('h4',{staticClass:\"pt-3\"},[_vm._v(\"Houston, we have a problem!\")]),_vm._v(\" \"),_c('p',{staticClass:\"text-muted\"},[_vm._v(\"The page you are looking for is temporarily unavailable.\")])]),_vm._v(\" \"),_c('b-input-group',[_c('b-input-group-prepend',[_c('b-input-group-text',[_c('i',{staticClass:\"fa fa-search\"})])],1),_vm._v(\" \"),_c('input',{staticClass:\"form-control\",attrs:{\"id\":\"prependedInput\",\"size\":\"16\",\"type\":\"text\",\"placeholder\":\"What are you looking for?\"}}),_vm._v(\" \"),_c('b-input-group-append',[_c('b-button',{attrs:{\"variant\":\"info\"}},[_vm._v(\"Search\")])],1)],1)],1)],1)],1)])}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-5b5c6502\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/pages/Page500.vue\n// module id = 2372\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Login.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Login.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-33b7a6f7\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./Login.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/pages/Login.vue\n// module id = 2373\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"app flex-row align-items-center\"},[_c('div',{staticClass:\"container\"},[_c('b-row',{staticClass:\"justify-content-center\"},[_c('b-col',{attrs:{\"md\":\"8\"}},[_c('b-card-group',[_c('b-card',{staticClass:\"p-4\",attrs:{\"no-body\":\"\"}},[_c('b-card-body',[_c('h1',[_vm._v(\"Login\")]),_vm._v(\" \"),_c('p',{staticClass:\"text-muted\"},[_vm._v(\"Sign In to your account\")]),_vm._v(\" \"),_c('b-input-group',{staticClass:\"mb-3\"},[_c('b-input-group-prepend',[_c('b-input-group-text',[_c('i',{staticClass:\"icon-user\"})])],1),_vm._v(\" \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.user),expression:\"user\"}],staticClass:\"form-control\",attrs:{\"type\":\"text\",\"placeholder\":\"Username\"},domProps:{\"value\":(_vm.user)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.user=$event.target.value}}})],1),_vm._v(\" \"),_c('b-input-group',{staticClass:\"mb-4\"},[_c('b-input-group-prepend',[_c('b-input-group-text',[_c('i',{staticClass:\"icon-lock\"})])],1),_vm._v(\" \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.pass),expression:\"pass\"}],staticClass:\"form-control\",attrs:{\"type\":\"password\",\"placeholder\":\"Password\"},domProps:{\"value\":(_vm.pass)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.pass=$event.target.value}}})],1),_vm._v(\" \"),_c('b-row',[_c('b-col',{attrs:{\"cols\":\"6\"}},[_c('b-button',{staticClass:\"px-4\",attrs:{\"variant\":\"primary\"},on:{\"click\":function($event){_vm.login(_vm.user, _vm.pass)}}},[_vm._v(\"Login\")])],1),_vm._v(\" \"),(_vm.loginFailed)?_c('b-col',{staticClass:\"text-right\",attrs:{\"cols\":\"6\"}},[_c('span',{staticStyle:{\"color\":\"red\"}},[_vm._v(\"Login Failed\")])]):_vm._e()],1)],1)],1),_vm._v(\" \"),_c('b-card',{staticClass:\"text-white bg-primary py-5 d-md-down-none\",staticStyle:{\"width\":\"44%\"},attrs:{\"no-body\":\"\"}},[_c('b-card-body',{staticClass:\"text-center\"},[_c('div',[_c('h2',[_vm._v(\"Sign up\")]),_vm._v(\" \"),_c('p',[_vm._v(\" Register now to use the MaDE@UB Machine Learning Toolkit with interactive graphical user interface to perform machine learning tasks on your datasets.\")]),_vm._v(\" \"),_c('p',[_vm._v(\" click below to send mail to our system administerators to create account\")]),_vm._v(\" \"),_c('a',{attrs:{\"href\":\"mailto:sahmed9@buffalo.edu\"}},[_c('b-button',{staticClass:\"active mt-3\",attrs:{\"variant\":\"primary\"}},[_vm._v(\"Register Now!\")])],1)])])],1)],1)],1)],1)],1)])}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-33b7a6f7\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/pages/Login.vue\n// module id = 2374\n// module chunks = 1","/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Register.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./Register.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-9b2385e2\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./Register.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/pages/Register.vue\n// module id = 2375\n// module chunks = 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"app flex-row align-items-center\"},[_c('div',{staticClass:\"container\"},[_c('b-row',{staticClass:\"justify-content-center\"},[_c('b-col',{attrs:{\"md\":\"6\",\"sm\":\"8\"}},[_c('b-card',{staticClass:\"mx-4\",attrs:{\"no-body\":\"\"}},[_c('b-card-body',{staticClass:\"p-4\"},[_c('h1',[_vm._v(\"Register\")]),_vm._v(\" \"),_c('p',{staticClass:\"text-muted\"},[_vm._v(\"Create your account\")]),_vm._v(\" \"),_c('b-input-group',{staticClass:\"mb-3\"},[_c('b-input-group-prepend',[_c('b-input-group-text',[_c('i',{staticClass:\"icon-user\"})])],1),_vm._v(\" \"),_c('input',{staticClass:\"form-control\",attrs:{\"type\":\"text\",\"placeholder\":\"Username\"}})],1),_vm._v(\" \"),_c('b-input-group',{staticClass:\"mb-3\"},[_c('b-input-group-prepend',[_c('b-input-group-text',[_vm._v(\"@\")])],1),_vm._v(\" \"),_c('input',{staticClass:\"form-control\",attrs:{\"type\":\"text\",\"placeholder\":\"Email\"}})],1),_vm._v(\" \"),_c('b-input-group',{staticClass:\"mb-3\"},[_c('b-input-group-prepend',[_c('b-input-group-text',[_c('i',{staticClass:\"icon-lock\"})])],1),_vm._v(\" \"),_c('input',{staticClass:\"form-control\",attrs:{\"type\":\"password\",\"placeholder\":\"Password\"}})],1),_vm._v(\" \"),_c('b-input-group',{staticClass:\"mb-4\"},[_c('b-input-group-prepend',[_c('b-input-group-text',[_c('i',{staticClass:\"icon-lock\"})])],1),_vm._v(\" \"),_c('input',{staticClass:\"form-control\",attrs:{\"type\":\"password\",\"placeholder\":\"Repeat password\"}})],1),_vm._v(\" \"),_c('b-button',{attrs:{\"variant\":\"success\",\"block\":\"\"}},[_vm._v(\"Create Account\")])],1),_vm._v(\" \"),_c('b-card-footer',{staticClass:\"p-4\"},[_c('b-row',[_c('b-col',{attrs:{\"cols\":\"6\"}},[_c('b-button',{staticClass:\"btn btn-facebook\",attrs:{\"block\":\"\"}},[_c('span',[_vm._v(\"facebook\")])])],1),_vm._v(\" \"),_c('b-col',{attrs:{\"cols\":\"6\"}},[_c('b-button',{staticClass:\"btn btn-twitter\",attrs:{\"block\":\"\",\"type\":\"button\"}},[_c('span',[_vm._v(\"twitter\")])])],1)],1)],1)],1)],1)],1)],1)])}\nvar staticRenderFns = []\nexport { render, staticRenderFns }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-9b2385e2\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/pages/Register.vue\n// module id = 2376\n// module chunks = 1","import session from './session'\n\nexport default {\n  login (username, password) {\n    return session.post('https://madeatub.buffalo.edu/mltoolkit/auth/login/', { username, password })\n  },\n  logout () {\n    return session.post('https://madeatub.buffalo.edu/mltoolkit/auth/logout/', {})\n  },\n  createAccount (username, password1, password2, email) {\n    return session.post('https://madeatub.buffalo.edu/mltoolkit/registration/', { username, password1, password2, email })\n  },\n  changeAccountPassword (password1, password2) {\n    return session.post('https://madeatub.buffalo.edu/mltoolkit/auth/password/change/', { password1, password2 })\n  },\n  sendAccountPasswordResetEmail (email) {\n    return session.post('https://madeatub.buffalo.edu/mltoolkit/auth/password/reset/', { email })\n  },\n  resetAccountPassword (uid, token, new_password1, new_password2) { // eslint-disable-line camelcase\n    return session.post('https://madeatub.buffalo.edu/mltoolkit/auth/password/reset/confirm/', { uid, token, new_password1, new_password2 })\n  },\n  getAccountDetails () {\n    return session.get('https://madeatub.buffalo.edu/mltoolkit/auth/user/')\n  },\n  updateAccountDetails (data) {\n    return session.patch('https://madeatub.buffalo.edu/mltoolkit/auth/user/', data)\n  },\n  verifyAccountEmail (key) {\n    return session.post('https://madeatub.buffalo.edu/mltoolkit/registration/verify-email/', { key })\n  }\n}\n// export default {\n//   login (username, password) {\n//     return session.post('/auth/login/', { username, password })\n//   },\n//   logout () {\n//     return session.post('/auth/logout/', {})\n//   },\n//   createAccount (username, password1, password2, email) {\n//     return session.post('/registration/', { username, password1, password2, email })\n//   },\n//   changeAccountPassword (password1, password2) {\n//     return session.post('/auth/password/change/', { password1, password2 })\n//   },\n//   sendAccountPasswordResetEmail (email) {\n//     return session.post('/auth/password/reset/', { email })\n//   },\n//   resetAccountPassword (uid, token, new_password1, new_password2) { // eslint-disable-line camelcase\n//     return session.post('/auth/password/reset/confirm/', { uid, token, new_password1, new_password2 })\n//   },\n//   getAccountDetails () {\n//     return session.get('/auth/user/')\n//   },\n//   updateAccountDetails (data) {\n//     return session.patch('/auth/user/', data)\n//   },\n//   verifyAccountEmail (key) {\n//     return session.post('/registration/verify-email/', { key })\n//   }\n// }\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/auth.js","export const ACTIVATION_BEGIN = 'ACTIVATION_BEGIN'\nexport const ACTIVATION_CLEAR = 'ACTIVATION_CLEAR'\nexport const ACTIVATION_FAILURE = 'ACTIVATION_FAILURE'\nexport const ACTIVATION_SUCCESS = 'ACTIVATION_SUCCESS'\nexport const LOGIN_BEGIN = 'LOGIN_BEGIN'\nexport const LOGIN_CLEAR = 'LOGIN_CLEAR'\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE'\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS'\nexport const LOGOUT = 'LOGOUT'\nexport const PASSWORD_EMAIL_BEGIN = 'PASSWORD_EMAIL_BEGIN'\nexport const PASSWORD_EMAIL_CLEAR = 'PASSWORD_EMAIL_CLEAR'\nexport const PASSWORD_EMAIL_FAILURE = 'PASSWORD_EMAIL_FAILURE'\nexport const PASSWORD_EMAIL_SUCCESS = 'PASSWORD_EMAIL_SUCCESS'\nexport const PASSWORD_RESET_BEGIN = 'PASSWORD_RESET_BEGIN'\nexport const PASSWORD_RESET_CLEAR = 'PASSWORD_RESET_CLEAR'\nexport const PASSWORD_RESET_FAILURE = 'PASSWORD_RESET_FAILURE'\nexport const PASSWORD_RESET_SUCCESS = 'PASSWORD_RESET_SUCCESS'\nexport const REGISTRATION_BEGIN = 'REGISTRATION_BEGIN'\nexport const REGISTRATION_CLEAR = 'REGISTRATION_CLEAR'\nexport const REGISTRATION_FAILURE = 'REGISTRATION_FAILURE'\nexport const REGISTRATION_SUCCESS = 'REGISTRATION_SUCCESS'\nexport const SET_TOKEN = 'SET_TOKEN'\nexport const REMOVE_TOKEN = 'REMOVE_TOKEN'\n\n\n\n// WEBPACK FOOTER //\n// ./src/store/modules/types.js","<template>\n  <router-view></router-view>\n</template>\n\n<script>\nexport default {\n  name: 'app'\n}\n</script>\n\n<style>\n  /* Import Font Awesome Icons Set */\n  $fa-font-path: '~font-awesome/fonts/';\n  @import '~font-awesome/css/font-awesome.min.css';\n  /* Import Simple Line Icons Set */\n  $simple-line-font-path: '~simple-line-icons/fonts/';\n  @import '~simple-line-icons/css/simple-line-icons.css';\n  /* Import Bootstrap Vue Styles */\n  @import '~bootstrap-vue/dist/bootstrap-vue.css';\n</style>\n<style lang=\"scss\">\n  // Import Main styles for this application\n  @import './scss/style';\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/App.vue","import Vue from 'vue'\nimport Vuex from 'vuex'\nimport cytoscape from './modules/cytoscape'\nimport modals from './modules/modals'\n// import session from './modules/session'\nimport auth from './modules/auth'\nimport password from './modules/password'\nimport signup from './modules/signup'\nimport graph from './modules/graph'\n// import products from './modules/products'\n// import createLogger from '../../../src/plugins/logger'\n\nVue.use(Vuex)\n\n// const debug = process.env.NODE_ENV !== 'production'\n\nexport default new Vuex.Store({\n  modules: {\n    cytoscape,\n    modals,\n    // session,\n    auth,\n    password,\n    signup,\n    graph\n    // products\n  }\n  // strict: debug,\n  // plugins: debug ? [createLogger()] : []\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/store/index.js","<template>\n  <div class=\"app\">\n    <AppHeader/>\n    <div class=\"app-body\">\n      <Sidebar :navItems=\"nav\"/>\n      <main class=\"main\">\n        <breadcrumb :list=\"list\"/>\n        <div class=\"container-fluid\">\n          <router-view></router-view>\n        </div>\n      </main>\n      <AppAside/>\n    </div>\n    <AppFooter/>\n  </div>\n</template>\n\n<script>\nimport nav from '../_nav'\nimport { Header as AppHeader, Sidebar, Aside as AppAside, Footer as AppFooter, Breadcrumb } from '../components/'\n\nexport default {\n  name: 'full',\n  components: {\n    AppHeader,\n    Sidebar,\n    AppAside,\n    AppFooter,\n    Breadcrumb\n  },\n  data () {\n    return {\n      nav: nav.items\n    }\n  },\n  computed: {\n    name () {\n      return this.$route.name\n    },\n    list () {\n      return this.$route.matched\n    }\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/containers/Full.vue","<template>\n  <aside class=\"aside-menu\">\n\n  </aside>\n</template>\n\n<script>\nexport default {\n  name: 'c-aside'\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Aside.vue","<template>\n  <ol class=\"breadcrumb\">\n    <li class=\"breadcrumb-item\" v-for=\"(item, index) in list\">\n      <span class=\"active\" v-if=\"isLast(index)\">{{ showName(item) }}</span>\n      <router-link :to=\"item\" v-else>{{ showName(item) }}</router-link>\n    </li>\n  </ol>\n</template>\n\n<script>\nexport default {\n  props: {\n    list: {\n      type: Array,\n      required: true,\n      default: () => []\n    }\n  },\n  methods: {\n    isLast (index) {\n      return index === this.list.length - 1\n    },\n    showName (item) {\n      if (item.meta && item.meta.label) {\n        item = item.meta && item.meta.label\n      }\n      if (item.name) {\n        item = item.name\n      }\n      return item\n    }\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Breadcrumb.vue","<template>\n  <div :class=\"classList\">\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    variant: {\n      type: String\n    }\n  },\n  computed: {\n    classList () {\n      return [\n        'callout',\n        this.calloutVariant\n      ]\n    },\n    calloutVariant () {\n      return this.variant ? `callout-${this.variant}` : ''\n    }\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Callout.vue","<template>\n  <footer class=\"app-footer\">\n    <!-- <span><a href=\"http://coreui.io\">CoreUI</a> &copy; 2018 creativeLabs.</span>\n    <span class=\"ml-auto\">Powered by <a href=\"http://coreui.io\">CoreUI</a></span> -->\n  </footer>\n</template>\n<script>\nexport default {\n  name: 'c-footer'\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Footer.vue","<template>\n  <header class=\"app-header navbar\">\n    <button class=\"navbar-toggler mobile-sidebar-toggler d-lg-none\" type=\"button\" @click=\"mobileSidebarToggle\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <b-link class=\"navbar-brand\" to=\"#\"></b-link>\n    <button class=\"navbar-toggler sidebar-toggler d-md-down-none mr-auto\" type=\"button\" @click=\"sidebarToggle\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n\n    <b-navbar-nav class=\"ml-auto\">\n<!--       <b-nav-item class=\"d-md-down-none\">\n        <i class=\"icon-bell\"></i>\n        <b-badge pill variant=\"danger\">5</b-badge>\n      </b-nav-item>\n      <b-nav-item class=\"d-md-down-none\">\n        <i class=\"icon-list\"></i>\n      </b-nav-item>\n      <b-nav-item class=\"d-md-down-none\">\n        <i class=\"icon-location-pin\"></i>\n      </b-nav-item> -->\n      <HeaderDropdown/>\n    </b-navbar-nav>\n\n<!--     <button class=\"navbar-toggler aside-menu-toggler d-md-down-none\" type=\"button\" @click=\"asideToggle\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button> -->\n  </header>\n</template>\n<script>\nimport HeaderDropdown from './HeaderDropdown.vue'\n\nexport default {\n  name: 'c-header',\n  components: {\n    HeaderDropdown\n  },\n  methods: {\n    sidebarToggle (e) {\n      e.preventDefault()\n      document.body.classList.toggle('sidebar-hidden')\n    },\n    sidebarMinimize (e) {\n      e.preventDefault()\n      document.body.classList.toggle('sidebar-minimized')\n    },\n    mobileSidebarToggle (e) {\n      e.preventDefault()\n      document.body.classList.toggle('sidebar-mobile-show')\n    },\n    asideToggle (e) {\n      e.preventDefault()\n      document.body.classList.toggle('aside-menu-hidden')\n    }\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Header/Header.vue","<template>\n      <b-nav-item-dropdown right no-caret>\n\n        <template slot=\"button-content\">\n          <!-- <img src=\"static/img/avatars/user.png\" class=\"img-avatar\" alt=\"admin@bootstrapmaster.com\"> -->\n          <i class=\"fa fa-user-circle fa-lg\"></i>\n        </template>\n<!--         <b-dropdown-header tag=\"div\" class=\"text-center\"><strong>Account</strong></b-dropdown-header>\n        <b-dropdown-item><i class=\"fa fa-bell-o\"></i> Updates<b-badge variant=\"info\">{{itemsCount}}</b-badge></b-dropdown-item>\n        <b-dropdown-item><i class=\"fa fa-envelope-o\"></i> Messages<b-badge variant=\"success\">{{itemsCount}}</b-badge></b-dropdown-item>\n        <b-dropdown-item><i class=\"fa fa-tasks\"></i> Tasks<b-badge variant=\"danger\">{{itemsCount}}</b-badge></b-dropdown-item>\n        <b-dropdown-item><i class=\"fa fa-comments\"></i> Comments<b-badge variant=\"warning\">{{itemsCount}}</b-badge></b-dropdown-item>\n        <b-dropdown-header tag=\"div\" class=\"text-center\"><strong>Settings</strong></b-dropdown-header>\n        <b-dropdown-item><i class=\"fa fa-user\"></i> Profile</b-dropdown-item>\n        <b-dropdown-item><i class=\"fa fa-wrench\"></i> Settings</b-dropdown-item>\n        <b-dropdown-item><i class=\"fa fa-usd\"></i> Payments<b-badge variant=\"secondary\">{{itemsCount}}</b-badge></b-dropdown-item>\n        <b-dropdown-item><i class=\"fa fa-file\"></i> Projects<b-badge variant=\"primary\">{{itemsCount}}</b-badge></b-dropdown-item>\n        <b-dropdown-divider></b-dropdown-divider>\n        <b-dropdown-item><i class=\"fa fa-shield\"></i> Lock Account</b-dropdown-item>\n -->        <b-dropdown-item><i class=\"fa fa-lock\"></i> <router-link to=\"/logout\">logout</router-link></b-dropdown-item>\n\n      </b-nav-item-dropdown>\n</template>\n<script>\n  export default {\n    name: 'header-dropdown',\n    data: () => {\n      return { itemsCount: 42 }\n    }\n  }\n</script>\n\n\n\n\n// WEBPACK FOOTER //\n// src/components/Header/HeaderDropdown.vue","<template>\n  <div class=\"sidebar\">\n    <SidebarHeader/>\n    <SidebarForm/>\n    <nav class=\"sidebar-nav\">\n      <div slot=\"header\"></div>\n      <ul class=\"nav\">\n        <template v-for=\"(item, index) in navItems\">\n          <template v-if=\"item.title\">\n            <SidebarNavTitle :name=\"item.name\" :classes=\"item.class\" :wrapper=\"item.wrapper\"/>\n          </template>\n          <template v-else-if=\"item.divider\">\n            <SidebarNavDivider :classes=\"item.class\"/>\n          </template>\n          <template v-else-if=\"item.label\">\n            <SidebarNavLabel :name=\"item.name\" :url=\"item.url\" :icon=\"item.icon\" :label=\"item.label\" :classes=\"item.class\"/>\n          </template>\n          <template v-else>\n            <template v-if=\"item.children\">\n              <!-- First level dropdown -->\n              <SidebarNavDropdown :name=\"item.name\" :url=\"item.url\" :icon=\"item.icon\">\n                <template v-for=\"(childL1, index) in item.children\">\n                  <template v-if=\"childL1.children\">\n                    <!-- Second level dropdown -->\n                    <SidebarNavDropdown :name=\"childL1.name\" :url=\"childL1.url\" :icon=\"childL1.icon\">\n                      <li class=\"nav-item\" v-for=\"(childL2, index) in childL1.children\">\n                        <SidebarNavLink :name=\"childL2.name\" :url=\"childL2.url\" :icon=\"childL2.icon\" :badge=\"childL2.badge\" :variant=\"item.variant\"/>\n                      </li>\n                    </SidebarNavDropdown>\n                  </template>\n                  <template v-else>\n                    <SidebarNavItem :classes=\"item.class\">\n                      <SidebarNavLink :name=\"childL1.name\" :url=\"childL1.url\" :icon=\"childL1.icon\" :badge=\"childL1.badge\" :variant=\"item.variant\"/>\n                    </SidebarNavItem>\n                  </template>\n                </template>\n              </SidebarNavDropdown>\n            </template>\n            <template v-else>\n              <SidebarNavItem :classes=\"item.class\">\n                <SidebarNavLink :name=\"item.name\" :url=\"item.url\" :icon=\"item.icon\" :badge=\"item.badge\" :variant=\"item.variant\"/>\n              </SidebarNavItem>\n            </template>\n          </template>\n        </template>\n      </ul>\n      <slot></slot>\n    </nav>\n    <SidebarFooter/>\n    <SidebarMinimizer/>\n  </div>\n</template>\n<script>\nimport SidebarFooter from './SidebarFooter'\nimport SidebarForm from './SidebarForm'\nimport SidebarHeader from './SidebarHeader'\nimport SidebarMinimizer from './SidebarMinimizer'\nimport SidebarNavDivider from './SidebarNavDivider'\nimport SidebarNavDropdown from './SidebarNavDropdown'\nimport SidebarNavLink from './SidebarNavLink'\nimport SidebarNavTitle from './SidebarNavTitle'\nimport SidebarNavItem from './SidebarNavItem'\nimport SidebarNavLabel from './SidebarNavLabel'\nexport default {\n  name: 'sidebar',\n  props: {\n    navItems: {\n      type: Array,\n      required: true,\n      default: () => []\n    }\n  },\n  components: {\n    SidebarFooter,\n    SidebarForm,\n    SidebarHeader,\n    SidebarMinimizer,\n    SidebarNavDivider,\n    SidebarNavDropdown,\n    SidebarNavLink,\n    SidebarNavTitle,\n    SidebarNavItem,\n    SidebarNavLabel\n  },\n  methods: {\n    handleClick (e) {\n      e.preventDefault()\n      e.target.parentElement.classList.toggle('open')\n    }\n  }\n}\n</script>\n\n<style lang=\"css\">\n  .nav-link {\n    cursor:pointer;\n  }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Sidebar/Sidebar.vue","<template>\n  <!-- <div class=\"sidebar-footer\"></div> -->\n</template>\n<script>\n\nexport default {\n  name: 'sidebar-footer'\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Sidebar/SidebarFooter.vue","<template>\n  <!-- <div class=\"sidebar-form\"></div> -->\n</template>\n<script>\n\nexport default {\n  name: 'sidebar-form'\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Sidebar/SidebarForm.vue","<template>\n  <!-- <div class=\"sidebar-header\"></div> -->\n</template>\n<script>\n\nexport default {\n  name: 'sidebar-header'\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Sidebar/SidebarHeader.vue","<template>\n  <button class=\"sidebar-minimizer\" type=\"button\" @click=\"sidebarMinimize();brandMinimize()\"></button>\n</template>\n<script>\n\nexport default {\n  name: 'sidebar-minimizer',\n  methods: {\n    sidebarMinimize () {\n      document.body.classList.toggle('sidebar-minimized')\n    },\n    brandMinimize () {\n      document.body.classList.toggle('brand-minimized')\n    }\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Sidebar/SidebarMinimizer.vue","<template>\n  <li :class=\"classList\"></li>\n</template>\n\n<script>\n  export default {\n    name: 'sidebar-nav-divider',\n    props: {\n      classes: {\n        type: String,\n        default: ''\n      }\n    },\n    computed: {\n      classList () {\n        return [\n          'divider',\n          ...this.itemClasses\n        ]\n      },\n      itemClasses () {\n        return this.classes ? this.classes.split(' ') : ''\n      }\n    }\n  }\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Sidebar/SidebarNavDivider.vue","<template>\n  <router-link tag=\"li\" class=\"nav-item nav-dropdown\" :to=\"url\" disabled>\n    <div class=\"nav-link nav-dropdown-toggle\" @click=\"handleClick\"><i :class=\"icon\"></i> {{name}}</div>\n    <ul class=\"nav-dropdown-items\">\n      <slot></slot>\n    </ul>\n  </router-link>\n</template>\n\n<script>\nexport default {\n  props: {\n    name: {\n      type: String,\n      default: ''\n    },\n    url: {\n      type: String,\n      default: ''\n    },\n    icon: {\n      type: String,\n      default: ''\n    }\n  },\n  methods: {\n    handleClick (e) {\n      e.preventDefault()\n      e.target.parentElement.classList.toggle('open')\n    }\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Sidebar/SidebarNavDropdown.vue","/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarNavLink.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarNavLink.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-67792580\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./SidebarNavLink.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Sidebar/SidebarNavLink.vue\n// module id = 527\n// module chunks = 1","<template>\n  <div v-if=\"isExternalLink\">\n    <a :href=\"url\" :class=\"classList\">\n      <i :class=\"icon\"></i> {{name}}\n      <b-badge v-if=\"badge && badge.text\" :variant=\"badge.variant\">{{badge.text}}</b-badge>\n    </a>\n  </div>\n  <div v-else>\n    <router-link :to=\"url\" :class=\"classList\">\n      <i :class=\"icon\"></i> {{name}}\n      <b-badge v-if=\"badge && badge.text\" :variant=\"badge.variant\">{{badge.text}}</b-badge>\n    </router-link>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'sidebar-nav-link',\n    props: {\n      name: {\n        type: String,\n        default: ''\n      },\n      url: {\n        type: String,\n        default: ''\n      },\n      icon: {\n        type: String,\n        default: ''\n      },\n      badge: {\n        type: Object,\n        default: () => {}\n      },\n      variant: {\n        type: String,\n        default: ''\n      },\n      classes: {\n        type: String,\n        default: ''\n      }\n    },\n    computed: {\n      classList () {\n        return [\n          'nav-link',\n          this.linkVariant,\n          ...this.itemClasses\n        ]\n      },\n      linkVariant () {\n        return this.variant ? `nav-link-${this.variant}` : ''\n      },\n      itemClasses () {\n        return this.classes ? this.classes.split(' ') : []\n      },\n      isExternalLink () {\n        if (this.url.substring(0, 4) === 'http') {\n          return true\n        } else {\n          return false\n        }\n      }\n    }\n  }\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Sidebar/SidebarNavLink.vue","<template>\n  <li :class=\"classList\">\n    <template v-if=\"wrapper && wrapper.element\">\n      <component v-bind:is=\"wrapper.element\" v-bind=\"wrapper.attributes\">\n        {{name}}\n      </component>\n    </template>\n    <template v-else>\n      {{name}}\n    </template>\n  </li>\n</template>\n\n<script>\n  export default {\n    props: {\n      name: {\n        type: String,\n        default: ''\n      },\n      classes: {\n        type: String,\n        default: ''\n      },\n      wrapper: {\n        type: Object,\n        default: () => {}\n      }\n    },\n    computed: {\n      classList () {\n        return [\n          'nav-title',\n          ...this.itemClasses\n        ]\n      },\n      itemClasses () {\n        return this.classes ? this.classes.split(' ') : ''\n      }\n    }\n  }\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Sidebar/SidebarNavTitle.vue","/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarNavItem.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./SidebarNavItem.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-7ed4d885\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./SidebarNavItem.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Sidebar/SidebarNavItem.vue\n// module id = 530\n// module chunks = 1","<template>\n  <li :class=\"classList\" @click=\"hideMobile\">\n    <slot></slot>\n  </li>\n</template>\n\n<script>\n  export default {\n    name: 'sidebar-nav-item',\n    props: {\n      classes: {\n        type: String,\n        default: ''\n      }\n    },\n    computed: {\n      classList () {\n        return [\n          'nav-item',\n          ...this.itemClasses\n        ]\n      },\n      itemClasses () {\n        return this.classes ? this.classes.split(' ') : ''\n      }\n    },\n    methods: {\n      hideMobile () {\n        if (document.body.classList.contains('sidebar-mobile-show')) {\n          document.body.classList.toggle('sidebar-mobile-show')\n        }\n      }\n    }\n  }\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Sidebar/SidebarNavItem.vue","<template>\n  <SidebarNavItem :classes=\"classList.navItem\">\n    <a :class=\"classList.navLink\" :href=\"url\"><i :class=\"classList.icon\"></i> {{name}}</a>\n  </SidebarNavItem>\n</template>\n\n<script>\n  import SidebarNavItem from './SidebarNavItem'\n  import SidebarNavLink from './SidebarNavLink'\n  export default {\n    name: 'sidebar-nav-label',\n    components: {\n      SidebarNavItem,\n      SidebarNavLink\n    },\n    props: {\n      name: {\n        type: String,\n        default: ''\n      },\n      url: {\n        type: String,\n        default: '#'\n      },\n      icon: {\n        type: String,\n        default: 'fa fa-circle'\n      },\n      classes: {\n        type: String,\n        default: ''\n      },\n      label: {\n        type: Object,\n        required: true,\n        default: () => {}\n      }\n    },\n    computed: {\n      classList () {\n        const classes = {\n          navItem: ['hidden-cn', ...this.getClasses(this.classes)].join(' '),\n          navLink: 'nav-label',\n          icon: [\n            this.icon ? this.icon : 'fa fa-circle',\n            this.label.variant ? `text-${this.label.variant}` : '',\n            this.label.class ? this.label.class : ''\n          ].join(' ')\n        }\n        return classes\n      }\n    },\n    methods: {\n      getClasses (classes) {\n        return classes ? classes.split(' ') : []\n      }\n    }\n  }\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Sidebar/SidebarNavLabel.vue","<template>\n  <label :class=\"classList\">\n    <input type=\"checkbox\"\n           class=\"switch-input\"\n           :value=\"value\"\n           :checked=\"isChecked\"\n           @change=\"handleChange\">\n    <template v-if=\"isOn\">\n      <span class=\"switch-label\" :data-on=\"on\" :data-off=\"off\"></span>\n    </template>\n    <template v-else>\n      <span class=\"switch-label\"></span>\n    </template>\n    <span class=\"switch-handle\"></span>\n  </label>\n</template>\n\n<script>\nexport default {\n  model: {\n    prop: 'checked',\n    event: 'change'\n  },\n  props: {\n    value: {\n      default: true\n    },\n    uncheckedValue: {\n      default: false\n    },\n    checked: {\n      default: false\n    },\n    type: {\n      type: String,\n      default: 'default'\n    },\n    variant: {\n      type: String,\n      default: ''\n    },\n    pill: {\n      type: Boolean,\n      default: false\n    },\n    on: {\n      type: String,\n      default: null\n    },\n    off: {\n      type: String,\n      default: null\n    },\n    size: {\n      type: String,\n      default: null\n    }\n  },\n  computed: {\n    classList () {\n      return [\n        'switch',\n        this.switchType,\n        this.switchVariant,\n        this.switchPill,\n        this.switchSize\n      ]\n    },\n    switchType () {\n      return this.type ? `switch-${this.type}` : `switch-default`\n    },\n    switchVariant () {\n      return this.variant ? `switch-${this.variant}` : `switch-secondary`\n    },\n    switchPill () {\n      return !this.pill ? null : `switch-pill`\n    },\n    switchSize () {\n      return this.size ? `switch-${this.size}` : ''\n    },\n    isChecked () {\n      return this.checked === this.value\n    },\n    isOn () {\n      return !this.on ? null : true\n    }\n  },\n  methods: {\n    handleChange ({ target: { checked } }) {\n      this.$emit('change', checked ? this.value : this.uncheckedValue)\n    }\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/components/Switch.vue","<template>\n  <div class=\"animated fadeIn\">\n    <b-card>\n      <b-row>\n        <b-col sm=\"5\">\n          <h4 id=\"graph\" class=\"card-title mb-0\">Model Graph</h4>\n          <!-- <div class=\"small text-muted\">November 2017</div> -->\n        </b-col>\n        <b-col sm=\"7\" class=\"d-md-block\">\n          <!-- <b-button type=\"button\" variant=\"secondary\" class=\"float-right\" style=\"margin-left: 3px\" v-on:click=\"handleHelp()\" title=\"Help\" ><i class=\"fa fa-question\"></i></b-button> -->\n          <b-button type=\"button\" variant=\"danger\" class=\"float-right\" style=\"margin-left: 3px\" v-on:click=\"handleRun()\" title=\"Run Graph\" ><i class=\"fa fa-play\"></i></b-button>\n          <b-button type=\"button\" variant=\"primary\" class=\"float-right\" style=\"margin-left: 3px\" v-on:click=\"handleSave()\" title=\"Save Graph\"><i class=\"fa fa-save\"></i></b-button>\n          <!-- <b-button type=\"button\" variant=\"secondary\" class=\"float-right\" style=\"margin-left: 3px\"  v-on:click=\"handleShowWizard()\"><i class=\"fa fa-folder\"></i></b-button> -->\n          <b-dropdown right split variant=\"primary\" class=\"float-right\" style=\"margin-left: 3px\"  v-on:click=\"handleResetLayout('dagre')\" title=\"Set Layout\">\n            <template slot=\"button-content\">\n              <i class=\"fa fa-sitemap\"  title=\"DAG Layout\"></i>\n            </template>\n            <b-dropdown-item v-on:click=\"handleResetLayout('dagre')\">DAG Layout</b-dropdown-item>\n            <b-dropdown-item v-on:click=\"handleResetLayout('circle')\">Circle Layout</b-dropdown-item>\n            <b-dropdown-item v-on:click=\"handleResetLayout('breadthfirst')\">Breadth First Layout</b-dropdown-item>\n            <b-dropdown-item v-on:click=\"handleResetLayout('grid')\">Grid Layout</b-dropdown-item>\n            <b-dropdown-item v-on:click=\"handleResetLayout('concentric')\">Concentric Layout</b-dropdown-item>\n            <b-dropdown-item v-on:click=\"handleResetLayout('cose')\">CoSE Layout</b-dropdown-item>\n            <b-dropdown-item v-on:click=\"handleResetLayout('random')\">Random Layout</b-dropdown-item>\n          </b-dropdown>\n          <b-button type=\"button\" variant=\"success\" class=\"float-right\" style=\"margin-left: 3px\"  v-on:click=\"handleLoad()\" title=\"Load Template\"><i class=\"fa fa-folder-open\"></i></b-button>\n          <!-- <b-button-toolbar class=\"float-right\" aria-label=\"Toolbar with buttons group\">\n            <b-form-radio-group class=\"mr-3\" id=\"radiosBtn\" buttons button-variant=\"outline-secondary\" v-model=\"selected\" name=\"radiosBtn\">\n              <b-form-radio class=\"mx-0\" value=\"Day\">Day</b-form-radio>\n              <b-form-radio class=\"mx-0\" value=\"Month\">Month</b-form-radio>\n              <b-form-radio class=\"mx-0\" value=\"Year\">Year</b-form-radio>\n            </b-form-radio-group>\n          </b-button-toolbar> -->\n        </b-col>\n      </b-row>\n      <cytoscape-graph class=\"chart-wrapper\" style=\"height:600px;margin-top:40px;\" height=\"600\"></cytoscape-graph>\n       <div slot=\"footer\">\n        <!-- <div class=\"text-muted\">Template MetaData</div>\n            \n        <ul>\n          <li>\n            <div class=\"text-muted\">Authors</div>\n            <strong>Higgins et al</strong>\n            <b-progress height={} class=\"progress-xs mt-2\" :precision=\"1\" variant=\"success\" :value=\"40\"></b-progress>\n          </li>\n          <li class=\"d-none d-md-table-cell\">\n            <div class=\"text-muted\">Publication</div>\n            <strong>Neurips 2019</strong>\n            <b-progress height={} class=\"progress-xs mt-2\" :precision=\"1\" variant=\"info\" :value=\"20\"></b-progress>\n          </li>\n          <li>\n            <div class=\"text-muted\">Tags</div>\n            <strong>Disentanglement, Graphs, Unsupervised Learning</strong>\n            <b-progress height={} class=\"progress-xs mt-2\" :precision=\"1\" variant=\"warning\" :value=\"60\"></b-progress>\n          </li>\n          <li class=\"d-none d-md-table-cell\">\n            <div class=\"text-muted\">Title</div>\n            <strong>Challenging Common Assumptions in the</strong> </br> <strong>Unsupervised Learning of </br> Disentangled Representations</strong>\n            <b-progress height={} class=\"progress-xs mt-2\" :precision=\"1\" variant=\"danger\" :value=\"80\"></b-progress>\n          </li> \n                    <li class=\"d-none d-md-table-cell\">\n            <div class=\"text-muted\">Bounce Rate</div>\n            <strong>40.15%</strong>\n            <b-progress height={} class=\"progress-xs mt-2\" :precision=\"1\" :value=\"40\"></b-progress>\n          </li>\n -->        </ul>\n      </div>\n    </b-card>\n    <modals></modals>\n  </div>\n</template>\n\n<script>\nimport CytoscapeGraph from './dashboard/CytoscapeGraph.vue'\nimport Modals from './dashboard/Modals/index.vue'\nimport { mapMutations, mapGetters, mapActions } from 'vuex'\n\nexport default {\n  name: 'dashboard',\n  components: {\n    CytoscapeGraph,\n    Modals\n  },\n  computed: {\n    ...mapGetters({\n      currentGraphType: 'graph/currentGraphType',\n      currentGraphId: 'graph/currentGraphId',\n      cy: 'cy'\n    })\n  },\n  methods: {\n    ...mapMutations({\n      showLoad: 'showLoadGraph',\n      showSave: 'showSaveGraph',\n      showUpdate: 'showUpdateGraph',\n      showWizard: 'showWizard',\n      showHelp: 'showHelp'\n    }),\n    ...mapActions({\n      updateRootGraphs: 'graph/updateRootGraphs',\n      updateUserGraphs: 'graph/updateUserGraphs',\n      runCurrentGraph: 'graph/runCurrentGraph'\n    }),\n    handleRun: function () {\n      this.runCurrentGraph()\n    },\n    handleHelp: function () {\n      this.showHelp()\n    },\n    handleLoad: function () {\n      this.updateRootGraphs()\n      this.updateUserGraphs()\n      this.showLoad()\n    },\n    handleSave: function () {\n      if (this.currentGraphType === 'root') {\n        this.showSave()\n      } else {\n        this.showUpdate()\n      }\n    },\n    handleResetLayout: function (layoutName) {\n      var layout = this.cy.layout(\n        { name: layoutName,\n          animate: true, // whether to transition the node positions\n          animationDuration: 500 // duration of animation in ms if enabled\n        })\n      layout.run()\n    },\n    handleShowWizard: function () {\n      this.showWizard()\n    }\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/views/Dashboard.vue","<template>\n    <div id=\"cy\"> </div>\n</template>\n\n<script>\nimport cytoscape from 'cytoscape'\nimport cytoscapeDagre from 'cytoscape-dagre'\nimport cytoscapeContextMenu from 'cytoscape-context-menus'\nimport cytoscapeEdgehandles from 'cytoscape-edgehandles'\nimport $ from 'jquery'\nimport { mapGetters, mapActions } from 'vuex'\n\nexport default {\n  name: 'CytoscapeGraph',\n  // data () {\n  //   return {\n  //     cy: null\n  //   }\n  // },\n  computed: {\n    ...mapGetters({\n      cytoscapeConfig: 'cytoscapeConfig',\n      edgehandlesConfig: 'edgehandlesConfig',\n      contextMenusConfig: 'contextMenusConfig',\n      cy: 'cy',\n      funcMeta: 'funcMeta',\n      initGraph: 'initGraph'\n    })\n    // ,\n    // elements: function () {\n    //   return this.cy.json()\n    // }\n  },\n  methods: {\n    ...mapActions({\n      setCytoscapeInitConfig: 'setCytoscapeInitConfig',\n      setEdgehandlesConfig: 'setEdgehandlesConfig',\n      setContextMenusConfig: 'setContextMenusConfig',\n      setCy: 'setCy',\n      setLibHierarchy: 'setLibHierarchy',\n      setFuncMeta: 'setFuncMeta',\n      setLibMeta: 'setLibMeta',\n      setLibUINames: 'setLibUINames',\n      setInitGraph: 'setInitGraph'\n    })\n  },\n  // watch: {\n  //   elements (newElements, oldElements) {\n  //     if (typeof this.cy !== 'undefined' && this.cy !== null) {\n  //       this.cy.json({ elements: this.elements })\n  //     }\n  //   }\n  // },\n  mounted: function () {\n    let container = $('#cy')\n    // getting cytoscape configutations\n    this.setLibHierarchy().then(() => {\n      console.log('updated lib hierarchy')\n    })\n    this.setLibMeta()\n    this.setLibUINames()\n    this.setFuncMeta().then(() => {\n      this.setCytoscapeInitConfig(container).then(() => {\n        // registering cytoscape plugins\n        cytoscape.use(cytoscapeDagre)\n        cytoscape.use(cytoscapeEdgehandles)\n        cytoscapeContextMenu(cytoscape, $)\n        // cytoscape init\n        // this.cy = cytoscape(Object.assign(this.cytoscapeConfig))\n        // console.log('\"**********************************************************************************\"', this.cytoscapeConfig)\n        this.setCy(cytoscape(Object.assign(this.cytoscapeConfig)))\n        // edgehandles init\n        this.setEdgehandlesConfig(this).then(() => {\n          this.cy.edgehandles(this.edgehandlesConfig)\n        })\n        // contextMenus init\n        this.setContextMenusConfig(this).then(() => {\n          // console.log(this)\n          this.cy.contextMenus(this.contextMenusConfig)\n        })\n      }).then(() => {\n        this.setInitGraph(this).then(() => {\n          // console.log(this.initGraph)\n          this.cy.json(JSON.parse(this.initGraph.content))\n        })\n      })\n    })\n\n    // window.selectAllOfTheSameType = function (ele) {\n    //   this.cy.elements().unselect()\n    //   if (ele.isNode()) {\n    //     this.cy.nodes().select()\n    //   } else if (ele.isEdge()) {\n    //     this.cy.edges().select()\n    //   }\n    // }\n    // window.removeEdgesWithNonVertex = function () {\n    //   var nidx = []\n    //   window.cytoOptions.elements.nodes.forEach(function (node) {\n    //     nidx.push(node.data.id)\n    //     console.log('pushed node :' + node.data.id)\n    //   })\n    //   window.cytoOptions.elements.edges.forEach(function (edge) {\n    //     if (!nidx.includes(edge.data.source) || !nidx.includes(edge.data.target)) {\n    //       var neidx = window.cytoOptions.elements.edges.indexOf(edge)\n    //       window.cytoOptions.elements.edges.splice(neidx, 1)\n    //       console.log('removed edge :' + edge.data.source + '-' + edge.data.target + '-' + edge.data.id)\n    //     }\n    //   })\n    //   window.cy.json({ elements: window.cytoOptions.elements })\n    // //      window.cy.json({ elements: window.cytoOptions.elements })\n    // }\n\n    // save state\n    // console.log('from main mounted of CytoscapeGraph.vue')\n    // console.log(this.$el)\n  }\n}\n</script>\n<style>\n#cy {\n  width: 100%;\n  height: 100%;\n  /*position: absolute;*/\n  left: 0;\n  top: 0;\n  /*z-index: 999;*/\n  margin:auto;\n  border:3px solid #ccc!important;\n  /* border-radius:16px; */\n  padding:2px;\n}\n\n.cy-context-menus-cxt-menu {\n    display:none;\n    z-index:1000;\n    position:absolute;\n    border:1px solid #A0A0A0;\n    padding: 0;\n    margin: 0;\n    width:auto;\n}\n\n.cy-context-menus-cxt-menuitem {\n    display:block;\n    z-index:1000;\n    width: 100%;\n    padding: 3px 20px;\n    position:relative;\n    margin:0;\n    background-color:#f8f8f8;\n    font-weight:normal;\n    font-size: 12px;\n    white-space:nowrap;\n    border: 0;\n    text-align: left;\n}\n\n.cy-context-menus-cxt-menuitem:enabled {\n    color: #000000;\n}\n\n.cy-context-menus-ctx-operation:focus {\n  outline: none;\n}\n\n.cy-context-menus-cxt-menuitem:hover {\n    color: #ffffff;\n    text-decoration: none;\n    background-color: #0B9BCD;\n    background-image: none;\n    cursor: pointer;\n}\n\n.cy-context-menus-cxt-menuitem[content]:before {\n    content:attr(content);\n}\n\n.cy-context-menus-divider {\n  border-bottom:1px solid #A0A0A0;\n}\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/views/dashboard/CytoscapeGraph.vue","<template>\n  <div class=\"wrapper\">\n    <add-node></add-node>\n    <edit-node></edit-node>\n    <edit-edge></edit-edge>\n    <load-graph></load-graph>\n    <save-graph></save-graph>\n    <update-graph></update-graph>\n    <help></help>\n    <wizard></wizard>\n  </div>\n</template>\n\n<script>\nimport AddNode from './AddNode.vue'\nimport EditNode from './EditNode.vue'\nimport EditEdge from './EditEdge.vue'\nimport LoadGraph from './LoadGraph.vue'\nimport SaveGraph from './SaveGraph.vue'\nimport UpdateGraph from './UpdateGraph.vue'\nimport Wizard from './Wizard.vue'\nimport Help from './Help.vue'\n\nexport default {\n  name: 'modals',\n  components: {\n    AddNode,\n    EditNode,\n    EditEdge,\n    LoadGraph,\n    Help,\n    SaveGraph,\n    UpdateGraph,\n    Wizard\n  },\n  data () {\n    return {\n      // myModal: fa\n      // ,\n      // largeModal: false,\n      // smallModal: false,\n      // primaryModal: false,\n      // successModal: false,\n      // warningModal: false,\n      // dangerModal: false,\n      // infoModal: false\n    }\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/views/dashboard/Modals/index.vue","<template>\n  <b-modal title=\"Add Node\" v-model=\"myModal\" @ok=\"handleOk()\" @cancel=\"hide()\" hide-header-close>\n   <div>\n      <template v-for='(stage, key1) in libHierarchy'>\n        <b-form-group\n          :label=\"key1\"\n          label-for=\"radios\"\n          :label-cols=\"3\"\n          :horizontal=\"true\">\n          <b-form-radio-group\n            id=\"radios\"\n            name=\"radiosInline\">\n            <div v-for='(element, key2) in stage' class=\"custom-control custom-radio custom-control-inline\">\n              {{stage[\"name\"]}}\n              <input type=\"radio\" :id=key2 name=\"radiosInline\" class=\"custom-control-input\" :value=JSON.stringify(element) :key1=key1 :key2=key2>\n              \n              <label class=\"custom-control-label\" for=\"radiosInline\">{{key2}}</label>\n            </div>\n          </b-form-radio-group>\n        </b-form-group>\n      </template>\n    </div>\n  </b-modal>\n</template>\n\n<script>\nimport { mapGetters, mapMutations } from 'vuex'\nimport $ from 'jquery'\nimport utils from '../_utils'\n\nexport default {\n  name: 'addNode',\n  data () {\n    return {\n      info: 'Asdf'\n    }\n  },\n  computed: {\n    ...mapGetters({\n      visible: 'addNodeVisible',\n      clickPos: 'cyClickPos',\n      libHierarchy: 'libHierarchy',\n      cy: 'cy'\n    }),\n    myModal: {\n      get: function () {\n        return this.visible\n      },\n      set: function (value) {\n        if (value === true) {\n          this.show()\n        } else {\n          this.hide()\n        }\n      }\n    }\n  },\n  methods: {\n    ...mapMutations({\n      show: 'showAddNode',\n      hide: 'hideAddNode',\n      shownext: 'showEditNode',\n      setSelectedNodeId: 'setSelectedNodeId',\n      setSelectedNodeElem: 'setSelectedNodeElem'\n    }),\n    handleOk: function () {\n      let $selected = $('input[name=radiosInline]:checked')\n      this.addNode(JSON.parse($selected.val()), $selected.attr('key1'), $selected.attr('key2'))\n\n      let ele = document.getElementsByName('radiosInline')\n      for (var i = 0; i < ele.length; i++) {\n        ele[i].checked = false\n      }\n\n      this.hide()\n      this.shownext()\n    },\n    addNode: function (elem, key1, key2) {\n      console.log('addnode', elem, key1, key2)\n      const name = key1 + ' : ' + key2\n      var newNode = {}\n      if (key2 === 'CSV' || key2 === 'Chemical') {\n        newNode = {\n          group: 'nodes',\n          data: {id: utils.guid(), name: name, info: elem},\n          style: {\n            'content': 'data(name)',\n            'text-opacity': 0.5,\n            'text-valign': 'center',\n            'text-halign': 'right',\n            'background-color': '#000000'\n          },\n          position: {x: this.clickPos.x, y: this.clickPos.y}\n\n        }\n      }\n      if (key2 === 'Dimensionality Reduction') {\n        newNode = {\n          group: 'nodes',\n          data: {id: utils.guid(), name: name, info: elem},\n          style: {\n            'content': 'data(name)',\n            'text-opacity': 0.5,\n            'text-valign': 'center',\n            'text-halign': 'right',\n            'background-color': '#aa0000'\n          },\n          position: {x: this.clickPos.x, y: this.clickPos.y}\n\n        }\n      }\n      if (key2 === 'Preprocessing' || key2 === 'Data Splitting') {\n        newNode = {\n          group: 'nodes',\n          data: {id: utils.guid(), name: name, info: elem},\n          style: {\n            'content': 'data(name)',\n            'text-opacity': 0.5,\n            'text-valign': 'center',\n            'text-halign': 'right',\n            'background-color': '#0000aa'\n          },\n          position: {x: this.clickPos.x, y: this.clickPos.y}\n\n        }\n      }\n      if (key2 === 'Linear' || key2 === 'Neural Network' || key2 === 'Support Vector Machines') {\n        newNode = {\n          group: 'nodes',\n          data: {id: utils.guid(), name: name, info: elem},\n          style: {\n            'content': 'data(name)',\n            'text-opacity': 0.5,\n            'text-valign': 'center',\n            'text-halign': 'right',\n            'background-color': '#aaaa00'\n          },\n          position: {x: this.clickPos.x, y: this.clickPos.y}\n\n        }\n      }\n      if (key2 === 'Selection' || key2 === 'Metrics') {\n        newNode = {\n          group: 'nodes',\n          data: {id: utils.guid(), name: name, info: elem},\n          style: {\n            'content': 'data(name)',\n            'text-opacity': 0.5,\n            'text-valign': 'center',\n            'text-halign': 'right',\n            'background-color': '#00aa00'\n          },\n          position: {x: this.clickPos.x, y: this.clickPos.y}\n\n        }\n      }\n      if (key2 === 'Store Plot' || key2 === 'Store Data') {\n        newNode = {\n          group: 'nodes',\n          data: {id: utils.guid(), name: name, info: elem},\n          style: {\n            'content': 'data(name)',\n            'text-opacity': 0.5,\n            'text-valign': 'center',\n            'text-halign': 'right',\n            'background-color': '#aa00aa'\n          },\n          position: {x: this.clickPos.x, y: this.clickPos.y}\n\n        }\n      }\n\n      this.setSelectedNodeId(newNode.data.id)\n      this.setSelectedNodeElem(newNode)\n      this.cy.add(newNode)\n    }\n  },\n  mounted () {\n    // this.show()\n  }\n}\n</script>\n\n<style scoped>\n.custom-control-input{\n  left: 2px;\n  top: 6px;\n  z-index: 1;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/views/dashboard/Modals/AddNode.vue","<template>\n  <b-modal title=\"Edit Node\" v-model=\"myModal\" @ok=\"handleOk\" @cancel=\"handleCancel\">\n    <div v-if=\"selectedNode.hasOwnProperty('elem')\">\n\n      <strong>Node Type</strong>\n      <template v-for='(lib, key1) in selectedNode.elem.data.info'>\n        \n        <b-form-group\n          :label=\"key1\"\n          label-for=\"radios\"\n          :label-cols=\"3\"\n          :horizontal=\"true\">\n          <!-- <div v-for='func in lib.name' class=\"custom-control custom-radio custom-control-inline\"> -->\n              <b-form-radio-group\n                id=\"radios\"\n                name=\"funcRadios\">\n                <div v-for='func in lib.name' class=\"custom-control custom-radio custom-control-inline\">\n                  <input type=\"radio\" :id=func name=\"funcRadios\" class=\"custom-control-input\" :value=func v-on:click=\"handleFuncChange(key1,func, lib.functions[lib.name.indexOf(func)])\">\n                  <label class=\"custom-control-label\" for=\"radiosInline\">{{func}}</label>\n                </div>\n              </b-form-radio-group>\n          <!-- </div> -->\n        </b-form-group>\n      </template>\n\n      <!-- \n      <div class=\"row\">\n      <div class=\"col-sm-6\">\n        <b-button :class=btnclass1  v-on:click=\"handleBtnClick(1)\">Use Class Object Instance</b-button>\n      </div>\n      <div class=\"col-sm-6\">\n        <b-button :class=btnclass2   v-on:click=\"handleBtnClick(2)\">Use Class Method Function</b-button>\n      </div>\n      </div> -->\n\n      <!-- <div v-if='!selec2ted'> -->\n        <strong v-if='meths !==undefined'>Select Class Method</strong>\n        <template v-for='param in meths'>\n          <b-form-radio-group\n          id=\"radiosmeths\"\n          name=\"methRadios\">\n           <input type=\"radio\" :id=param name=\"methRadios\" :value=param v-on:click=\"handleMethChange(param)\">\n           <label class=\"custom-control-label\" for=\"radiosInline\">{{param}}</label>\n          </b-form-radio-group>\n        </template>\n        <br/>\n\n        <div v-if='fparams.length>0'>\n          <button class='btn btn-success'  v-on:click=\"isHidden = !isHidden\">Click to Set Base Parameter Values</button>\n          <b-button class='btn btn-outline-info'   v-on:click=\"isHidden2 = !isHidden2\"><i class=\"fa fa-question\"></i></b-button>\n        </div>\n      <!-- </div> -->\n          \n            \n          \n          <template v-if='!isHidden' v-for='param in fparams'>\n            <b-form-group>\n              <dl class=\"row\">\n                <dt class=\"col-sm-4 \">\n                  <div v-if='!param.is_optional' class='form-group required'>\n                    <label :for=param.name class='control-label'>{{param.name}}</label>\n                  </div>\n                  <div v-else>\n                    <label :for=param.name>{{param.name}}</label>\n                  </div>\n                </dt>\n                <dd class=\"col-sm-7\">\n                  <div class='alert alert-light' v-if='!isHidden2'>\n                    {{param.desc}}\n                  </div>\n                </dd>\n                <dd class=\"col-sm-12\">\n                  <b-form-file v-if=\"param.name === 'filepath_or_buffer'\" :id=param.name placeholder=\"Enter Value\" v-model=\"param.value\"></b-form-file>\n                  <b-form-input type=\"text\" v-else :id=param.name placeholder=\"Enter Value\" v-model=\"param.value\"></b-form-input>\n                </dd>\n              </dl>\n            </b-form-group>\n          </template>\n    </div>\n\n  </b-modal>\n</template>\n\n<script>\nimport { mapGetters, mapMutations } from 'vuex'\nimport _ from 'lodash'\n// import $ from 'jquery'\n\nexport default {\n  name: 'editNode',\n  data () {\n    return {\n      host: '',\n      func: '',\n      funcm: '',\n      funcminputs: [],\n      funcmoutputs: [],\n      meths: [],\n      wparams: [],\n      isHidden: true,\n      isHidden2: true,\n      selec2ted: true,\n      btnclass1: 'btn btn-outline-primary',\n      btnclass2: 'btn btn-outline-primary',\n      fparams: []\n    }\n  },\n  computed: {\n    ...mapGetters({\n      visible: 'editNodeVisible',\n      selectedNode: 'selectedNode',\n      funcMeta: 'funcMeta',\n      cy: 'cy'\n    }),\n    myModal: {\n      get: function () {\n        return this.visible\n      },\n      set: function (value) {\n        if (value === true) {\n          this.show()\n        } else {\n          this.hide()\n        }\n      }\n    }\n  },\n  methods: {\n    ...mapMutations({\n      show: 'showEditNode',\n      hide: 'hideEditNode',\n      resetSelectedNode: 'resetSelectedNode'\n    }),\n    handleFuncChange: function (host, func, meths) {\n      this.host = host\n      this.func = func\n      this.meths = meths\n      this.isHidden = true\n      this.isHidden2 = true\n      this.wparams = _.cloneDeep(this.funcMeta[func].WParameters)\n      this.fparams = _.cloneDeep(this.funcMeta[func].FParameters)\n      if (this.meths === undefined) {\n        this.meths = ['data', 'obj']\n      }\n      console.log('funchange', host, func, meths)\n      console.log('funchange', this.host, this.func, this.meths)\n      console.log('funchange', this.funcMeta[func])\n    },\n    // handleBtnClick: function (param) {\n    //   console.log('In btnclcik', param, this.func)\n    //   console.log(this.funcMeta[this.func]['Methods'][param])\n    //   if (param === 1) {\n    //     this.selec2ted = true\n    //     this.isHidden = true\n    //     this.isHidden2 = true\n    //     this.funcm = 'obj'\n    //     this.funcmoutputs = this.fparams\n    //     this.funcminputs = []\n\n    //     this.btnclass1 = 'btn btn-success'\n    //     this.btnclass2 = 'btn btn-outline-primary'\n    //   } else {\n    //     this.selec2ted = false\n    //     this.btnclass2 = 'btn btn-success'\n    //     this.btnclass1 = 'btn btn-outline-primary'\n    //   }\n    // },\n    handleMethChange: function (param) {\n      console.log('In methchange', param, this.func)\n      console.log(this.funcMeta[this.func]['Methods'][param])\n      if (param === 'obj') {\n        this.funcm = 'obj'\n        this.funcmoutputs = [{'name': 'obj'}] // this.fparams\n        this.funcminputs = [{'name': 'obj'}] // this.fparams\n      } else {\n        this.funcm = param\n        this.funcmoutputs = _.cloneDeep(this.funcMeta[this.func]['Methods'][param]['outputs'])\n        this.funcminputs = _.cloneDeep(this.funcMeta[this.func]['Methods'][param]['inputs'])\n      }\n      console.log(this.funcminputs, this.funcmoutputs)\n    },\n    handleOk: function () {\n      let node = this.selectedNode\n      node.elem.data.params = {wparams: this.wparams, fparams: this.fparams, meths: this.meths, funcm: this.funcm, inp: this.funcminputs, op: this.funcmoutputs}\n      node.elem.data.func = this.func\n      node.elem.data.host = this.host\n      this.cy.add(node.elem)\n\n      this.hide()\n      this.resetSelectedNode()\n    },\n    handleCancel: function () {\n      this.hide()\n      this.resetSelectedNode()\n    }\n  },\n  watch: {\n    // whenever question changes, this function will run\n    selectedNode: function (newVal, oldVal) {\n      if (this.selectedNode.hasOwnProperty('elem')) {\n        if (this.selectedNode.elem.data.hasOwnProperty('params')) {\n          this.func = this.selectedNode.elem.data.func\n          this.funcm = this.selectedNode.elem.data.params.funcm\n          console.log('selected node data', this.selectedNode.elem.data)\n          setTimeout(function () {\n          // alert(this.func)\n            let ele = document.getElementById(this.func)\n            ele.checked = true\n            let ele2 = document.getElementById(this.funcm)\n            ele2.checked = true\n          }.bind(this), 500)\n          this.wparams = this.selectedNode.elem.data.params.wparams\n          this.fparams = this.selectedNode.elem.data.params.fparams\n          this.meths = this.selectedNode.elem.data.params.meths\n        }\n      } else {\n        this.func = ''\n        this.funcm = ''\n        this.wparams = []\n        this.fparams = []\n        this.meths = []\n      }\n    }\n  },\n  mounted () {\n    // this.show()\n  }\n}\n</script>\n\n<style scoped>\n.custom-control-input{\n  left: 2px;\n  top: 6px;\n  z-index: 1;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/views/dashboard/Modals/EditNode.vue","<template>\n  <b-modal title=\"Edit Edge\" v-model=\"myModal\" @ok=\"handleOk()\" @cancel=\"hide()\" hide-header-close>\n\n    <strong v-if='inputs.length>0'>Source Node Outputs</strong>\n    <template v-for='input in inputs'>\n      <b-form-group>\n        <label :for=input.name>{{input.name}}</label>\n         <div class='alert alert-light' v-if='!isHidden2'>\n                    {{input.docstring}}\n                  </div>\n        <b-form-checkbox type=\"\" :id=input.name placeholder=\"Enter Value\" v-model=\"input.value\" value=true unchecked-value=false></b-form-checkbox>\n      </b-form-group>\n    </template>\n    <br/>\n\n  <strong v-if='outputs.length>0'>Target Node Inputs</strong><b-button class='btn-xs btn-outline-info'   v-on:click=\"isHidden2 = !isHidden2\"><i class=\"fa fa-question\"></i></b-button>\n  \n  <br>\n  <small v-if='outputs.length>0'> Select unique values for each from dropdown output of previous node</small>\n    <template v-for='output in outputs'>\n      <b-form-group>\n        <label :for=output.name>{{output.name}}</label>\n\n          <div class='alert alert-light' v-if='!isHidden2'>\n                    {{output.docstring}}\n                  </div>\n        <b-form-select :id=output.name v-model=\"output.value\" >\n          <option v-for='input in inputs' :value=\"input.name\">\n            {{input.name}}\n          </option>\n        </b-form-select>\n      </b-form-group>\n    </template>\n\n        <!-- <b-form-input type=\"text\" :id=output.name placeholder=\"Enter Value\" v-model=\"output.value\"></b-form-input> -->\n  </b-modal>\n</template>\n\n<script>\nimport { mapGetters, mapMutations } from 'vuex'\n\nexport default {\n  name: 'editEdge',\n  data () {\n    return {\n      inputs: [],\n      outputs: [],\n      isHidden2: true\n    }\n  },\n  computed: {\n    ...mapGetters({\n      visible: 'editEdgeVisible',\n      selectedEdge: 'selectedEdge',\n      funcMeta: 'funcMeta',\n      cy: 'cy'\n    }),\n    myModal: {\n      get: function () {\n        return this.visible\n      },\n      set: function (value) {\n        if (value === true) {\n          this.show()\n        } else {\n          this.hide()\n        }\n      }\n    }\n  },\n  methods: {\n    ...mapMutations({\n      show: 'showEditEdge',\n      hide: 'hideEditEdge'\n    }),\n    handleOk: function () {\n      let edge = this.selectedEdge\n      edge.data.inputs = this.inputs\n      edge.data.outputs = this.outputs\n      this.cy.add(edge)\n\n      this.hide()\n    }\n  },\n  watch: {\n    selectedEdge: function (newVal, oldVal) {\n      // console.log('selectedEdge watch')\n      // console.log(newVal)\n      // console.log(oldVal)\n\n      if (newVal.data.hasOwnProperty('inputs')) {\n        this.inputs = newVal.data.inputs\n        this.outputs = newVal.data.outputs\n      } else {\n        this.inputs = []\n        this.outputs = []\n      }\n    }\n  },\n  mounted () {\n    console.log('selectedEdge mounted')\n    console.log(this.selectedEdge)\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/views/dashboard/Modals/EditEdge.vue","<template>\n  <b-modal title=\"Load Graph\" size=\"lg\" v-model=\"myModal\" @ok=\"handleOk()\" @cancel=\"hide()\" hide-header-close >\n    <div class=\"row\">\n      <div class=\"col-sm-2\" style=\"border-right: 1px solid #a4b7c1\">\n        <b-list-group>\n          <b-list-group-item id=\"root\" v-on:click=\"openView('rootgraphs')\" href=\"#\" view=\"rootgraphs\" class=\"sections btn-secondary btn-sm active\">Templates</b-list-group-item>\n          <b-list-group-item id=\"user\" v-on:click=\"openView('usergraphs')\" href=\"#\" view=\"usergraphs\" class=\"sections btn-secondary btn-sm\">Saved</b-list-group-item>\n        </b-list-group>\n      </div>\n      <div id=\"rootgraphs\" class=\"col-sm-10 graphviews\">\n        <div class=\"col-sm-6\">\n          <select name=\"user\" size=\"8\" class=\"form-control\">\n            <template v-for='graph in rootgraphs'>\n              <option :value=graph.graph_id>{{graph.title}}</option>\n            </template>\n          </select>\n        </div>\n      </div>\n      <div  id=\"usergraphs\" class=\"col-sm-10 graphviews hiddenView\">\n        <div class=\"col-sm-6\">\n          <select name=\"user\" size=\"8\" class=\"form-control\">\n            <template v-for='graph in usergraphs'>\n              <option :value=graph.graph_id>{{graph.title}}</option>\n            </template>\n          </select>\n        </div>\n      </div>\n    </div>\n  </b-modal>\n</template>\n\n<script>\nimport { mapGetters, mapMutations, mapActions } from 'vuex'\nimport $ from 'jquery'\n// import utils from '../_utils'\n\nexport default {\n  name: 'loadGraph',\n  data () {\n    return {\n      graphId: ''\n    }\n  },\n  computed: {\n    ...mapGetters({\n      visible: 'loadGraphVisible',\n      rootgraphs: 'graph/rootgraphs',\n      usergraphs: 'graph/usergraphs',\n      cy: 'cy'\n    }),\n    myModal: {\n      get: function () {\n        return this.visible\n      },\n      set: function (value) {\n        if (value === true) {\n          this.show()\n        } else {\n          this.hide()\n        }\n      }\n    }\n  },\n  methods: {\n    ...mapMutations({\n      show: 'showLoadGraph',\n      hide: 'hideLoadGraph'\n    }),\n    ...mapActions({\n      updateRootGraphs: 'graph/updateRootGraphs',\n      updateUserGraphs: 'graph/updateUserGraphs',\n      setCurrentGraphType: 'graph/setCurrentGraphType',\n      setCurrentGraphId: 'graph/setCurrentGraphId',\n      setCurrentGraphTitle: 'graph/setCurrentGraphTitle'\n    }),\n    handleOk: function () {\n      let val = $('.sections.active').first().attr('id')\n      let graphId = $('#' + val + 'graphs option:selected').val()\n      if (graphId !== undefined) {\n        this.loadGraph(val, graphId)\n      }\n      this.hide()\n    },\n    openView: function (view) {\n      $('.graphviews').addClass('hiddenView')\n      $('#' + view).removeClass('hiddenView')\n    },\n    FindGraphById: function (graph) {\n      if (String(graph.graph_id) === String(this.graphId)) {\n        return graph\n      }\n    },\n    loadGraph: function (type, graphId) {\n      console.log(graphId)\n      this.graphId = graphId\n      let graph = ''\n      if (type === 'root') {\n        graph = this.rootgraphs.find(this.FindGraphById, graphId)\n      } else if (type === 'user') {\n        graph = this.usergraphs.find(this.FindGraphById, graphId)\n      }\n      let graphData = JSON.parse(graph.content)\n      for (var nodekey in graphData.elements.nodes) {\n        if (graphData.elements.nodes[nodekey]['data']['name']) {\n          var key2 = graphData.elements.nodes[nodekey]['data']['name'].split(':')[1]\n          console.log('sskey2', key2)\n          if (key2 === ' CSV' || key2 === ' Chemical') {\n            graphData.elements.nodes[nodekey]['style'] = {'background-color': '#000'}\n          }\n          if (key2 === ' Dimensionality Reduction') {\n            graphData.elements.nodes[nodekey]['style'] = {'background-color': '#a00'}\n          }\n          if (key2 === ' Preprocessing' || key2 === ' Data Splitting') {\n            graphData.elements.nodes[nodekey]['style'] = {'background-color': '#00a'}\n          }\n          if (key2 === ' Linear' || key2 === ' Neural Network' || key2 === ' Support Vector Machines') {\n            graphData.elements.nodes[nodekey]['style'] = {'background-color': '#aa0'}\n          }\n          if (key2 === ' Selection' || key2 === ' Metrics') {\n            graphData.elements.nodes[nodekey]['style'] = {'background-color': '#0a0'}\n          }\n          if (key2 === ' Store Data' || key2 === ' Store Plot') {\n            graphData.elements.nodes[nodekey]['style'] = {'background-color': '#a0a'}\n          }\n        } else {\n          continue\n        }\n      }\n      this.cy.json(graphData)\n      console.log('frm load', graphData)\n      this.setCurrentGraphId(graphId)\n      this.setCurrentGraphType(type)\n      this.setCurrentGraphTitle(graph.title)\n    }\n  },\n  mounted () {\n    $('.sections').click(function () {\n      $('.active').removeClass('active')\n      $(this).addClass('active')\n    })\n\n    this.updateRootGraphs()\n    this.updateUserGraphs()\n  }\n}\n</script>\n\n<style scoped>\n  .hiddenView{\n    display: none;\n  }\n</style>\n\n\n\n\n// WEBPACK FOOTER //\n// src/views/dashboard/Modals/LoadGraph.vue","<template>\n  <b-modal title=\"Save Graph\" v-model=\"myModal\" @ok=\"handleOk()\" @cancel=\"hide()\" hide-header-close >\n    <div>\n\n      <label for=\"name\">Name</label>\n      <b-form-input type=\"text\" id=\"name\" v-model=\"newGraphTitle\" ></b-form-input>\n\n    </div>\n  </b-modal>\n</template>\n\n<script>\nimport { mapGetters, mapMutations, mapActions } from 'vuex'\n// import $ from 'jquery'\n// import utils from '../_utils'\n\nexport default {\n  name: 'saveGraph',\n  data () {\n    return {\n      newGraphTitle: 'Untitled'\n    }\n  },\n  computed: {\n    ...mapGetters({\n      visible: 'saveGraphVisible',\n      clickPos: 'cyClickPos',\n      libHierarchy: 'libHierarchy',\n      cy: 'cy',\n      currentGraphId: 'graph/currentGraphId',\n      currentGraphType: 'graph/currentGraphType',\n      currentGraphTitle: 'graph/currentGraphTitle'\n    }),\n    myModal: {\n      get: function () {\n        return this.visible\n      },\n      set: function (value) {\n        if (value === true) {\n          this.show()\n        } else {\n          this.hide()\n        }\n      }\n    }\n  },\n  methods: {\n    ...mapMutations({\n      show: 'showSaveGraph',\n      hide: 'hideSaveGraph'\n    }),\n    ...mapActions({\n      saveCurrentUserGraph: 'graph/saveCurrentUserGraph'\n    }),\n    handleOk: function () {\n      let data = JSON.stringify(this.cy.json())\n      // let style = JSON.stringify(this.cy.style())\n      this.saveCurrentUserGraph({'title': this.newGraphTitle, 'content': data})\n      this.hide()\n    },\n    printCyJson: function () {\n      // let data = JSON.stringify(this.cy.json())\n      // console.log(data)\n      console.log(this.currentGraphId)\n      console.log(this.currentGraphType)\n    }\n  },\n  mounted () {\n    // this.show()\n  }\n}\n</script>\n\n<style scoped>\n.custom-control-input{\n  left: 2px;\n  top: 6px;\n  z-index: 1;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/views/dashboard/Modals/SaveGraph.vue","<template>\n  <b-modal title=\"Update Graph\" v-model=\"myModal\" @ok=\"handleOk()\" ok-title=\"Yes\" @cancel=\"handleCancel()\" cancel-title=\"No\" no-close-on-esc no-close-on-backdrop hide-header-close >\n    <div>\n      <h5>Do you want update/overwrite the current graph?</h5>\n      <!--<b-button variant=\"primary\" v-on:click=\"printCyJson()\">Primary</b-button>-->\n    </div>\n  </b-modal>\n</template>\n\n<script>\nimport { mapGetters, mapMutations, mapActions } from 'vuex'\n// import $ from 'jquery'\n// import utils from '../_utils'\n\nexport default {\n  name: 'updateGraph',\n  data () {\n    return {\n      info: 'Asdf'\n    }\n  },\n  computed: {\n    ...mapGetters({\n      visible: 'updateGraphVisible',\n      clickPos: 'cyClickPos',\n      libHierarchy: 'libHierarchy',\n      cy: 'cy',\n      currentGraphId: 'graph/currentGraphId',\n      currentGraphType: 'graph/currentGraphType'\n    }),\n    myModal: {\n      get: function () {\n        return this.visible\n      },\n      set: function (value) {\n        if (value === true) {\n          this.show()\n        } else {\n          this.hide()\n        }\n      }\n    }\n  },\n  methods: {\n    ...mapMutations({\n      show: 'showUpdateGraph',\n      hide: 'hideUpdateGraph',\n      showSave: 'showSaveGraph'\n    }),\n    ...mapActions({\n      updateCurrentUserGraph: 'graph/updateCurrentUserGraph'\n    }),\n    handleCancel: function () {\n      this.hide()\n      this.showSave()\n    },\n    handleOk: function () {\n      if (this.currentGraphType === 'user') {\n        let data = JSON.stringify(this.cy.json())\n        this.updateCurrentUserGraph({'id': this.currentGraphId, 'content': data})\n      }\n      this.hide()\n    },\n    printCyJson: function () {\n      // let data = JSON.stringify(this.cy.json())\n      // console.log(data)\n      console.log(this.currentGraphId)\n      console.log(this.currentGraphType)\n    }\n  },\n  mounted () {\n    // this.show()\n  }\n}\n</script>\n\n<style scoped>\n.custom-control-input{\n  left: 2px;\n  top: 6px;\n  z-index: 1;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/views/dashboard/Modals/UpdateGraph.vue","<template>\n  <b-modal title=\"Wizard\" size=\"lg\" v-model=\"myModal\" @ok=\"handleOk\" hide-header hide-footer ok-title=\"Yes\" @cancel=\"handleCancel\" cancel-title=\"No\"  hide-header-close >\n    <div>\n      <form-wizard @on-complete=\"handleOk\" @on-change=\"setActiveIndex\" step-size=\"sm\" title=\"Startup Wizard\" color=\"#184da3\" ref=\"formWizard\">\n\n        <template v-for='(stage, key1) in wizHierarchy'>\n\n        <tab-content :icon=\"icon[key1]\" :title=key1 v-if=\"key1!='Mix'\">\n          <div v-if=\"key1!='Finish'\">\n\n            <div  style=\"border: solid rgb(164, 183, 193);border-width: 1px 0px;padding: 0px 5px 10px 5px;\">\n\n\n              <!--v-for=\"index in moduleCount[]\"-->\n              <div v-for=\"index in 1\" class=\"row\" style=\"margin-top: 10px\">\n                <div class=\"col-sm-6\">\n                  <select name=\"user\" size=\"5\" class=\"form-control\" v-model=\"selectedFunction[key1]\">\n                    <template v-for='(info, key2) in stage'>\n                      <option :value=key2>{{libUINames[key2]}}</option>\n                    </template>\n                    <option value=\"NA\"> -- </option>\n                  </select>\n                </div>\n                <div class=\"col-sm-6\">\n                  <div  class=\"col-sm-12\" style=\"border: 1px solid rgb(164, 183, 193); padding: 15px 15px; height: 100%\">\n                    <!--{{libMeta[selectedFunction[key1][index-1]]}}-->\n                    <!--{{selectedFunction[key1][index-1]}}-->\n                    {{selectedFunction[key1]}}\n                    <!--{{selectedFunction['Enter']}}-->\n                    <!--{{index-1}}-->\n                  </div>\n                </div>\n              </div>\n\n              <!--<select v-model=\"selected\">-->\n                <!--<option disabled value=\"\">Please select one</option>-->\n                <!--<option>A</option>-->\n                <!--<option>B</option>-->\n                <!--<option>C</option>-->\n              <!--</select>-->\n              <!--<span>Selected: {{ selected }}</span>-->\n\n              <div class=\"row\" >\n                <!--style=\"display: none\"-->\n                <div class=\"col-12\" style=\"margin-top: 5px\">\n                  <b-button type=\"button\" variant=\"secondary\" class=\"float-right\" style=\"margin-left: 3px\" ><i class=\"fa fa-plus\"/></b-button>\n                </div>\n              </div>\n            </div>\n\n\n          </div>\n          <div v-else style=\"border: solid rgb(164, 183, 193);border-width: 1px 0px;padding: 15px 0px;\">\n            This Wizard helps you get started on the workflow\n            <ul>\n              <li>\n                To select the functions used in each step and to configure the parameters for\n                the same right click on the node and select the 'Edit' option from the context menu.\n              </li>\n              <li>\n                To configure the data is passed from one step to another, right click on the edge and\n                select the 'Edit' option from the context menu\n              </li>\n              <li>\n                To create a new edge, hover over the source node, click and drag the edge-handle\n                (red circle) to the destination node. Configure the parameters in the pop-up window.\n              </li>\n              <li>\n                To remove a node or a edge, right click on the same and select the 'Remove' option\n                from the context menu.\n              </li>\n            </ul>\n\n          </div>\n\n        </tab-content>\n        </template>\n      </form-wizard>\n      <span>\n        <!--<tab-content title=\"Represent\"-->\n        <!--icon=\"fa fa-cubes\">-->\n        <!--My second tab content-->\n        <!--</tab-content>-->\n        <!--<tab-content title=\"Prepare\"-->\n        <!--icon=\"fa fa-magic\">-->\n        <!--Yuhuuu! This seems pretty damn simple-->\n        <!--</tab-content>-->\n        <!--<tab-content title=\"Model\"-->\n        <!--icon=\"fa fa-dashboard\">-->\n        <!--Yuhuuu! This seems pretty damn simple-->\n        <!--</tab-content>-->\n        <!--<tab-content title=\"Search\"-->\n        <!--icon=\"fa fa-search\">-->\n        <!--Yuhuuu! This seems pretty damn simple-->\n        <!--</tab-content>-->\n        <!--<tab-content title=\"Visualize\"-->\n        <!--icon=\"fa fa-bar-chart\"-->\n        <!--class=\"disabled\">-->\n        <!--asdfzc vzxcv-->\n        <!--zxcvASFASDF-->\n        <!--</tab-content>-->\n        <!--<tab-content title=\"Store\"-->\n        <!--icon=\"fa fa-file\">-->\n        <!--SDFLKJHASLXNC-->\n        <!--ASDLF-->\n        <!--</tab-content>-->\n        <!--<tab-content title=\"Finish\"-->\n        <!--icon=\"fa fa-check\">-->\n        <!--KAJBXDCOIU ckajsd-->\n        <!--acsdkljfasd-->\n        <!--</tab-content>-->\n\n      </span>\n    </div>\n    <textarea rows=\"10\" v-model=\"text\"></textarea>\n    <br>\n    <file-reader @load=\"text = $event\"></file-reader>\n  </b-modal>\n</template>\n\n<script>\nimport { mapGetters, mapMutations } from 'vuex'\nimport {FormWizard, TabContent} from 'vue-form-wizard'\nimport 'vue-form-wizard/dist/vue-form-wizard.min.css'\nimport FileReader from '../../../components/FileReader.vue'\n\n// import _ from 'lodash'\n// import utils from '../_utils'1\n\nexport default {\n  name: 'wizard',\n  components: {\n    FormWizard,\n    TabContent,\n    FileReader\n  },\n  data () {\n    return {\n      text: '',\n      info: 'Startup Wizard',\n      icon: {\n        'Enter': 'fa fa-database',\n        'Represent': 'fa fa-cubes',\n        'Prepare': 'fa fa-magic',\n        'Model': 'fa fa-dashboard',\n        'Search': 'fa fa-search',\n        'Visualize': 'fa fa-bar-chart',\n        'Store': 'fa fa-file',\n        'Finish': 'fa fa-check'\n      },\n      selectedFunction: {},\n      activeIndex: 0,\n      moduleCount: [],\n      selected: ''\n    }\n  },\n  computed: {\n    ...mapGetters({\n      visible: 'wizardVisible',\n      clickPos: 'cyClickPos',\n      libHierarchy: 'libHierarchy',\n      wizHierarchy: 'wizHierarchy',\n      libMeta: 'libMeta',\n      libUINames: 'libUINames',\n      cy: 'cy',\n      currentGraphId: 'graph/currentGraphId',\n      currentGraphType: 'graph/currentGraphType'\n    }),\n    myModal: {\n      get: function () {\n        return this.visible\n      },\n      set: function (value) {\n        if (value === true) {\n          this.show()\n        } else {\n          this.hide()\n        }\n      }\n    }\n  },\n  methods: {\n    ...mapMutations({\n      showWizard: 'showWizard',\n      hideWizard: 'hideWizard'\n    }),\n    show: function () {\n      this.showWizard()\n    },\n    hide: function () {\n      this.$refs.formWizard.reset()\n      this.hideWizard()\n    },\n    handleCancel: function () {\n      this.hide()\n    },\n    handleOk: function () {\n      this.hide()\n    },\n    clearDesc: function () {\n      this.selectedFunction = ''\n      return true\n    },\n    setActiveIndex: function (prevIndex, nextIndex) {\n      this.activeIndex = nextIndex\n    }\n  },\n  beforeCreate () {\n    //    this.wizHierarchy = this.libHierarchy\n    //    this.wizHierarchy['Finish'] = 'asdf'\n    //    for (var stage in this.wizHierarchy) {\n    //      this.$set(this.selectedFunction, stage, '')\n    //    }\n    console.log('beforeCreate start')\n    console.log(JSON.stringify(this.libHierarchy))\n    console.log('beforeCreate end')\n  },\n  mounted () {\n    console.log('mounted start')\n    console.log(JSON.stringify(this.libHierarchy))\n    console.log('mounted end')\n    //    let timer = setInterval(function () {\n    //      if (this.libHierarchy != null) {\n    //        this.wizHierarchy = this.libHierarchy\n    //        clearInterval(timer)\n    //        console.log('updated')\n    //      }\n    //      console.log(this.libHierarchy)\n    //      console.log('going to sleep')\n    //    }, 1000)\n  }\n}\n</script>\n\n<style scoped>\n.custom-control-input{\n  left: 2px;\n  top: 6px;\n  z-index: 1;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/views/dashboard/Modals/Wizard.vue","<template>\n  <label class=\"text-reader\">\n    <input type=\"file\" @change=\"loadTextFromFile\">\n    <!--<input type=\"file\">-->\n    filereader\n  </label>\n</template>\n\n<script>\nexport default {\n  name: 'fileReader',\n  methods: {\n    loadTextFromFile (ev) {\n      const file = ev.target.files[0]\n      const reader = new FileReader()\n\n      reader.onload = e => this.$emit('load', e.target.result)\n      reader.readAsText(file)\n    }\n  }\n}\n</script>\n\n<style>\n  .text-reader {\n    position: relative;\n    overflow: hidden;\n    display: inline-block;\n\n    /* Fancy button style 😎 */\n    border: 2px solid black;\n    border-radius: 5px;\n    padding: 8px 12px;\n    cursor: pointer;\n  }\n  .text-reader input {\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: -1;\n    opacity: 0;\n  }\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/components/FileReader.vue","<template>\n  <b-modal title=\"Help\" size=\"lg\" v-model=\"myModal\" @ok=\"handleOk()\" @cancel=\"hide()\" hide-header-close >\n    <div class=\"row\">\n       <div class=\"col-lg-12\"><h2>How To Do Stuff Goes here</h2></div> \n       </div> \n    </div>\n  </b-modal>\n</template>\n\n<script>\nimport { mapGetters, mapMutations, mapActions } from 'vuex'\nimport $ from 'jquery'\n// import utils from '../_utils'\n\nexport default {\n  name: 'help',\n  data () {\n    return {\n      graphId: ''\n    }\n  },\n  computed: {\n    ...mapGetters({\n      visible: 'helpVisible',\n      rootgraphs: 'graph/rootgraphs',\n      usergraphs: 'graph/usergraphs',\n      cy: 'cy'\n    }),\n    myModal: {\n      get: function () {\n        return this.visible\n      },\n      set: function (value) {\n        if (value === true) {\n          this.show()\n        } else {\n          this.hide()\n        }\n      }\n    }\n  },\n  methods: {\n    ...mapMutations({\n      show: 'showHelp',\n      hide: 'hideHelp'\n    }),\n    ...mapActions({\n      updateRootGraphs: 'graph/updateRootGraphs',\n      updateUserGraphs: 'graph/updateUserGraphs',\n      setCurrentGraphType: 'graph/setCurrentGraphType',\n      setCurrentGraphId: 'graph/setCurrentGraphId',\n      setCurrentGraphTitle: 'graph/setCurrentGraphTitle'\n    }),\n    handleOk: function () {\n      let val = $('.sections.active').first().attr('id')\n      let graphId = $('#' + val + 'graphs option:selected').val()\n      if (graphId !== undefined) {\n        this.help(val, graphId)\n      }\n      this.hide()\n    },\n    openView: function (view) {\n      $('.graphviews').addClass('hiddenView')\n      $('#' + view).removeClass('hiddenView')\n    }\n  },\n  mounted () {\n    $('.sections').click(function () {\n      $('.active').removeClass('active')\n      $(this).addClass('active')\n    })\n\n    this.updateRootGraphs()\n    this.updateUserGraphs()\n  }\n}\n</script>\nconsole.log(\"*******************************GHAGFKEJKBFJKHEBFJKEBFJKLBELKFBRKLSFBRKLFBRRKLJWBSLKFB\")\n\n<style scoped>\n  .hiddenView{\n    display: none;\n  }\n</style>\n\n\n\n\n// WEBPACK FOOTER //\n// src/views/dashboard/Modals/Help.vue","<template>\n  <div class=\"animated fadeIn\">\n\n    <b-row>\n      <b-col lg=\"12\">\n        <c-table striped caption=\"<i class='fa fa-align-justify'></i> Executions\"></c-table>\n      </b-col><!--/.col-->\n    </b-row><!--/.row-->\n\n  </div>\n\n</template>\n\n<script>\n  import cTable from './Table.vue'\n\n  export default {\n    name: 'tables',\n    components: {cTable}\n  }\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/views/Results.vue","<template>\n  <b-card :header=\"caption\">\n    <b-table :hover=\"hover\" :striped=\"striped\" :bordered=\"bordered\" :small=\"small\" :fixed=\"fixed\" responsive=\"sm\" :items=\"graphruns\" :fields=\"graphruns_fields\" :current-page=\"currentPage\" :per-page=\"perPage\">\n      <template slot=\"status\" slot-scope=\"data\">\n        <b-badge :variant=\"getBadge(data.item.status)\">{{data.item.status}}</b-badge>\n      </template>\n    </b-table>\n    <nav>\n      <b-pagination :total-rows=\"getRowCount(items)\" :per-page=\"perPage\" v-model=\"currentPage\" prev-text=\"Prev\" next-text=\"Next\" hide-goto-end-buttons/>\n    </nav>\n  </b-card>\n</template>\n\n<script>\n  /**\n   * Randomize array element order in-place.\n   * Using Durstenfeld shuffle algorithm.\n   */\n//  const shuffleArray = (array) => {\n//    for (let i = array.length - 1; i > 0; i--) {\n//      let j = Math.floor(Math.random() * (i + 1))\n//      let temp = array[i]\n//      array[i] = array[j]\n//      array[j] = temp\n//    }\n//    return array\n//  }\n  import { mapGetters, mapActions } from 'vuex'\n\n  export default {\n    name: 'c-table',\n    props: {\n      caption: {\n        type: String,\n        default: 'Table'\n      },\n      hover: {\n        type: Boolean,\n        default: false\n      },\n      striped: {\n        type: Boolean,\n        default: false\n      },\n      bordered: {\n        type: Boolean,\n        default: false\n      },\n      small: {\n        type: Boolean,\n        default: false\n      },\n      fixed: {\n        type: Boolean,\n        default: false\n      }\n    },\n    data: () => {\n      return {\n        items: [\n          {username: 'Samppa Nori', registered: '2012/01/01', role: 'Member', status: 'Active'},\n          {username: 'Estavan Lykos', registered: '2012/02/01', role: 'Staff', status: 'Banned'},\n          {username: 'Chetan Mohamed', registered: '2012/02/01', role: 'Admin', status: 'Inactive'},\n          {username: 'Derick Maximinus', registered: '2012/03/01', role: 'Member', status: 'Pending'},\n          {username: 'Friderik Dávid', registered: '2012/01/21', role: 'Staff', status: 'Active'},\n          {username: 'Yiorgos Avraamu', registered: '2012/01/01', role: 'Member', status: 'Active'},\n          {username: 'Avram Tarasios', registered: '2012/02/01', role: 'Staff', status: 'Banned'},\n          {username: 'Quintin Ed', registered: '2012/02/01', role: 'Admin', status: 'Inactive'},\n          {username: 'Enéas Kwadwo', registered: '2012/03/01', role: 'Member', status: 'Pending'},\n          {username: 'Agapetus Tadeáš', registered: '2012/01/21', role: 'Staff', status: 'Active'},\n          {username: 'Carwyn Fachtna', registered: '2012/01/01', role: 'Member', status: 'Active'},\n          {username: 'Nehemiah Tatius', registered: '2012/02/01', role: 'Staff', status: 'Banned'},\n          {username: 'Ebbe Gemariah', registered: '2012/02/01', role: 'Admin', status: 'Inactive'},\n          {username: 'Eustorgios Amulius', registered: '2012/03/01', role: 'Member', status: 'Pending'},\n          {username: 'Leopold Gáspár', registered: '2012/01/21', role: 'Staff', status: 'Active'},\n          {username: 'Pompeius René', registered: '2012/01/01', role: 'Member', status: 'Active'},\n          {username: 'Paĉjo Jadon', registered: '2012/02/01', role: 'Staff', status: 'Banned'},\n          {username: 'Micheal Mercurius', registered: '2012/02/01', role: 'Admin', status: 'Inactive'},\n          {username: 'Ganesha Dubhghall', registered: '2012/03/01', role: 'Member', status: 'Pending'},\n          {username: 'Hiroto Šimun', registered: '2012/01/21', role: 'Staff', status: 'Active'},\n          {username: 'Vishnu Serghei', registered: '2012/01/01', role: 'Member', status: 'Active'},\n          {username: 'Zbyněk Phoibos', registered: '2012/02/01', role: 'Staff', status: 'Banned'},\n          {username: 'Einar Randall', registered: '2012/02/01', role: 'Admin', status: 'Inactive'},\n          {username: 'Félix Troels', registered: '2012/03/21', role: 'Staff', status: 'Active'},\n          {username: 'Aulus Agmundr', registered: '2012/01/01', role: 'Member', status: 'Pending'}\n        ],\n        fields: [\n          {key: 'username'},\n          {key: 'registered'},\n          {key: 'role'},\n          {key: 'status'}\n        ],\n        graphruns_fields: [\n          {key: 'id'},\n          {key: 'graph'},\n          {key: 'start_time'},\n          {key: 'status'},\n          {key: 'actions'}\n        ],\n        currentPage: 1,\n        perPage: 10,\n        totalRows: 0\n      }\n    },\n    computed: {\n      ...mapGetters({\n        graphruns: 'graph/graphruns'\n      })\n    },\n    methods: {\n      ...mapActions({\n        setGraphRuns: 'graph/setGraphRuns'\n      }),\n      working (msg) {\n        alert(msg)\n      },\n      getBadge (status) {\n        return status === 'Started' ? 'secondary'\n          : status === 'Success' ? 'success'\n            : status === 'NA' ? 'warning'\n              : status === 'Error' ? 'danger' : 'primary'\n      },\n      getRowCount (items) {\n        return items.length\n      }\n    },\n    mounted () {\n      this.setGraphRuns()\n    }\n  }\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/views/Table.vue","<template>\n<div class='panel panel-sm'>\n      <div class='panel-heading'> \n        <h4>CSV Import</h4>\n      </div>\n      <div class='panel-body'>\n        <div class='form-group'>\n          <label for='csv_file' class='control-label col-sm-3 text-right'>CSV file to import</label>\n          <div class='col-sm-9'>\n            <input type='file' id='csv_file' name='csv_file' class='form-control' @change='loadCSV($event)'>\n          </div>\n        </div>\n        <div class='col-sm-offset-3 col-sm-9'>\n          <div class='checkbox-inline'>\n            <label for='header_rows'><input type='checkbox' id='header_rows'> File contains header row?</label>\n          </div>\n        </div>\n        \n        <div class='col-sm-12'>\n          <button class='btn btn-primary' v-on:click='selecTion(1)'>Parse CSV</button>\n          <button class='btn btn-primary' v-on:click='selecTion(2)'>Get EDA</button>\n          <button class='btn btn-primary' v-on:click='selecTion(3)'>Line Plot</button>\n          <button class='btn btn-primary' v-on:click='selecTion(4)'>Bar Plot</button>\n          <button class='btn btn-primary' v-on:click='selecTion(5)'>Scatter Plot</button>\n        </div>\n        \n        <div v-if='!selec1ted'>\n          <table v-if='parse_csv'>\n            <thead>\n              <tr>\n                <th v-for='key in parse_header'\n                    @click='sortBy(key)'\n                    :class='{ active: sortKey == key }'>\n                  {{ key | capitalize }}\n                  \n                </th>\n              </tr>\n            </thead> \n            <tr v-for='csv in parse_csv'>\n              <td v-for='key in parse_header'>\n                {{csv[key]}}\n              </td>\n            </tr>\n          </table> \n        </div>\n        <div v-if='!selec2ted'>\n          <div class='panel'>\n          <table>\n            <th> Column\n            </th>\n            <th>  Min - Max\n            </th>\n            <th> Average\n            </th>\n            <th> Median\n            </th>\n            <th>  Standard Deviation\n            </th>\n            <tr v-for='col in eda'>\n              <td v-for='c in col'>\n                {{c}}\n              </td>\n            </tr>\n          </table>\n          </div>\n        </div>\n        <div v-if='!selec3ted'>\n          <span class='Strong'> Select axis to plot </span>\n          <div class='col-sm-3'>\n            X Axis<b-form-select v-model=\"s1selected\" :options=\"parse_header\" @change='Plot($event, null)'></b-form-select>\n           </div> \n          <div class='col-sm-3'>\n            Y Axis<b-form-select v-model=\"s2selected\" :options=\"parse_header\" @change='Plot(null, $event)'></b-form-select>\n           </div>\n           <div class='panel'> \n           <vue-plotly :data=\"ata\" :layout=layout :options=options />   \n           </div> \n        </div>\n        <div v-if='!selec4ted'>\n          <span class='Strong'> Select axis to plot </span>\n          <div class='col-sm-3'>\n            X Axis<b-form-select v-model=\"s1selected\" :options=\"parse_header\" @change='Plot($event, null)'></b-form-select>\n           </div> \n          <div class='col-sm-3'>\n            Y Axis<b-form-select v-model=\"s2selected\" :options=\"parse_header\" @change='Plot(null, $event)'></b-form-select>\n           </div>\n           <div class='panel'> \n           <vue-plotly :data=\"ata\" :layout=layout :options=options />   \n           </div> \n        </div>\n        <div v-if='!selec5ted'>\n          <span class='Strong'> Select axis to plot </span>\n          <div class='col-sm-3'>\n            X Axis<b-form-select v-model=\"s1selected\" :options=\"parse_header\" @change='Plot($event, null)'></b-form-select>\n           </div> \n          <div class='col-sm-3'>\n            Y Axis<b-form-select v-model=\"s2selected\" :options=\"parse_header\" @change='Plot(null, $event)'></b-form-select>\n           </div>\n           <div class='panel'> \n           <vue-plotly :data=\"ata\" :layout=layout :options=options />   \n           </div> \n        </div>\n      </div>\n    </div>\n</template>\n\n<script>\n// import { mapGetters, mapMutations } from 'vuex'\n// import _ from 'lodash'\n// import $ from 'jquery'\nimport VuePlotly from '@statnett/vue-plotly'\nimport * as d3 from 'd3'\n// import * as Plotly from 'plotly.js'\nvar plotly = require('plotly')\nconsole.log(plotly)\nexport default {\n  name: 'visual',\n  components: {\n    VuePlotly\n  },\n  data () {\n    return {\n      ata: [{ 'x': [1, 3], 'y': [2, 4] }],\n      layout: {'mode': 'markers'},\n      options: {'type': 'scatter'},\n      s1selected: null,\n      s2selected: null,\n      channel_name: '',\n      channel_fields: [],\n      channel_entries: [],\n      parse_header: [],\n      parse_csv: [],\n      eda: [],\n      rawData: [],\n      sortOrders: {},\n      sortKey: '',\n      selec1ted: false,\n      selec2ted: true,\n      selec3ted: true,\n      selec4ted: true,\n      selec5ted: true\n    }\n  },\n  filters: {\n    capitalize: function (str) {\n      return str.charAt(0).toUpperCase() + str.slice(1)\n    }\n  },\n  methods: {\n    sortBy: function (key) {\n      var vm = this\n      vm.sortKey = key\n      vm.sortOrders[key] = vm.sortOrders[key] * -1\n    },\n    csvJSON (csv) {\n      var vm = this\n      var lines = csv.split('\\n')\n      var result = []\n      var headers = lines[0].split(',')\n      vm.parse_header = lines[0].split(',')\n      lines[0].split(',').forEach(function (key) {\n        vm.sortOrders[key] = 1\n      })\n      lines.map(function (line, indexLine) {\n        if (indexLine < 1) return // Jump header line\n        var obj = {}\n        var currentline = line.split(',')\n        headers.map(function (header, indexHeader) {\n          obj[header] = currentline[indexHeader]\n        })\n        result.push(obj)\n      })\n      result.pop() // remove the last item because undefined values\n      return result // JavaScript object\n    },\n    doEDA (csv) {\n      var lines = csv.split('\\n')\n      var totalRec = lines.length - 2\n      var headers = lines[0].split(',')\n      var totalCol = headers.length - 1\n      var data = []\n      for (var i = 1; i < totalRec; i++) {\n        var currentline = lines[i].split(',')\n        var dataObj = {}\n        for (var j = 0; j < totalCol; j++) {\n          if (Number.isNaN(parseInt(currentline[j]))) {\n            dataObj[headers[j]] = currentline[j]\n          } else {\n            dataObj[headers[j]] = parseFloat(currentline[j])\n          }\n        }\n        data.push(dataObj)\n      }\n      var eda = []\n      for (j = 0; j < totalCol; j++) {\n        var extent = d3.extent(data, function (d) { return d[headers[j]] })\n        var avg = d3.mean(data, function (d) { return d[headers[j]] })\n        var med = d3.median(data, function (d) { return d[headers[j]] })\n        var sD = d3.deviation(data, function (d) { return d[headers[j]] })\n        eda.push({\n          'Column': headers[j],\n          'Min Max': extent,\n          'Average': avg,\n          'Median': med,\n          'Standard Deviation': sD\n        })\n      }\n      console.log('data', data)\n      console.log('eda', eda)\n      this.rawData.push(data)\n      return eda\n    },\n    loadCSV (e) {\n      var vm = this\n      if (window.FileReader) {\n        var reader = new FileReader()\n        reader.readAsText(e.target.files[0])\n        // Handle errors load\n        reader.onload = function (event) {\n          var csv = event.target.result\n          vm.parse_csv = vm.csvJSON(csv)\n          vm.eda = vm.doEDA(csv)\n          console.log(vm.parse_csv[0])\n        }\n        reader.onerror = function (evt) {\n          if (evt.target.error.name === 'NotReadableError') {\n            alert('Can not read file !')\n          }\n        }\n      } else {\n        alert('FileReader are not supported in this browser.')\n      }\n    },\n    selecTion (e) {\n      this.selec1ted = true\n      this.selec2ted = true\n      this.selec3ted = true\n      this.selec4ted = true\n      this.selec5ted = true\n      var chng = 'selec' + e + 'ted'\n      this[chng] = false\n    },\n    Plot (x, y, type) {\n      var rdd = this.rawData[0]\n      if (x) {\n        var xx = []\n        for (var l = 0; l < rdd.length; l++) {\n          xx.push(rdd[l][x])\n        }\n        this.ata[0]['x'] = xx\n      }\n      if (y) {\n        var yy = []\n        for (var k = 0; k < rdd.length; k++) {\n          yy.push(rdd[k][y])\n        }\n        this.ata[0]['y'] = yy\n      }\n    }\n  }\n\n}\n</script>\n\n<style scoped>\n.custom-control-input{\n  left: 2px;\n  top: 6px;\n  z-index: 1;\n}\nhtml, body {\n  margin: 0;\n  padding: 0;\n}\nbody {\n  margin: 32px auto;\n}\n.panel {\n  border: 2px solid #dfdfdf;\n  box-shadow: rgba(0, 0, 0, 0.15) 0 1px 0 0;\n  margin: 10px;\n} \n.panel.panel-sm {\n  max-width: 700px;\n  margin: 10px auto;\n}\n.panel-heading {\n  border-bottom: 2px solid #dfdfdf;\n}\n.panel-heading h1, .panel-heading h2, .panel-heading h3, .panel-heading h4, .panel-heading h5, .panel-heading h6 {\n  margin: 0;\n  padding: 0;\n}\n.panel-body .checkbox-inline {\n  padding: 15px 20px;\n}\ntable {\n  font-family: arial, sans-serif;\n  border-collapse: collapse;\n  width: 100%;\n}\n\ntd, th {\n  border: 1px solid #dddddd;\n  text-align: left;\n  padding: 8px;\n}\n\ntr:nth-child(even) {\n  background-color: #dddddd;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/views/Visual.vue","module.exports = [\"inherit\",\"initial\",\"unset\"]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-global-keywords/index.json\n// module id = 749\n// module chunks = 1","module.exports = [\"caption\",\"icon\",\"menu\",\"message-box\",\"small-caption\",\"status-bar\"]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-system-font-keywords/index.json\n// module id = 750\n// module chunks = 1","module.exports = [\"normal\",\"bold\",\"bolder\",\"lighter\",\"100\",\"200\",\"300\",\"400\",\"500\",\"600\",\"700\",\"800\",\"900\"]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-font-weight-keywords/index.json\n// module id = 751\n// module chunks = 1","module.exports = [\"normal\",\"italic\",\"oblique\"]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-font-style-keywords/index.json\n// module id = 752\n// module chunks = 1","module.exports = [\"normal\",\"condensed\",\"semi-condensed\",\"extra-condensed\",\"ultra-condensed\",\"expanded\",\"semi-expanded\",\"extra-expanded\",\"ultra-expanded\"]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-font-stretch-keywords/index.json\n// module id = 753\n// module chunks = 1","<template>\n  <div class=\"app flex-row align-items-center\">\n    <div class=\"container\">\n      <b-row class=\"justify-content-center\">\n        <b-col md=\"6\">\n          <div class=\"clearfix\">\n            <h1 class=\"float-left display-3 mr-4\">404</h1>\n            <h4 class=\"pt-3\">Oops! You're lost.</h4>\n            <p class=\"text-muted\">The page you are looking for was not found.</p>\n          </div>\n          <b-input-group>\n            <b-input-group-prepend>\n              <b-input-group-text>\n                <i class=\"fa fa-search\"></i>\n              </b-input-group-text>\n            </b-input-group-prepend>\n            <input id=\"prependedInput\" class=\"form-control\" size=\"16\" type=\"text\" placeholder=\"What are you looking for?\">\n            <b-input-group-append>\n              <b-button variant=\"info\">Search</b-button>\n            </b-input-group-append>\n          </b-input-group>\n        </b-col>\n      </b-row>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Page404'\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/views/pages/Page404.vue","<template>\n  <div class=\"app flex-row align-items-center\">\n    <div class=\"container\">\n      <b-row class=\"justify-content-center\">\n        <b-col md=\"6\">\n          <div class=\"clearfix\">\n            <h1 class=\"float-left display-3 mr-4\">500</h1>\n            <h4 class=\"pt-3\">Houston, we have a problem!</h4>\n            <p class=\"text-muted\">The page you are looking for is temporarily unavailable.</p>\n          </div>\n          <b-input-group>\n            <b-input-group-prepend>\n              <b-input-group-text>\n                <i class=\"fa fa-search\"></i>\n              </b-input-group-text>\n            </b-input-group-prepend>\n            <input id=\"prependedInput\" class=\"form-control\" size=\"16\" type=\"text\" placeholder=\"What are you looking for?\">\n            <b-input-group-append>\n              <b-button variant=\"info\">Search</b-button>\n            </b-input-group-append>\n          </b-input-group>\n        </b-col>\n      </b-row>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Page500'\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/views/pages/Page500.vue","<template>\n  <div class=\"app flex-row align-items-center\">\n    <div class=\"container\">\n      <b-row class=\"justify-content-center\">\n        <b-col md=\"8\">\n          <b-card-group>\n            <b-card no-body class=\"p-4\">\n              <b-card-body>\n                <h1>Login</h1>\n                <p class=\"text-muted\">Sign In to your account</p>\n                <b-input-group class=\"mb-3\">\n                  <b-input-group-prepend><b-input-group-text><i class=\"icon-user\"></i></b-input-group-text></b-input-group-prepend>\n                  <input v-model=\"user\" type=\"text\" class=\"form-control\" placeholder=\"Username\">\n                </b-input-group>\n                <b-input-group class=\"mb-4\">\n                  <b-input-group-prepend><b-input-group-text><i class=\"icon-lock\"></i></b-input-group-text></b-input-group-prepend>\n                  <input  v-model=\"pass\" type=\"password\" class=\"form-control\" placeholder=\"Password\">\n                </b-input-group>\n                <b-row>\n                  <b-col cols=\"6\">\n                    <b-button variant=\"primary\" class=\"px-4\" v-on:click=\"login(user, pass)\">Login</b-button>\n                  </b-col>\n                  <!-- <b-col cols=\"6\" class=\"text-right\">\n                    <b-button variant=\"link\" class=\"px-0\">Forgot password?</b-button>\n                  </b-col> -->\n                  <b-col cols=\"6\" class=\"text-right\" v-if=\"loginFailed\">\n                    <span style=\"color: red\">Login Failed</span>\n                  </b-col>\n                </b-row>\n              </b-card-body>\n            </b-card>\n            <b-card no-body class=\"text-white bg-primary py-5 d-md-down-none\" style=\"width:44%\">\n              <b-card-body class=\"text-center\">\n                <div>\n                  <h2>Sign up</h2>\n                  <p> Register now to use the MaDE@UB Machine Learning Toolkit with interactive graphical user interface to perform machine learning tasks on your datasets.</p>\n                  <p> click below to send mail to our system administerators to create account</p>\n                  <a href=\"mailto:sahmed9@buffalo.edu\"><b-button variant=\"primary\" class=\"active mt-3\">Register Now!</b-button></a>\n                </div>\n              </b-card-body>\n            </b-card>\n          </b-card-group>\n        </b-col>\n      </b-row>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters, mapActions } from 'vuex'\n\nexport default {\n  name: 'Login',\n  data () {\n    return {\n      user: '',\n      pass: ''\n    }\n  },\n  computed: {\n    ...mapGetters({\n      loginFailed: 'auth/loginFailed'\n    })\n  },\n  methods: {\n    ...mapActions({\n      authLogin: 'auth/login'\n    }),\n    login (username, password) {\n      this.authLogin({ username, password })\n        .then(() => this.$router.push('/'))\n    }\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/views/pages/Login.vue","<template>\n  <div class=\"app flex-row align-items-center\">\n    <div class=\"container\">\n      <b-row class=\"justify-content-center\">\n        <b-col md=\"6\" sm=\"8\">\n          <b-card no-body class=\"mx-4\">\n            <b-card-body class=\"p-4\">\n              <h1>Register</h1>\n              <p class=\"text-muted\">Create your account</p>\n              <b-input-group class=\"mb-3\">\n                <b-input-group-prepend>\n                  <b-input-group-text><i class=\"icon-user\"></i></b-input-group-text>\n                </b-input-group-prepend>\n                <input type=\"text\" class=\"form-control\" placeholder=\"Username\">\n              </b-input-group>\n\n              <b-input-group class=\"mb-3\">\n                <b-input-group-prepend>\n                  <b-input-group-text>@</b-input-group-text>\n                </b-input-group-prepend>\n                <input type=\"text\" class=\"form-control\" placeholder=\"Email\">\n              </b-input-group>\n\n              <b-input-group class=\"mb-3\">\n                <b-input-group-prepend>\n                  <b-input-group-text><i class=\"icon-lock\"></i></b-input-group-text>\n                </b-input-group-prepend>\n                <input type=\"password\" class=\"form-control\" placeholder=\"Password\">\n              </b-input-group>\n\n              <b-input-group class=\"mb-4\">\n                <b-input-group-prepend>\n                  <b-input-group-text><i class=\"icon-lock\"></i></b-input-group-text>\n                </b-input-group-prepend>\n                <input type=\"password\" class=\"form-control\" placeholder=\"Repeat password\">\n              </b-input-group>\n\n              <b-button variant=\"success\" block>Create Account</b-button>\n            </b-card-body>\n            <b-card-footer class=\"p-4\">\n              <b-row>\n                <b-col cols=\"6\">\n                  <b-button block class=\"btn btn-facebook\"><span>facebook</span></b-button>\n                </b-col>\n                <b-col cols=\"6\">\n                  <b-button block class=\"btn btn-twitter\" type=\"button\"><span>twitter</span></b-button>\n                </b-col>\n              </b-row>\n            </b-card-footer>\n          </b-card>\n        </b-col>\n      </b-row>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Register'\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/views/pages/Register.vue","// The Vue build version to load with the `import` command\n// (runtime-only or standalone) has been set in webpack.base.conf with an alias.\nimport Vue from 'vue'\nimport BootstrapVue from 'bootstrap-vue'\nimport App from './App'\nimport router from './router'\nimport store from './store'\n\nVue.use(BootstrapVue)\n\n/* eslint-disable no-new */\nnew Vue({\n  el: '#app',\n  router,\n  store,\n  template: '<App/>',\n  components: {\n    App\n  }\n})\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js"],"sourceRoot":""}